<CONFIG>
	NAME ServiceTestClassCode
	CATEGORY ServiceTest
	NODE Entity
	TOPLEVEL False
</CONFIG>
<CONTENT>
//
// Use this template to create a set of CRUD tests which test VITA data operations for this entity.
//
<%%=USETABS true%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using System;
using System.Configuration;
using System.Globalization;
using System.Text;
using Xunit;
using Moq;
using Vita.Entities;
using Vita.Entities.Authorization;
using PSNS.VITA.Models;
using System.Collections.Generic;
using PSNS.WebApi.Dtos;
using System.Linq;
using PSNS.Services.Services;%%>
with (Project)
{
	if (ProjectReferenceCount > 1)
	{
		// get a project tagged as BLL
		foreach (Project where Tags.Contains("BLL") == true)
		{
    <%%-
using %%><%%=Namespace%%><%%-;
using %%><%%=Namespace%%><%%-.Models;%%>
		}
	}
	else
	{
		foreach (Project)
		{
    <%%-
using %%><%%=Namespace%%><%%-;
using %%><%%=Namespace%%><%%-.Models;%%>
		}
	}
}
<%%-

namespace %%><%%=Project.Namespace%%><%%-.Services%%>
<%%=Solution.OPEN_BRACE%%><%%-
	//------------------------------------------------------------------------------
	/// <summary>This class implements service tests and validation
	/// for the %%><%%=ServiceTestClassName%%><%%- service.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize outside of protected areas, change
	/// the Status value below to something other than Generated to
	/// prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	//------------------------------------------------------------------------------
	public partial class %%><%%=ServiceTestClassName%%><%%- : %%><%%=Project.ServiceTestBaseClassName%%>
	<%%=Solution.OPEN_BRACE%%><%%-
        	///--------------------------------------------------------------------------------
		/// <summary>Test create an instance of %%><%%=VITAInterfaceName%%><%%-.</summary>
        	///--------------------------------------------------------------------------------
		[Fact]
		public void ServiceCreate%%><%%=VITAClassName%%><%%-Test()%%>
		<%%=Solution.OPEN_BRACE%%><%%-
			// arrange
			InitializeAnonymousSession(%%>
			if (Tags.Contains("USER") == true)
			{
				<%%-false%%>
			}
			<%%-);
			%%><%%=ServiceImplementationName%%><%%- service = new %%><%%=ServiceImplementationName%%><%%-();
			%%><%%=VITADSDtoClassName%%><%%- %%><%%=VITAClassName.CamelCase()%%><%%- = new %%><%%=VITADSDtoClassName%%><%%- { %%><%%=VITAPrimaryKeyPropertyName%%><%%- = %%><%%=VITAPrimaryKeyNewValue%%>
			foreach (Property where IsStringProperty == true)
			{
				<%%-, %%><%%=VITAPropertyName%%><%%- = "My %%><%%=VITAPropertyName%%><%%-"%%>
			}
			<%%- };

			// act
			%%><%%=VITAInterfaceName%%><%%- created%%><%%=VITAClassName%%><%%- = service.Create%%><%%=VITAClassName%%><%%-(%%><%%=VITAClassName.CamelCase()%%><%%-, MockSession.Object);
			
			// assert
			Assert.NotNull(created%%><%%=VITAClassName%%><%%-);%%>
			foreach (Property where IsStringProperty == true)
			{
			<%%-
			Assert.Equal(created%%><%%=../VITAClassName%%><%%-.%%><%%=VITAPropertyName%%><%%-, %%><%%=../VITAClassName.CamelCase()%%><%%-.%%><%%=VITAPropertyName%%><%%-);%%>
			}
		<%%=Solution.CLOSE_BRACE%%><%%-

		///--------------------------------------------------------------------------------
		/// <summary>Test update an instance of %%><%%=VITAInterfaceName%%><%%- by id.</summary>
		///--------------------------------------------------------------------------------
		[Fact]
		public void ServiceUpdate%%><%%=VITAClassName%%><%%-Test()%%>
		<%%=Solution.OPEN_BRACE%%><%%-
			// arrange
			InitializeAnonymousSession(%%>
			if (Tags.Contains("USER") == true)
			{
				<%%-false%%>
			}
			<%%-);
			%%><%%=ServiceImplementationName%%><%%- service = new %%><%%=ServiceImplementationName%%><%%-();
			%%><%%=VITAInterfaceName%%><%%- %%><%%=VITAClassName.CamelCase()%%><%%- = new %%><%%=VITADSDtoClassName%%><%%- { %%><%%=VITAPrimaryKeyPropertyName%%><%%- = %%><%%=VITAPrimaryKeyNewValue%%>
			foreach (Property where IsStringProperty == true)
			{
				<%%-, %%><%%=VITAPropertyName%%><%%- = "My %%><%%=VITAPropertyName%%><%%-"%%>
			}
			<%%- } as %%><%%=VITAInterfaceName%%><%%-;
			%%><%%=LIBPluralEntityName%%><%%-.Add(%%><%%=VITAClassName.CamelCase()%%><%%-);
			%%><%%=VITAClassName.CamelCase()%%><%%- = new %%><%%=VITADSDtoClassName%%><%%- { %%><%%=VITAPrimaryKeyPropertyName%%><%%- = %%><%%=VITAPrimaryKeyNewValue%%>
			foreach (Property where IsStringProperty == true)
			{
				<%%-, %%><%%=VITAPropertyName%%><%%- = "My %%><%%=VITAPropertyName%%><%%-2"%%>
			}
			<%%- } as %%><%%=VITAInterfaceName%%><%%-;
			%%><%%=LIBPluralEntityName%%><%%-.Add(%%><%%=VITAClassName.CamelCase()%%><%%-);

			// act
			%%><%%=VITAInterfaceName%%><%%- updated%%><%%=VITAClassName%%><%%- = service.Update%%><%%=VITAClassName%%><%%-(%%><%%=VITAClassName.CamelCase()%%><%%-, MockSession.Object);
			
			// assert
			Assert.NotNull(updated%%><%%=VITAClassName%%><%%-);%%>
			foreach (Property where IsStringProperty == true)
			{
			<%%-
			Assert.Equal(updated%%><%%=../VITAClassName%%><%%-.%%><%%=VITAPropertyName%%><%%-, %%><%%=../VITAClassName.CamelCase()%%><%%-.%%><%%=VITAPropertyName%%><%%-);%%>
			}
		<%%=Solution.CLOSE_BRACE%%><%%-

		///--------------------------------------------------------------------------------
		/// <summary>Test delete an instance of %%><%%=VITAInterfaceName%%><%%- by id.</summary>
		///--------------------------------------------------------------------------------
		[Fact]
		public void ServiceDelete%%><%%=VITAClassName%%><%%-Test()%%>
		<%%=Solution.OPEN_BRACE%%><%%-
			// arrange
			InitializeAnonymousSession(%%>
			if (Tags.Contains("USER") == true)
			{
				<%%-false%%>
			}
			<%%-);
			%%><%%=ServiceImplementationName%%><%%- service = new %%><%%=ServiceImplementationName%%><%%-();
			%%><%%=VITAInterfaceName%%><%%- %%><%%=VITAClassName.CamelCase()%%><%%- = new %%><%%=VITADSDtoClassName%%><%%- { %%><%%=VITAPrimaryKeyPropertyName%%><%%- = %%><%%=VITAPrimaryKeyNewValue%%>
			foreach (Property where IsStringProperty == true)
			{
				<%%-, %%><%%=VITAPropertyName%%><%%- = "My %%><%%=VITAPropertyName%%><%%-"%%>
			}
			<%%- } as %%><%%=VITAInterfaceName%%><%%-;
			%%><%%=LIBPluralEntityName%%><%%-.Add(%%><%%=VITAClassName.CamelCase()%%><%%-);

			// act
			bool success = service.Delete%%><%%=VITAClassName%%><%%-(%%><%%=VITAClassName.CamelCase()%%><%%-.%%><%%=VITAPrimaryKeyPropertyName%%><%%-, MockSession.Object);
			
			// assert
			Assert.Equal(success, true);
			Assert.Equal(%%><%%=LIBPluralEntityName%%><%%-.Count, 0);
			Assert.Null(%%><%%=LIBPluralEntityName%%><%%-.Where(i => i.%%><%%=VITAPrimaryKeyPropertyName%%><%%- == %%><%%=VITAClassName.CamelCase()%%><%%-.%%><%%=VITAPrimaryKeyPropertyName%%><%%-).FirstOrDefault());%%>
		<%%=Solution.CLOSE_BRACE%%><%%-

		///--------------------------------------------------------------------------------
		/// <summary>Test get an instance of %%><%%=VITAInterfaceName%%><%%- by id.</summary>
		///--------------------------------------------------------------------------------
		[Fact]
		public void ServiceGet%%><%%=VITAClassName%%><%%-Test()%%>
		<%%=Solution.OPEN_BRACE%%><%%-
			// arrange
			InitializeAnonymousSession(%%>
			if (Tags.Contains("USER") == true)
			{
				<%%-false%%>
			}
			<%%-);
			%%><%%=ServiceImplementationName%%><%%- service = new %%><%%=ServiceImplementationName%%><%%-();
			%%><%%=VITAInterfaceName%%><%%- %%><%%=VITAClassName.CamelCase()%%><%%- = new %%><%%=VITADSDtoClassName%%><%%- { %%><%%=VITAPrimaryKeyPropertyName%%><%%- = %%><%%=VITAPrimaryKeyNewValue%%>
			foreach (Property where IsStringProperty == true)
			{
				<%%-, %%><%%=VITAPropertyName%%><%%- = "My %%><%%=VITAPropertyName%%><%%-"%%>
			}
			<%%- } as %%><%%=VITAInterfaceName%%><%%-;
			%%><%%=LIBPluralEntityName%%><%%-.Add(%%><%%=VITAClassName.CamelCase()%%><%%-);

			// act
			%%><%%=VITAInterfaceName%%><%%- get%%><%%=VITAClassName%%><%%- = service.Get%%><%%=VITAClassName%%><%%-(%%><%%=VITAClassName.CamelCase()%%><%%-.%%><%%=VITAPrimaryKeyPropertyName%%><%%-, MockSession.Object);
			
			// assert
			Assert.NotNull(get%%><%%=VITAClassName%%><%%-);%%>
			foreach (Property where IsStringProperty == true)
			{
			<%%-
			Assert.Equal(get%%><%%=../VITAClassName%%><%%-.%%><%%=VITAPropertyName%%><%%-, %%><%%=../VITAClassName.CamelCase()%%><%%-.%%><%%=VITAPropertyName%%><%%-);%%>
			}
		<%%=Solution.CLOSE_BRACE%%><%%-

		///--------------------------------------------------------------------------------
		/// <summary>Test get a list of %%><%%=VITAInterfaceName%%><%%-.</summary>
		///--------------------------------------------------------------------------------
		[Fact]
		public void ServiceGet%%><%%=LIBPluralEntityName%%><%%-Test()%%>
		<%%=Solution.OPEN_BRACE%%><%%-
			// arrange
			InitializeAnonymousSession(%%>
			if (Tags.Contains("USER") == true)
			{
				<%%-false%%>
			}
			<%%-);
			%%><%%=ServiceImplementationName%%><%%- service = new %%><%%=ServiceImplementationName%%><%%-();
			%%><%%=VITAInterfaceName%%><%%- %%><%%=VITAClassName.CamelCase()%%><%%- = new %%><%%=VITADSDtoClassName%%><%%- { %%><%%=VITAPrimaryKeyPropertyName%%><%%- = %%><%%=VITAPrimaryKeyNewValue%%>
			foreach (Property where IsStringProperty == true)
			{
				<%%-, %%><%%=VITAPropertyName%%><%%- = "My %%><%%=VITAPropertyName%%><%%-"%%>
			}
			<%%- } as %%><%%=VITAInterfaceName%%><%%-;
			%%><%%=LIBPluralEntityName%%><%%-.Add(%%><%%=VITAClassName.CamelCase()%%><%%-);
			%%><%%=VITAClassName.CamelCase()%%><%%- = new %%><%%=VITADSDtoClassName%%><%%- { %%><%%=VITAPrimaryKeyPropertyName%%><%%- = %%><%%=VITAPrimaryKeyNewValue%%>
			foreach (Property where IsStringProperty == true)
			{
				<%%-, %%><%%=VITAPropertyName%%><%%- = "My %%><%%=VITAPropertyName%%><%%-2"%%>
			}
			<%%- } as %%><%%=VITAInterfaceName%%><%%-;
			%%><%%=LIBPluralEntityName%%><%%-.Add(%%><%%=VITAClassName.CamelCase()%%><%%-);

			// act
			IQueryable<%%><%%=VITAInterfaceName%%><%%-> %%><%%=LIBPluralEntityName.CamelCase()%%><%%- = service.Get%%><%%=LIBPluralEntityName%%><%%-(MockSession.Object);
			
			// assert
			Assert.NotNull(%%><%%=LIBPluralEntityName.CamelCase()%%><%%-);
			Assert.Equal(%%><%%=LIBPluralEntityName.CamelCase()%%><%%-.Count(), 2);%%>
		<%%=Solution.CLOSE_BRACE%%>
	<%%=Solution.CLOSE_BRACE%%>
<%%=Solution.CLOSE_BRACE%%>%%></CONTENT><OUTPUT>
<%%:
if (File(ServiceTestClassFilePath) == null || (File(ServiceTestClassFilePath).Contains("<Status>Generated</Status>") == true
     && File(ServiceTestClassFilePath).FilterProtected().FilterIgnored() != Text.FilterProtected().FilterIgnored()))
{
	update(ServiceTestClassFilePath)
}
%%></OUTPUT>