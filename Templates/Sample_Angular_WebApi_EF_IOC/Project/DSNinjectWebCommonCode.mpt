<CONFIG>
	NAME DSNinjectWebCommonCode
	CATEGORY DS
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS true%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
[assembly: WebActivatorEx.PreApplicationStartMethod(typeof(PSNS.UI.NinjectWebCommon), "Start")]
[assembly: WebActivatorEx.ApplicationShutdownMethodAttribute(typeof(PSNS.UI.NinjectWebCommon), "Stop")]

namespace %%><%%=Project.Namespace%%>
<%%=Solution.OPEN_BRACE%%><%%-
	//------------------------------------------------------------------------------
	/// <summary>This class defines Ninject web setup, including modules.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize outside of protected areas, add those changes
	/// in another partial class file.  As a last resort (if generated code needs
	/// to be different), change the Status value below to something other than
	/// Generated to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	//------------------------------------------------------------------------------
	using System;
	using System.Web;
	using Microsoft.Web.Infrastructure.DynamicModuleHelper;
	using Ninject;
	using Ninject.Web.Common;

	public static class NinjectWebCommon%%>
	<%%=Solution.OPEN_BRACE%%>
		<%%=Solution.NEWLINE%%>
		<%%-private static readonly Bootstrapper bootstrapper = new Bootstrapper();
		
		/// <summary>
		/// Starts the application
		/// </summary>
		public static void Start()%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-DynamicModuleUtility.RegisterModule(typeof(OnePerRequestHttpModule));
			DynamicModuleUtility.RegisterModule(typeof(NinjectHttpModule));
			bootstrapper.Initialize(CreateKernel);%%>
		<%%=Solution.CLOSE_BRACE%%>
		<%%=Solution.NEWLINE%%>
		<%%=Solution.NEWLINE%%>
		<%%-/// <summary>
		/// Stops the application.
		/// </summary>
		public static void Stop()%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-bootstrapper.ShutDown();%%>
		<%%=Solution.CLOSE_BRACE%%>
		<%%=Solution.NEWLINE%%>
		<%%=Solution.NEWLINE%%>
		<%%-/// <summary>
		/// Creates the kernel that will manage your application.
		/// </summary>
		/// <returns>The created kernel.</returns>
		private static IKernel CreateKernel()%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-var kernel = new StandardKernel();
			try%%>
			<%%=Solution.OPEN_BRACE%%>
				<%%=Solution.NEWLINE%%>
				<%%-kernel.Bind<Func<IKernel>>().ToMethod(ctx => () => new Bootstrapper().Kernel);
				kernel.Bind<IHttpModule>().To<HttpApplicationInitializationHttpModule>();
				
				RegisterServices(kernel);
				return kernel;%%>
			<%%=Solution.CLOSE_BRACE%%><%%-
			catch%%>
			<%%=Solution.OPEN_BRACE%%>
				<%%=Solution.NEWLINE%%>
				<%%-kernel.Dispose();
				throw;%%>
			<%%=Solution.CLOSE_BRACE%%>
		<%%=Solution.CLOSE_BRACE%%>
		<%%=Solution.NEWLINE%%>
		<%%=Solution.NEWLINE%%>
		<%%-/// <summary>
		/// Load your modules or register your services here!
		/// </summary>
		/// <param name="kernel">The kernel.</param>
		private static void RegisterServices(IKernel kernel)%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-kernel.Load(new DomainModule());
			kernel.Load(new AutoMapperModule());%%>
		<%%=Solution.CLOSE_BRACE%%>
	<%%=Solution.CLOSE_BRACE%%>
<%%=Solution.CLOSE_BRACE%%>
%%></CONTENT><OUTPUT>
<%%:
if (Solution.ShouldUpdateFile(path=DSNinjectWebCommonFilePath, text=Text) == true)
{
	update(DSNinjectWebCommonFilePath)
}
%%></OUTPUT>