<CONFIG>
	NAME DSAutoMapperModuleCode
	CATEGORY DS
	NODE Project
	TOPLEVEL False
</CONFIG>
<CONTENT>
<%%=USETABS true%%>
<%%:
<%%-/*<copyright>
%%>
<%%=Solution.Copyright%%><%%-
</copyright>*/
using AutoMapper;
using Ninject;
using Ninject.Modules;

namespace %%><%%=Project.Namespace%%>
<%%=Solution.OPEN_BRACE%%><%%-
	//------------------------------------------------------------------------------
	/// <summary>This class sets up AutoMapper with Ninject.</summary>
	///
	/// This file is code generated and should not be modified by hand.
	/// If you need to customize outside of protected areas, add those changes
	/// in another partial class file.  As a last resort (if generated code needs
	/// to be different), change the Status value below to something other than
	/// Generated to prevent changes from being overwritten.
	///
	/// <CreatedByUserName>%%><%%=USER%%><%%-</CreatedByUserName>
	/// <CreatedDate>%%><%%=NOW%%><%%-</CreatedDate>
	/// <Status>Generated</Status>
	//------------------------------------------------------------------------------
	public class AutoMapperModule : NinjectModule%%>
	<%%=Solution.OPEN_BRACE%%>
		<%%=Solution.NEWLINE%%>
		<%%-public override void Load()%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-//Bind<IValueResolver<SourceEntity, DestModel, bool>>().To<MyResolver>();
		
				var mapperConfiguration = CreateConfiguration();
				Bind<MapperConfiguration>().ToConstant(mapperConfiguration).InSingletonScope();
		
				// This teaches Ninject how to create automapper instances say if for instance
				// MyResolver has a constructor with a parameter that needs to be injected
				Bind<IMapper>().ToMethod(ctx =>
					 new Mapper(mapperConfiguration, type => ctx.Kernel.Get(type)));%%>
		<%%=Solution.CLOSE_BRACE%%>
		<%%=Solution.NEWLINE%%>
		<%%-
		private MapperConfiguration CreateConfiguration()%%>
		<%%=Solution.OPEN_BRACE%%>
			<%%=Solution.NEWLINE%%>
			<%%-var config = new MapperConfiguration(cfg =>%%>
			<%%=Solution.OPEN_BRACE%%>
				<%%=Solution.NEWLINE%%>
				<%%-// Add all profiles in current assembly
					cfg.AddProfiles(GetType().Assembly);%%>
			<%%=Solution.CLOSE_BRACE%%><%%-);
		
				return config;%%>
		<%%=Solution.CLOSE_BRACE%%>
	<%%=Solution.CLOSE_BRACE%%>
<%%=Solution.CLOSE_BRACE%%>
%%></CONTENT><OUTPUT>
<%%:
if (Solution.ShouldUpdateFile(path=DSAutoMapperModuleFilePath, text=Text) == true)
{
	update(DSAutoMapperModuleFilePath)
}
%%></OUTPUT>