<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Button_Add" xml:space="preserve">
    <value>_Add</value>
    <comment>For the add button.</comment>
  </data>
  <data name="Button_Cancel" xml:space="preserve">
    <value>_Cancel</value>
    <comment>For the cancel button.</comment>
  </data>
  <data name="Button_Close" xml:space="preserve">
    <value>_Close</value>
    <comment>For the close button.</comment>
  </data>
  <data name="Button_Defaults" xml:space="preserve">
    <value>_Initialize</value>
    <comment>For the defaults button.</comment>
  </data>
  <data name="Button_OK" xml:space="preserve">
    <value>_OK</value>
    <comment>For the ok button.</comment>
  </data>
  <data name="Button_ParseContent" xml:space="preserve">
    <value>_Parse Content</value>
    <comment>For the parse content button.</comment>
  </data>
  <data name="Button_ParseOutput" xml:space="preserve">
    <value>_Parse Output</value>
    <comment>For the parse output button.</comment>
  </data>
  <data name="Button_Reset" xml:space="preserve">
    <value>_Reset</value>
    <comment>For the reset button.</comment>
  </data>
  <data name="Button_Select" xml:space="preserve">
    <value>_Select</value>
    <comment>For the select button.</comment>
  </data>
  <data name="Button_SelectNext" xml:space="preserve">
    <value>S_elect</value>
    <comment>For the select button.</comment>
  </data>
  <data name="Button_Update" xml:space="preserve">
    <value>_Update</value>
    <comment>For the update button.</comment>
  </data>
  <data name="ContextMenu_ClearText" xml:space="preserve">
    <value>Clear Text</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_Close" xml:space="preserve">
    <value>Close</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_CloseOtherTabs" xml:space="preserve">
    <value>Close All But This</value>
    <comment>For closing other tabs</comment>
  </data>
  <data name="ContextMenu_CloseOtherTabsToolTip" xml:space="preserve">
    <value>Close all other tabs but this one (will prompt to save changes).</value>
    <comment>For closing other tabs</comment>
  </data>
  <data name="ContextMenu_CloseTab" xml:space="preserve">
    <value>Close</value>
    <comment>For closing tab</comment>
  </data>
  <data name="ContextMenu_CloseTabToolTip" xml:space="preserve">
    <value>Close this tab (will prompt to save changes).</value>
    <comment>For closing tab</comment>
  </data>
  <data name="ContextMenu_CloseToolTip" xml:space="preserve">
    <value>For closing this solution (will be prompted to save changes).</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_CompileSpecificationSourceData" xml:space="preserve">
    <value>Compile Specification Source Data</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_CompileSpecificationSourceDataToolTip" xml:space="preserve">
    <value>For updating the M+ solution model based on its (updated) specfication source data.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_Delete" xml:space="preserve">
    <value>Delete</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_DeleteToolTip" xml:space="preserve">
    <value>For deleting the selected item (will be prompted for a confirmation).</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_Edit" xml:space="preserve">
    <value>Edit</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_EditToolTip" xml:space="preserve">
    <value>For editing the selected item.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_ManageTags" xml:space="preserve">
    <value>Manage Tags</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_ManageTagsToolTip" xml:space="preserve">
    <value>For managing the tagging of items in the entire model.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewAuditProperty" xml:space="preserve">
    <value>New Audit Property</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewAuditPropertyToolTip" xml:space="preserve">
    <value>For creating audit properties that are standard for every entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewCodeTemplate" xml:space="preserve">
    <value>New Code Template</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewCodeTemplateToolTip" xml:space="preserve">
    <value>For creating a code template to specify how to generate code for a part of the model such as a project, entity, or method.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewCollection" xml:space="preserve">
    <value>New Collection</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewCollectionToolTip" xml:space="preserve">
    <value>For creating a collection of entities that is associated with this entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewDatabaseSource" xml:space="preserve">
    <value>New Database Source</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewDatabaseSourceToolTip" xml:space="preserve">
    <value>For creating a database specification source that is used to provide entity relationship data for this model.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewDiagram" xml:space="preserve">
    <value>New Diagram</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewDiagramEntity" xml:space="preserve">
    <value>New Diagram Entity</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewDiagramEntityToolTip" xml:space="preserve">
    <value>For creating a diagram based view for some entities in the solution, including editing capabilities.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewDiagramToolTip" xml:space="preserve">
    <value>For creating a diagram based view for some entities in the solution, including editing capabilities.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewEntity" xml:space="preserve">
    <value>New Entity</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewEntityReference" xml:space="preserve">
    <value>New Entity Reference</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewEntityReferenceToolTip" xml:space="preserve">
    <value>For creating a direct reference to another entity from this entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewEntityToolTip" xml:space="preserve">
    <value>For creating a platform/tier independent entity that is used to generate associated classes at each tier.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewEnumeration" xml:space="preserve">
    <value>New Enumeration</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewEnumerationToolTip" xml:space="preserve">
    <value>For creating enumerations within a model.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewFeature" xml:space="preserve">
    <value>New Feature</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewFeatureToolTip" xml:space="preserve">
    <value>For creating a feature that is used to organize functionality (and entities) for each project.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewIndex" xml:space="preserve">
    <value>New Index</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewIndexProperty" xml:space="preserve">
    <value>New Index Property</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewIndexPropertyToolTip" xml:space="preserve">
    <value>For creating an index property for the corresponding entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewIndexToolTip" xml:space="preserve">
    <value>For creating an index for the corresponding entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewMethod" xml:space="preserve">
    <value>New Method</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewMethodRelationship" xml:space="preserve">
    <value>New Method Relationship</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewMethodRelationshipToolTip" xml:space="preserve">
    <value>For creating relationships within a method.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewMethodToolTip" xml:space="preserve">
    <value>For creating a platform/tier independent method that is used to provide functions for entities.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewModel" xml:space="preserve">
    <value>New Model</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewModelObject" xml:space="preserve">
    <value>New Model Object</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewModelObjectToolTip" xml:space="preserve">
    <value>For creating model objects within a model.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewModelProperty" xml:space="preserve">
    <value>New Model Property</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewModelPropertyToolTip" xml:space="preserve">
    <value>For creating model properties within a model object.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewModelToolTip" xml:space="preserve">
    <value>For creating models within a solution.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewParameter" xml:space="preserve">
    <value>New Parameter</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewParameterToolTip" xml:space="preserve">
    <value>For creating a parameter for the corresponding method.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewProject" xml:space="preserve">
    <value>New Project</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewProjectToolTip" xml:space="preserve">
    <value>For creating a new project that is used to generate code for an output project.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewProperty" xml:space="preserve">
    <value>New Property</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewPropertyBase" xml:space="preserve">
    <value>Property</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewPropertyBaseToolTip" xml:space="preserve">
    <value>For creating base properties within a solution.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewPropertyReference" xml:space="preserve">
    <value>New Property Reference</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewPropertyReferenceToolTip" xml:space="preserve">
    <value>For creating a direct reference to another entity property from this entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewPropertyRelationship" xml:space="preserve">
    <value>New Property Relationship</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewPropertyRelationshipToolTip" xml:space="preserve">
    <value>For creating relationships within a property.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewPropertyToolTip" xml:space="preserve">
    <value>For creating a property for the corresponding entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewRelationship" xml:space="preserve">
    <value>New Relationship</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewRelationshipProperty" xml:space="preserve">
    <value>New Relationship Property</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewRelationshipPropertyToolTip" xml:space="preserve">
    <value>For creating a relationship property for the corresponding entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewRelationshipToolTip" xml:space="preserve">
    <value>For creating a relationship for the corresponding entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewSolution" xml:space="preserve">
    <value>New Solution</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewSolutionToolTip" xml:space="preserve">
    <value>For creating a new xml file that corresponds to an M+ model.  This M+ solution model is used to generate code for an output solution.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewSpecificationSource" xml:space="preserve">
    <value>New Specification Source</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewSpecificationSourceToolTip" xml:space="preserve">
    <value>For creating specification sources within a solution.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewSpecTemplate" xml:space="preserve">
    <value>New Spec Template</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewSpecTemplateToolTip" xml:space="preserve">
    <value>For creating a spec template to specify how to generate code for a part of the model such as a project, entity, or method.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStage" xml:space="preserve">
    <value>New Stage</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStageToolTip" xml:space="preserve">
    <value>For creating stages within a workflow.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStageTransition" xml:space="preserve">
    <value>New Stage Transition</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStageTransitionToolTip" xml:space="preserve">
    <value>For creating stage transitions within a workflow.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewState" xml:space="preserve">
    <value>New State</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStateModel" xml:space="preserve">
    <value>New State Model</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStateModelToolTip" xml:space="preserve">
    <value>For creating state models within an entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStateToolTip" xml:space="preserve">
    <value>For creating states within an entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStateTransition" xml:space="preserve">
    <value>New State Transition</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStateTransitionToolTip" xml:space="preserve">
    <value>For creating state transitions within an entity.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStep" xml:space="preserve">
    <value>New Step</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStepToolTip" xml:space="preserve">
    <value>For creating steps within a stage.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStepTransition" xml:space="preserve">
    <value>New Step Transition</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewStepTransitionToolTip" xml:space="preserve">
    <value>For creating step transitions within a stage.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewTag" xml:space="preserve">
    <value>New Tag</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewTagToolTip" xml:space="preserve">
    <value>For creating a tag to apply a piece of information to a model item.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewValue" xml:space="preserve">
    <value>New Value</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewValueToolTip" xml:space="preserve">
    <value>For creating values within an enumeration.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewWorkflow" xml:space="preserve">
    <value>New Workflow</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewWorkflowToolTip" xml:space="preserve">
    <value>For creating high level workflows corresponding to business process, etc.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewXmlSource" xml:space="preserve">
    <value>New XML Source</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewXmlSourceToolTip" xml:space="preserve">
    <value>For creating an xml specification source that is used to provide entity relationship data for this model.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NextTab" xml:space="preserve">
    <value>Next</value>
    <comment>For next tab</comment>
  </data>
  <data name="ContextMenu_NextTabToolTip" xml:space="preserve">
    <value>Go to the next tab.</value>
    <comment>For next tab</comment>
  </data>
  <data name="ContextMenu_OpenOutputSolution" xml:space="preserve">
    <value>Open Output Solution</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_OpenOutputSolutionToolTip" xml:space="preserve">
    <value>For opening the output solution associated with this M+ solution.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_OpenSolution" xml:space="preserve">
    <value>Open Solution</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_OpenSolutionToolTip" xml:space="preserve">
    <value>For opening an M+ solution file.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_RecentSolutions" xml:space="preserve">
    <value>Recent Solutions</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_RecentSolutionsToolTip" xml:space="preserve">
    <value>For opening recently opened M+ solution files.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_RemoveFromDiagram" xml:space="preserve">
    <value>Remove from Diagram</value>
    <comment>For removing item from a diagram.</comment>
  </data>
  <data name="ContextMenu_Save" xml:space="preserve">
    <value>Save</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_SaveAll" xml:space="preserve">
    <value>Save All</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_SaveAllToolTip" xml:space="preserve">
    <value>For saving all open M+solutions.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_SaveAs" xml:space="preserve">
    <value>Save As</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_SaveAsToolTip" xml:space="preserve">
    <value>For saving the M+solution as another specified xml file.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_SaveToolTip" xml:space="preserve">
    <value>For saving the M+ solution as an xml file.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_UpdateOutputSolution" xml:space="preserve">
    <value>Update Output Solution</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_UpdateOutputSolutionToolTip" xml:space="preserve">
    <value>For updating the source code for the corresponding output solution based on this M+ solution model.</value>
    <comment>For context menus</comment>
  </data>
  <data name="Edit_AuditPropertyHeader" xml:space="preserve">
    <value>Audit Property</value>
    <comment>For the audit property header.</comment>
  </data>
  <data name="Edit_AuditPropertyNameProperty" xml:space="preserve">
    <value>Property Name</value>
    <comment>For the audit property name.</comment>
  </data>
  <data name="Edit_BaseEntityIDProperty" xml:space="preserve">
    <value>Base Entity ID</value>
    <comment>For the base entity.</comment>
  </data>
  <data name="Edit_BaseEntityIDSelection" xml:space="preserve">
    <value>Base Entity</value>
    <comment>For the base entity.</comment>
  </data>
  <data name="Edit_CategoryNameProperty" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Edit_ClosedImagePathProperty" xml:space="preserve">
    <value>Closed Image</value>
    <comment>For the closed image url property.</comment>
  </data>
  <data name="Edit_CodeTemplateHeader" xml:space="preserve">
    <value>Code Template</value>
    <comment>For the template header.</comment>
  </data>
  <data name="Edit_CollectionEntityIDProperty" xml:space="preserve">
    <value>Entity</value>
    <comment>For the collection entity.</comment>
  </data>
  <data name="Edit_CollectionHeader" xml:space="preserve">
    <value>Collection</value>
    <comment>For the collection header.</comment>
  </data>
  <data name="Edit_CollectionNameProperty" xml:space="preserve">
    <value>Collection Name</value>
    <comment>For the collection name property.</comment>
  </data>
  <data name="Edit_CollectionProperty" xml:space="preserve">
    <value>Collection Name</value>
    <comment>For the collection property name.</comment>
  </data>
  <data name="Edit_CompanyNameProperty" xml:space="preserve">
    <value>Company Name</value>
    <comment>For the company nameproperty.</comment>
  </data>
  <data name="Edit_Configuration" xml:space="preserve">
    <value>Configuration</value>
    <comment>For displaying configuration information</comment>
  </data>
  <data name="Edit_CopyrightProperty" xml:space="preserve">
    <value>Copyright</value>
    <comment>For the copyright property.</comment>
  </data>
  <data name="Edit_CountProperty" xml:space="preserve">
    <value>Count</value>
    <comment>For the count property.</comment>
  </data>
  <data name="Edit_DatabaseSourceHeader" xml:space="preserve">
    <value>Database Source</value>
    <comment>For the database source header.</comment>
  </data>
  <data name="Edit_DataTypeCodeProperty" xml:space="preserve">
    <value>Data Type Code</value>
    <comment>For the data type.</comment>
  </data>
  <data name="Edit_DataTypeCodeSelection" xml:space="preserve">
    <value>Data Type</value>
    <comment>For the data type.</comment>
  </data>
  <data name="Edit_DbNameProperty" xml:space="preserve">
    <value>Database</value>
    <comment>For the database.</comment>
  </data>
  <data name="Edit_DbServerNameProperty" xml:space="preserve">
    <value>Database Server</value>
    <comment>For the database server.</comment>
  </data>
  <data name="Edit_DefinedByEnumerationHeader" xml:space="preserve">
    <value>Defined By Enumeration</value>
    <comment>For the defined by enumeration property.</comment>
  </data>
  <data name="Edit_DefinedByEnumerationIDProperty" xml:space="preserve">
    <value>Defined By Enumeration ID</value>
    <comment>For the defined by enumeration property.</comment>
  </data>
  <data name="Edit_DefinedByEnumerationIDSelection" xml:space="preserve">
    <value>Defined By Enumeration</value>
    <comment>For the defined by enumeration property.</comment>
  </data>
  <data name="Edit_DefinedByModelObjectHeader" xml:space="preserve">
    <value>Defined By Model Object</value>
    <comment>For the defined by model object property.</comment>
  </data>
  <data name="Edit_DefinedByModelObjectIDProperty" xml:space="preserve">
    <value>Defined By Model Object ID</value>
    <comment>For the defined by model object property.</comment>
  </data>
  <data name="Edit_DefinedByModelObjectIDSelection" xml:space="preserve">
    <value>Defined By Model Object</value>
    <comment>For the defined by model object property.</comment>
  </data>
  <data name="Edit_DescriptionProperty" xml:space="preserve">
    <value>Description</value>
    <comment>For the description property.</comment>
  </data>
  <data name="Edit_DiagramEntityHeader" xml:space="preserve">
    <value>Diagram Entity</value>
    <comment>For diagram entity headers</comment>
  </data>
  <data name="Edit_DiagramEntityIDProperty" xml:space="preserve">
    <value>Diagram Entity ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_DiagramEntityNameProperty" xml:space="preserve">
    <value>Diagram Entity Name</value>
    <comment>For diagram entity names</comment>
  </data>
  <data name="Edit_DiagramHeader" xml:space="preserve">
    <value>Diagram</value>
    <comment>For solution diagram headers</comment>
  </data>
  <data name="Edit_DiagramIDProperty" xml:space="preserve">
    <value>Diagram ID</value>
    <comment>For the diagram id property.</comment>
  </data>
  <data name="Edit_DiagramNameProperty" xml:space="preserve">
    <value>Diagram Name</value>
    <comment>For solution diagram names</comment>
  </data>
  <data name="Edit_EntityHeader" xml:space="preserve">
    <value>Entity</value>
    <comment>For the entity header.</comment>
  </data>
  <data name="Edit_EntityIDProperty" xml:space="preserve">
    <value>Entity ID</value>
    <comment>For the entity id property.</comment>
  </data>
  <data name="Edit_EntityIDSelection" xml:space="preserve">
    <value>Entity</value>
    <comment>For the entity id property.</comment>
  </data>
  <data name="Edit_EntityNameProperty" xml:space="preserve">
    <value>Entity Name</value>
    <comment>For the entity name property.</comment>
  </data>
  <data name="Edit_EntityReferenceHeader" xml:space="preserve">
    <value>Entity Reference</value>
    <comment>For the entity reference header.</comment>
  </data>
  <data name="Edit_EntityReferenceNameProperty" xml:space="preserve">
    <value>Entity Reference Name</value>
    <comment>For the reference entity property name.</comment>
  </data>
  <data name="Edit_EntityTypeCodeProperty" xml:space="preserve">
    <value>Entity Type Code</value>
    <comment>For the entity type.</comment>
  </data>
  <data name="Edit_EntityTypeCodeSelection" xml:space="preserve">
    <value>Entity Type</value>
    <comment>For the entity type.</comment>
  </data>
  <data name="Edit_EnumerationHeader" xml:space="preserve">
    <value>Enumeration</value>
    <comment>For the enumeration header.</comment>
  </data>
  <data name="Edit_EnumerationIDProperty" xml:space="preserve">
    <value>Enumeration ID</value>
    <comment>For the enumeration id property.</comment>
  </data>
  <data name="Edit_EnumerationNameProperty" xml:space="preserve">
    <value>Enumeration Name</value>
    <comment>For the enumeration name property.</comment>
  </data>
  <data name="Edit_EnumValueHeader" xml:space="preserve">
    <value>Enum Value</value>
    <comment>For the enum value header.</comment>
  </data>
  <data name="Edit_EnumValueProperty" xml:space="preserve">
    <value>Enum Value</value>
    <comment>For the enum value.</comment>
  </data>
  <data name="Edit_FeatureHeader" xml:space="preserve">
    <value>Feature</value>
    <comment>For the feature header.</comment>
  </data>
  <data name="Edit_FeatureIDProperty" xml:space="preserve">
    <value>Feature ID</value>
    <comment>For the feature property.</comment>
  </data>
  <data name="Edit_FeatureIDSelection" xml:space="preserve">
    <value>Feature</value>
    <comment>For the feature.</comment>
  </data>
  <data name="Edit_FeatureNameProperty" xml:space="preserve">
    <value>Feature Name</value>
    <comment>For the feature name.</comment>
  </data>
  <data name="Edit_FilePathProperty" xml:space="preserve">
    <value>File Path</value>
    <comment>For the File Path property.</comment>
  </data>
  <data name="Edit_FromStageHeader" xml:space="preserve">
    <value>From Stage</value>
    <comment>For the from stage property.</comment>
  </data>
  <data name="Edit_FromStageIDProperty" xml:space="preserve">
    <value>From Stage ID</value>
    <comment>For the source (from) stage.</comment>
  </data>
  <data name="Edit_FromStageIDSelection" xml:space="preserve">
    <value>From Stage</value>
    <comment>For the source (from) stage.</comment>
  </data>
  <data name="Edit_FromStateHeader" xml:space="preserve">
    <value>From State</value>
    <comment>For the from state property.</comment>
  </data>
  <data name="Edit_FromStateIDProperty" xml:space="preserve">
    <value>From State ID</value>
    <comment>For the source (from) state.</comment>
  </data>
  <data name="Edit_FromStateIDSelection" xml:space="preserve">
    <value>From State</value>
    <comment>For the source (from) state.</comment>
  </data>
  <data name="Edit_FromStepHeader" xml:space="preserve">
    <value>From Step</value>
    <comment>For the from step property.</comment>
  </data>
  <data name="Edit_FromStepIDProperty" xml:space="preserve">
    <value>From Step ID</value>
    <comment>For the source (from) step.</comment>
  </data>
  <data name="Edit_FromStepIDSelection" xml:space="preserve">
    <value>From Step</value>
    <comment>For the source (from) step.</comment>
  </data>
  <data name="Edit_HasErrorsProperty" xml:space="preserve">
    <value>Has Errors</value>
    <comment>For the Has Errors property.</comment>
  </data>
  <data name="Edit_IdentifierTypeCodeProperty" xml:space="preserve">
    <value>Identifier Type Code</value>
    <comment>For the identifier type.</comment>
  </data>
  <data name="Edit_IdentifierTypeCodeSelection" xml:space="preserve">
    <value>Identifier Type</value>
    <comment>For the identifier type.</comment>
  </data>
  <data name="Edit_IndexHeader" xml:space="preserve">
    <value>Index</value>
    <comment>For the entity index header.</comment>
  </data>
  <data name="Edit_IndexIDProperty" xml:space="preserve">
    <value>Index ID</value>
    <comment>For the index id property.</comment>
  </data>
  <data name="Edit_IndexNameHeader" xml:space="preserve">
    <value>Index Name</value>
    <comment>For the index header.</comment>
  </data>
  <data name="Edit_IndexNameProperty" xml:space="preserve">
    <value>Index Name</value>
    <comment>For the entity index name.</comment>
  </data>
  <data name="Edit_IndexPropertyHeader" xml:space="preserve">
    <value>Index Property</value>
    <comment>For the entity index property header.</comment>
  </data>
  <data name="Edit_IndexPropertyIDProperty" xml:space="preserve">
    <value>Index Property ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_IndexPropertyListProperty" xml:space="preserve">
    <value>Properties</value>
    <comment>For the properties property.</comment>
  </data>
  <data name="Edit_IndexPropertyNameHeader" xml:space="preserve">
    <value>Property Name</value>
    <comment>For the property header.</comment>
  </data>
  <data name="Edit_InitialValueProperty" xml:space="preserve">
    <value>Initial Value</value>
    <comment>For the initial value property.</comment>
  </data>
  <data name="Edit_IsAddAuditPropertyProperty" xml:space="preserve">
    <value>Audits On Add</value>
    <comment>For the is add audit property checkbox.</comment>
  </data>
  <data name="Edit_IsAutoUpdatedProperty" xml:space="preserve">
    <value>Is Auto Updated</value>
    <comment>For the auto updated checkbox.</comment>
  </data>
  <data name="Edit_IsForeignKeyMemberProperty" xml:space="preserve">
    <value>Foreign Key</value>
    <comment>For the foreign key checkbox.</comment>
  </data>
  <data name="Edit_IsNullableProperty" xml:space="preserve">
    <value>Nullable</value>
    <comment>For the nullable checkbox.</comment>
  </data>
  <data name="Edit_IsPrimaryKeyIndexProperty" xml:space="preserve">
    <value>Primary Key</value>
    <comment>For the primary key checkbox.</comment>
  </data>
  <data name="Edit_IsPrimaryKeyMemberProperty" xml:space="preserve">
    <value>Primary Key</value>
    <comment>For the primary key checkbox.</comment>
  </data>
  <data name="Edit_IsTemplateUtilizedProperty" xml:space="preserve">
    <value>Template Utilized</value>
    <comment>For the Template Utilized property.</comment>
  </data>
  <data name="Edit_IsTopLevelTemplateProperty" xml:space="preserve">
    <value>Top Level Template</value>
    <comment>For indicating if template is top level.</comment>
  </data>
  <data name="Edit_IsUniqueIndexProperty" xml:space="preserve">
    <value>Unique</value>
    <comment>For the unique index checkbox.</comment>
  </data>
  <data name="Edit_IsUpdateAuditPropertyProperty" xml:space="preserve">
    <value>Audits On Update</value>
    <comment>For the is update audit property checkbox.</comment>
  </data>
  <data name="Edit_IsValueGeneratedProperty" xml:space="preserve">
    <value>Value Is Generated</value>
    <comment>For the is value generated checkbox.</comment>
  </data>
  <data name="Edit_ItemsMaxProperty" xml:space="preserve">
    <value>Items Max</value>
    <comment>For the ItemsMax property.</comment>
  </data>
  <data name="Edit_ItemsMinProperty" xml:space="preserve">
    <value>Items Min</value>
    <comment>For the ItemsMin property.</comment>
  </data>
  <data name="Edit_LabelColon" xml:space="preserve">
    <value>:</value>
    <comment>For showing colons on the label.</comment>
  </data>
  <data name="Edit_LengthProperty" xml:space="preserve">
    <value>Length</value>
    <comment>For the length property.</comment>
  </data>
  <data name="Edit_MethodHeader" xml:space="preserve">
    <value>Method</value>
    <comment>For the method header.</comment>
  </data>
  <data name="Edit_MethodIDProperty" xml:space="preserve">
    <value>Method ID</value>
    <comment>For the method id property.</comment>
  </data>
  <data name="Edit_MethodNameProperty" xml:space="preserve">
    <value>Method Name</value>
    <comment>For the method name.</comment>
  </data>
  <data name="Edit_MethodRelationshipHeader" xml:space="preserve">
    <value>Method Relationship</value>
    <comment>For the method relationship header.</comment>
  </data>
  <data name="Edit_MethodTypeCodeProperty" xml:space="preserve">
    <value>Method Type Code</value>
    <comment>For the method type.</comment>
  </data>
  <data name="Edit_MethodTypeCodeSelection" xml:space="preserve">
    <value>Method Type</value>
    <comment>For the method type.</comment>
  </data>
  <data name="Edit_ModelHeader" xml:space="preserve">
    <value>Model</value>
    <comment>For the model header.</comment>
  </data>
  <data name="Edit_ModelIDProperty" xml:space="preserve">
    <value>Model ID</value>
    <comment>For the model id property.</comment>
  </data>
  <data name="Edit_ModelNameProperty" xml:space="preserve">
    <value>Model Name</value>
    <comment>For the model name property.</comment>
  </data>
  <data name="Edit_ModelObjectHeader" xml:space="preserve">
    <value>Model Object</value>
    <comment>For the model object header.</comment>
  </data>
  <data name="Edit_ModelObjectIDProperty" xml:space="preserve">
    <value>Model Object ID</value>
    <comment>For the model object id property.</comment>
  </data>
  <data name="Edit_ModelObjectNameProperty" xml:space="preserve">
    <value>Model Object Name</value>
    <comment>For the model object name property.</comment>
  </data>
  <data name="Edit_ModelPropertiesHeader" xml:space="preserve">
    <value>Model Properties</value>
    <comment>For the properties header.</comment>
  </data>
  <data name="Edit_ModelPropertyHeader" xml:space="preserve">
    <value>Model Property</value>
    <comment>For the model property header.</comment>
  </data>
  <data name="Edit_ModelPropertyIDProperty" xml:space="preserve">
    <value>Model Property ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_ModelPropertyListProperty" xml:space="preserve">
    <value>Properties</value>
    <comment>For the properties property.</comment>
  </data>
  <data name="Edit_ModelPropertyNameHeader" xml:space="preserve">
    <value>Model Property Name</value>
    <comment>For the model property name property.</comment>
  </data>
  <data name="Edit_ModelPropertyNameProperty" xml:space="preserve">
    <value>Model Property Name</value>
    <comment>For the model property name property.</comment>
  </data>
  <data name="Edit_NamespaceProperty" xml:space="preserve">
    <value>Namespace</value>
    <comment>For the namespace property.</comment>
  </data>
  <data name="Edit_NodeNameProperty" xml:space="preserve">
    <value>Element</value>
    <comment>For the node name.</comment>
  </data>
  <data name="Edit_OpenImagePathProperty" xml:space="preserve">
    <value>Open Image</value>
    <comment>For the open image url property.</comment>
  </data>
  <data name="Edit_OrderHeader" xml:space="preserve">
    <value>Order</value>
    <comment>For the order header.</comment>
  </data>
  <data name="Edit_OrderProperty" xml:space="preserve">
    <value>Order</value>
    <comment>For the order.</comment>
  </data>
  <data name="Edit_ParameterHeader" xml:space="preserve">
    <value>Parameter</value>
    <comment>For the parameter header.</comment>
  </data>
  <data name="Edit_ParameterIDProperty" xml:space="preserve">
    <value>Parameter ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_ParameterListProperty" xml:space="preserve">
    <value>Parameters</value>
    <comment>For the parameters property.</comment>
  </data>
  <data name="Edit_ParameterNameProperty" xml:space="preserve">
    <value>Parameter Name</value>
    <comment>For the parameter name.</comment>
  </data>
  <data name="Edit_ParametersHeader" xml:space="preserve">
    <value>Parameters</value>
    <comment>For the parameters header.</comment>
  </data>
  <data name="Edit_PlatformCodeProperty" xml:space="preserve">
    <value>Platform</value>
    <comment>For the platform.</comment>
  </data>
  <data name="Edit_PositionXProperty" xml:space="preserve">
    <value>Position X</value>
    <comment>For the position x property.</comment>
  </data>
  <data name="Edit_PositionYProperty" xml:space="preserve">
    <value>Position Y</value>
    <comment>For the position y property.</comment>
  </data>
  <data name="Edit_PrecisionProperty" xml:space="preserve">
    <value>Precision</value>
    <comment>For the precision property.</comment>
  </data>
  <data name="Edit_ProductNameProperty" xml:space="preserve">
    <value>Product Name</value>
    <comment>For the product name property.</comment>
  </data>
  <data name="Edit_ProductVersionProperty" xml:space="preserve">
    <value>Product Version</value>
    <comment>For the product version property.</comment>
  </data>
  <data name="Edit_ProjectHeader" xml:space="preserve">
    <value>Project</value>
    <comment>For the project header.</comment>
  </data>
  <data name="Edit_ProjectIDProperty" xml:space="preserve">
    <value>Project ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_ProjectNameProperty" xml:space="preserve">
    <value>Project Name</value>
    <comment>For the project name.</comment>
  </data>
  <data name="Edit_ProjectReferenceListProperty" xml:space="preserve">
    <value>Project References</value>
    <comment>For the project references.</comment>
  </data>
  <data name="Edit_PropertiesHeader" xml:space="preserve">
    <value>Properties</value>
    <comment>For the properties header.</comment>
  </data>
  <data name="Edit_PropertyBaseHeader" xml:space="preserve">
    <value>Property</value>
    <comment>For the property base header.</comment>
  </data>
  <data name="Edit_PropertyHeader" xml:space="preserve">
    <value>Property</value>
    <comment>For the entity data property header.</comment>
  </data>
  <data name="Edit_PropertyIDProperty" xml:space="preserve">
    <value>Property ID</value>
    <comment>For the property.</comment>
  </data>
  <data name="Edit_PropertyIDSelection" xml:space="preserve">
    <value>Property</value>
    <comment>For the property.</comment>
  </data>
  <data name="Edit_PropertyNameProperty" xml:space="preserve">
    <value>Property Name</value>
    <comment>For the entity data property name.</comment>
  </data>
  <data name="Edit_PropertyReferenceHeader" xml:space="preserve">
    <value>Property Reference</value>
    <comment>For the derived entity data property header.</comment>
  </data>
  <data name="Edit_PropertyReferenceNameProperty" xml:space="preserve">
    <value>Reference</value>
    <comment>For the derived entity data property name.</comment>
  </data>
  <data name="Edit_PropertyRelationshipHeader" xml:space="preserve">
    <value>Property Relationship</value>
    <comment>For the property relationship header.</comment>
  </data>
  <data name="Edit_ReferencedEntityIDProperty" xml:space="preserve">
    <value>Referenced Entity ID</value>
    <comment>For the referenced entity id property.</comment>
  </data>
  <data name="Edit_ReferencedEntityIDSelection" xml:space="preserve">
    <value>Referenced Entity</value>
    <comment>For the referenced entity id property.</comment>
  </data>
  <data name="Edit_ReferencedEntityProperty" xml:space="preserve">
    <value>Referenced Entity</value>
    <comment>For the referenced entity.</comment>
  </data>
  <data name="Edit_ReferencedItemsMaxProperty" xml:space="preserve">
    <value>Referenced Items Max</value>
    <comment>For the ReferencedItemsMax property.</comment>
  </data>
  <data name="Edit_ReferencedItemsMinProperty" xml:space="preserve">
    <value>Referenced Items Min</value>
    <comment>For the ReferencedItemsMin property.</comment>
  </data>
  <data name="Edit_ReferencedPropertyHeader" xml:space="preserve">
    <value>Referenced Property</value>
    <comment>For the referenced property.</comment>
  </data>
  <data name="Edit_ReferencedPropertyIDProperty" xml:space="preserve">
    <value>Referenced Property ID</value>
    <comment>For the referenced property id property.</comment>
  </data>
  <data name="Edit_ReferencedPropertyIDSelection" xml:space="preserve">
    <value>Referenced Property</value>
    <comment>For the referenced property id property.</comment>
  </data>
  <data name="Edit_RelationshipHeader" xml:space="preserve">
    <value>Relationship</value>
    <comment>For the entity relationship header.</comment>
  </data>
  <data name="Edit_RelationshipIDProperty" xml:space="preserve">
    <value>Relationship ID</value>
    <comment>For the relationship id property.</comment>
  </data>
  <data name="Edit_RelationshipNameProperty" xml:space="preserve">
    <value>Relationship Name</value>
    <comment>For the entity relationship name.</comment>
  </data>
  <data name="Edit_RelationshipPropertyHeader" xml:space="preserve">
    <value>Relationship Property</value>
    <comment>For the entity relationship property header.</comment>
  </data>
  <data name="Edit_RelationshipPropertyIDProperty" xml:space="preserve">
    <value>Relationship Property ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_RelationshipPropertyListProperty" xml:space="preserve">
    <value>Properties</value>
    <comment>For the properties property.</comment>
  </data>
  <data name="Edit_RelationshipPropertyNameHeader" xml:space="preserve">
    <value>Property Name</value>
    <comment>For the property header.</comment>
  </data>
  <data name="Edit_ScaleProperty" xml:space="preserve">
    <value>Scale</value>
    <comment>For the scale property.</comment>
  </data>
  <data name="Edit_ShowCollectionArcsProperty" xml:space="preserve">
    <value>Show Collection Arcs</value>
    <comment>For the Show Collection Arcs property.</comment>
  </data>
  <data name="Edit_ShowEntityReferenceArcsProperty" xml:space="preserve">
    <value>Show Entity Reference Arcs</value>
    <comment>For the Show Entity Reference Arcs property.</comment>
  </data>
  <data name="Edit_ShowPropertyArcsProperty" xml:space="preserve">
    <value>Show Property Arcs</value>
    <comment>For the Show Property Arcs property.</comment>
  </data>
  <data name="Edit_ShowPropertyReferenceArcsProperty" xml:space="preserve">
    <value>Show Property Reference Arcs</value>
    <comment>For the Show Property Reference Arcs property.</comment>
  </data>
  <data name="Edit_SolutionHeader" xml:space="preserve">
    <value>Solution</value>
    <comment>For the solution control header.</comment>
  </data>
  <data name="Edit_SolutionIDProperty" xml:space="preserve">
    <value>Solution ID</value>
    <comment>For the solution identifier.</comment>
  </data>
  <data name="Edit_SolutionNameProperty" xml:space="preserve">
    <value>Solution Name</value>
    <comment>For the solution name property.</comment>
  </data>
  <data name="Edit_SourceDbNameProperty" xml:space="preserve">
    <value>Database</value>
    <comment>For the database.</comment>
  </data>
  <data name="Edit_SourceDbServerNameProperty" xml:space="preserve">
    <value>Database Server</value>
    <comment>For the database server.</comment>
  </data>
  <data name="Edit_SourceFileNameProperty" xml:space="preserve">
    <value>XMLFile Name</value>
    <comment>For the XML file.</comment>
  </data>
  <data name="Edit_SourceFilePathProperty" xml:space="preserve">
    <value>XMLFile Path</value>
    <comment>For the XMLFile.</comment>
  </data>
  <data name="Edit_SourceNameProperty" xml:space="preserve">
    <value>Source Name</value>
    <comment>For source names.</comment>
  </data>
  <data name="Edit_SpecificationDirectoryProperty" xml:space="preserve">
    <value>Specification Directory</value>
    <comment>For the Specification Directory property.</comment>
  </data>
  <data name="Edit_SpecificationOrderProperty" xml:space="preserve">
    <value>Order</value>
    <comment>For the specification order.</comment>
  </data>
  <data name="Edit_SpecificationSourceHeader" xml:space="preserve">
    <value>Specification Source</value>
    <comment>For the specification source header.</comment>
  </data>
  <data name="Edit_SpecificationSourceIDProperty" xml:space="preserve">
    <value>Specification Source ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_SpecSourceNameProperty" xml:space="preserve">
    <value>Spec Source Name</value>
    <comment>For source names.</comment>
  </data>
  <data name="Edit_SpecTemplateHeader" xml:space="preserve">
    <value>Spec Template</value>
    <comment>For the template header.</comment>
  </data>
  <data name="Edit_StageHeader" xml:space="preserve">
    <value>Stage</value>
    <comment>For the workflow stage header.</comment>
  </data>
  <data name="Edit_StageIDProperty" xml:space="preserve">
    <value>Stage ID</value>
    <comment>For the stage id property.</comment>
  </data>
  <data name="Edit_StageNameProperty" xml:space="preserve">
    <value>Stage Name</value>
    <comment>For the workflow stage name property.</comment>
  </data>
  <data name="Edit_StageTransitionHeader" xml:space="preserve">
    <value>Stage Transition</value>
    <comment>For the stage transition header.</comment>
  </data>
  <data name="Edit_StageTransitionIDProperty" xml:space="preserve">
    <value>Stage Transition ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_StageTransitionNameHeader" xml:space="preserve">
    <value>Stage Transition Name</value>
    <comment>For the stage transition name property.</comment>
  </data>
  <data name="Edit_StageTransitionNameProperty" xml:space="preserve">
    <value>Stage Transition Name</value>
    <comment>For the stage transition name property.</comment>
  </data>
  <data name="Edit_StateHeader" xml:space="preserve">
    <value>State</value>
    <comment>For the entity state header.</comment>
  </data>
  <data name="Edit_StateIDProperty" xml:space="preserve">
    <value>State ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_StateModelHeader" xml:space="preserve">
    <value>State Model</value>
    <comment>For the entity state model header.</comment>
  </data>
  <data name="Edit_StateModelIDProperty" xml:space="preserve">
    <value>State Model ID</value>
    <comment>For the state model id property.</comment>
  </data>
  <data name="Edit_StateModelNameProperty" xml:space="preserve">
    <value>State Model Name</value>
    <comment>For the entity state model name property.</comment>
  </data>
  <data name="Edit_StateNameProperty" xml:space="preserve">
    <value>State Name</value>
    <comment>For the entity state name property.</comment>
  </data>
  <data name="Edit_StateTransitionHeader" xml:space="preserve">
    <value>State Transition</value>
    <comment>For the entity state transition header.</comment>
  </data>
  <data name="Edit_StateTransitionIDProperty" xml:space="preserve">
    <value>State Transition ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_StateTransitionNameHeader" xml:space="preserve">
    <value>State Transition Name</value>
    <comment>For the state transition name property.</comment>
  </data>
  <data name="Edit_StateTransitionNameProperty" xml:space="preserve">
    <value>State Transition Name</value>
    <comment>For the entity state transition name property.</comment>
  </data>
  <data name="Edit_StepHeader" xml:space="preserve">
    <value>Step</value>
    <comment>For the workflow step header.</comment>
  </data>
  <data name="Edit_StepIDProperty" xml:space="preserve">
    <value>Step ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_StepNameProperty" xml:space="preserve">
    <value>Step Name</value>
    <comment>For the workflow step name property.</comment>
  </data>
  <data name="Edit_StepTransitionHeader" xml:space="preserve">
    <value>Step Transition</value>
    <comment>For the step transition header.</comment>
  </data>
  <data name="Edit_StepTransitionIDProperty" xml:space="preserve">
    <value>Step Transition ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_StepTransitionNameHeader" xml:space="preserve">
    <value>Step Transition Name</value>
    <comment>For the step transition name property.</comment>
  </data>
  <data name="Edit_StepTransitionNameProperty" xml:space="preserve">
    <value>Step Transition Name</value>
    <comment>For the step transition name property.</comment>
  </data>
  <data name="Edit_TaggedItemsProperty" xml:space="preserve">
    <value>Tagged Items</value>
    <comment>For the tagged items property.</comment>
  </data>
  <data name="Edit_TagHeader" xml:space="preserve">
    <value>Tag</value>
    <comment>For the tag header.</comment>
  </data>
  <data name="Edit_TagManagementHeader" xml:space="preserve">
    <value>Tag Management</value>
    <comment>For the tag management control header.</comment>
  </data>
  <data name="Edit_TagNameProperty" xml:space="preserve">
    <value>Tag Name</value>
    <comment>For the tag name property.</comment>
  </data>
  <data name="Edit_TagProperty" xml:space="preserve">
    <value>Tag</value>
    <comment>For the tag property.</comment>
  </data>
  <data name="Edit_TagsProperty" xml:space="preserve">
    <value>Tags</value>
    <comment>For the tags label.</comment>
  </data>
  <data name="Edit_TemplateContentProperty" xml:space="preserve">
    <value>Content</value>
    <comment>For the content.</comment>
  </data>
  <data name="Edit_TemplateIDProperty" xml:space="preserve">
    <value>Template ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_TemplateNameProperty" xml:space="preserve">
    <value>Template Name</value>
    <comment>For the template name.</comment>
  </data>
  <data name="Edit_TemplateOutputProperty" xml:space="preserve">
    <value>Output</value>
    <comment>For the output.</comment>
  </data>
  <data name="Edit_TemplatePathProperty" xml:space="preserve">
    <value>Template Path</value>
    <comment>For the template path property.</comment>
  </data>
  <data name="Edit_TemplateProperty" xml:space="preserve">
    <value>Template</value>
    <comment>For the template label</comment>
  </data>
  <data name="Edit_TemplatesCalledProperty" xml:space="preserve">
    <value>Templates Called</value>
    <comment>For the Templates Called property.</comment>
  </data>
  <data name="Edit_TierCodeProperty" xml:space="preserve">
    <value>Tier</value>
    <comment>For the tier property.</comment>
  </data>
  <data name="Edit_TierNameProperty" xml:space="preserve">
    <value>Tier</value>
    <comment>For the tier name.</comment>
  </data>
  <data name="Edit_ToStageIDProperty" xml:space="preserve">
    <value>To Stage ID</value>
    <comment>For the to stage id property.</comment>
  </data>
  <data name="Edit_ToStageIDSelection" xml:space="preserve">
    <value>To Stage</value>
    <comment>For the to stage id property.</comment>
  </data>
  <data name="Edit_ToStageTransitionListProperty" xml:space="preserve">
    <value>Transitions To This</value>
    <comment>For the transitions property.</comment>
  </data>
  <data name="Edit_ToStateIDProperty" xml:space="preserve">
    <value>To State ID</value>
    <comment>For the to state id property.</comment>
  </data>
  <data name="Edit_ToStateIDSelection" xml:space="preserve">
    <value>To State</value>
    <comment>For the to state id property.</comment>
  </data>
  <data name="Edit_ToStateTransitionListProperty" xml:space="preserve">
    <value>Transitions To This</value>
    <comment>For the transitions property.</comment>
  </data>
  <data name="Edit_ToStepIDProperty" xml:space="preserve">
    <value>To Step ID</value>
    <comment>For the to step id property.</comment>
  </data>
  <data name="Edit_ToStepIDSelection" xml:space="preserve">
    <value>To Step</value>
    <comment>For the to step id property.</comment>
  </data>
  <data name="Edit_ToStepTransitionListProperty" xml:space="preserve">
    <value>Transitions To This</value>
    <comment>For the transitions property.</comment>
  </data>
  <data name="Edit_TransitionsHeader" xml:space="preserve">
    <value>Transitions</value>
    <comment>For the Transitions header.</comment>
  </data>
  <data name="Edit_ValueHeader" xml:space="preserve">
    <value>Value</value>
    <comment>For the value header.</comment>
  </data>
  <data name="Edit_ValueIDProperty" xml:space="preserve">
    <value>Value ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_ValueListProperty" xml:space="preserve">
    <value>Values</value>
    <comment>For the vales property.</comment>
  </data>
  <data name="Edit_ValueNameHeader" xml:space="preserve">
    <value>Value Name</value>
    <comment>For the value header.</comment>
  </data>
  <data name="Edit_ValueNameProperty" xml:space="preserve">
    <value>Value Name</value>
    <comment>For the value name property.</comment>
  </data>
  <data name="Edit_ValuesHeader" xml:space="preserve">
    <value>Values</value>
    <comment>For the values header.</comment>
  </data>
  <data name="Edit_VisualStudioProperty" xml:space="preserve">
    <value>VStudio Version</value>
    <comment>For the visual studio property.</comment>
  </data>
  <data name="Edit_WorkflowHeader" xml:space="preserve">
    <value>Workflow</value>
    <comment>For the workflow header.</comment>
  </data>
  <data name="Edit_WorkflowIDProperty" xml:space="preserve">
    <value>Workflow ID</value>
    <comment>For the workflow id property.</comment>
  </data>
  <data name="Edit_WorkflowNameProperty" xml:space="preserve">
    <value>Workflow Name</value>
    <comment>For the workflow name property.</comment>
  </data>
  <data name="Edit_XmlSourceHeader" xml:space="preserve">
    <value>XML Source</value>
    <comment>For the xml source header.</comment>
  </data>
  <data name="Exception_Intro" xml:space="preserve">
    <value>Exception encountered:</value>
    <comment>For introducing the exception.</comment>
  </data>
  <data name="Help_StartupHeader" xml:space="preserve">
    <value>Getting Started</value>
    <comment>For the startup control</comment>
  </data>
  <data name="Help_StartupParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+ Solution Builder&lt;/b&gt; is a model oriented programming language and IDE, used for building models and generating code and other documents in a model oriented development process.</value>
    <comment>For startup help.</comment>
  </data>
  <data name="Help_StartupParagraph2" xml:space="preserve">
    <value>The user interface consists of 2 main windows.  The solution builder window shows all of your solution and help data in a tree view format.  It is from this window that you perform actions such as creating models, generating code, and selecting documents to view or edit.  The solution designer window (this window) allows you to view and edit documents such as model nodes and templates.</value>
    <comment>For startup help.</comment>
  </data>
  <data name="Issue_DeleteItemNotFound" xml:space="preserve">
    <value>The item requested to be deleted was not found.</value>
    <comment>For delete issues.</comment>
  </data>
  <data name="Issue_Intro" xml:space="preserve">
    <value>Issue Encountered</value>
    <comment>For introducing the issue.</comment>
  </data>
  <data name="Issue_LibraryResourcesMissing" xml:space="preserve">
    <value>Couldn't load any library resources data.</value>
    <comment>For library resorces issues</comment>
  </data>
  <data name="Issue_LibraryResourcesTitle" xml:space="preserve">
    <value>Library Resources</value>
    <comment>For library resorces issues</comment>
  </data>
  <data name="Issue_LibrarySQLServerConnection" xml:space="preserve">
    <value>Couldn't load any sql servers.</value>
    <comment>For SQL Server connection issues</comment>
  </data>
  <data name="Issue_LibrarySQLServerConnectionTitle" xml:space="preserve">
    <value>SQL Servers</value>
    <comment>For SQL Server connection issues</comment>
  </data>
  <data name="Issue_MissingDiagramEntities" xml:space="preserve">
    <value>Some entities were not found in the model and not added to the diagram.</value>
    <comment>For showing diagram entity issues</comment>
  </data>
  <data name="Issue_MissingFileName" xml:space="preserve">
    <value>A file name must be specified for saving a solution, etc.</value>
    <comment>For showing missing file name messages.</comment>
  </data>
  <data name="Issue_SolutionDirectoryNotFound" xml:space="preserve">
    <value>The solution directory "{0}" was not found.</value>
    <comment>For showing solution directory issue.</comment>
  </data>
  <data name="Issue_SolutionFileNotFound" xml:space="preserve">
    <value>The input file {0} was not found for opening a solution.</value>
    <comment>For showing solution open issue.</comment>
  </data>
  <data name="Issue_SolutionMustBeSaved" xml:space="preserve">
    <value>The solution must be saved prior to updating it, please save and try again.</value>
    <comment>For showing the solution must be saved message.</comment>
  </data>
  <data name="Issue_SpecTemplateDirectoryNotFound" xml:space="preserve">
    <value>The specification template directory "{0}" was not found.</value>
    <comment>For showing spec template directory issue.</comment>
  </data>
  <data name="ListItem_None" xml:space="preserve">
    <value>-- None --</value>
    <comment>For showing blank list items.</comment>
  </data>
  <data name="Message_SolutionIntro" xml:space="preserve">
    <value>Solution</value>
    <comment>For showing solution messages</comment>
  </data>
  <data name="Message_SolutionSaved" xml:space="preserve">
    <value>Solution {0} is saved.</value>
    <comment>For showing solution saved messages</comment>
  </data>
  <data name="NodeName_AuditProperties" xml:space="preserve">
    <value>Audit Properties</value>
    <comment>For the audit properties node name in the tree view.</comment>
  </data>
  <data name="NodeName_CodeTemplates" xml:space="preserve">
    <value>Code Templates</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Collections" xml:space="preserve">
    <value>Collections</value>
    <comment>For the collection entity properties node name in the tree view.</comment>
  </data>
  <data name="NodeName_DatabaseSources" xml:space="preserve">
    <value>Database Sources</value>
    <comment>For the specification sources node name in the tree view.</comment>
  </data>
  <data name="NodeName_Diagram" xml:space="preserve">
    <value>Diagram</value>
    <comment>For the diagram toolbox</comment>
  </data>
  <data name="NodeName_DiagramEntitiess" xml:space="preserve">
    <value>Diagram Entities</value>
    <comment>For the diagram entities tool</comment>
  </data>
  <data name="NodeName_Diagrams" xml:space="preserve">
    <value>Diagrams</value>
    <comment>For the diagrams tool</comment>
  </data>
  <data name="NodeName_Entities" xml:space="preserve">
    <value>Entities</value>
    <comment>For the entities node name.</comment>
  </data>
  <data name="NodeName_EntityReferences" xml:space="preserve">
    <value>Entity References</value>
    <comment>For the reference entity properties node name in the tree view.</comment>
  </data>
  <data name="NodeName_Enumerations" xml:space="preserve">
    <value>Enumerations</value>
    <comment>For the enumerations node name in the tree view.</comment>
  </data>
  <data name="NodeName_Features" xml:space="preserve">
    <value>Features</value>
    <comment>For the features node name in the tree view.</comment>
  </data>
  <data name="NodeName_Indexes" xml:space="preserve">
    <value>Indexes</value>
    <comment>For the entity indexes node name in the tree view.</comment>
  </data>
  <data name="NodeName_IndexProperties" xml:space="preserve">
    <value>Index Properties</value>
    <comment>For the index properties node name in the tree view.</comment>
  </data>
  <data name="NodeName_MethodRelationships" xml:space="preserve">
    <value>Method Relationships</value>
    <comment>For the method relationships node name in the tree view.</comment>
  </data>
  <data name="NodeName_Methods" xml:space="preserve">
    <value>Methods</value>
    <comment>For the methods node name in the tree view.</comment>
  </data>
  <data name="NodeName_ModelObjects" xml:space="preserve">
    <value>Model Objects</value>
    <comment>For the model objects node name in the tree view.</comment>
  </data>
  <data name="NodeName_ModelProperties" xml:space="preserve">
    <value>Model Properties</value>
    <comment>For the model properties node name in the tree view.</comment>
  </data>
  <data name="NodeName_Models" xml:space="preserve">
    <value>Models</value>
    <comment>For the models node name in the tree view.</comment>
  </data>
  <data name="NodeName_Parameters" xml:space="preserve">
    <value>Parameters</value>
    <comment>For the parameters node name in the tree view.</comment>
  </data>
  <data name="NodeName_Projects" xml:space="preserve">
    <value>Projects</value>
    <comment>For the assemblies node name in the tree view.</comment>
  </data>
  <data name="NodeName_Properties" xml:space="preserve">
    <value>Properties</value>
    <comment>For the properties window, etc.</comment>
  </data>
  <data name="NodeName_PropertyBases" xml:space="preserve">
    <value>Properties</value>
    <comment>For the property bases node name in the tree view.</comment>
  </data>
  <data name="NodeName_PropertyReferences" xml:space="preserve">
    <value>Property References</value>
    <comment>For the derived entity data properties node name in the tree view.</comment>
  </data>
  <data name="NodeName_PropertyRelationships" xml:space="preserve">
    <value>Property Relationships</value>
    <comment>For the property relationships node name in the tree view.</comment>
  </data>
  <data name="NodeName_RelationshipProperties" xml:space="preserve">
    <value>Relationship Properties</value>
    <comment>For the relationship properties node name in the tree view.</comment>
  </data>
  <data name="NodeName_Relationships" xml:space="preserve">
    <value>Relationships</value>
    <comment>For the entity relationships node name in the tree view.</comment>
  </data>
  <data name="NodeName_Resources" xml:space="preserve">
    <value>Resources</value>
    <comment>For the conventions node name in the tree view.</comment>
  </data>
  <data name="NodeName_Root" xml:space="preserve">
    <value>Root</value>
    <comment>For the root node (shouldn't be displayed anyway).</comment>
  </data>
  <data name="NodeName_SolutionConventions" xml:space="preserve">
    <value>Conventions</value>
    <comment>For the solution conventions node name in the tree view.</comment>
  </data>
  <data name="NodeName_SolutionDefault" xml:space="preserve">
    <value>[New Solution]</value>
    <comment>For showing a default new solution name</comment>
  </data>
  <data name="NodeName_SolutionDiagrams" xml:space="preserve">
    <value>Diagrams</value>
    <comment>For solution diagrams</comment>
  </data>
  <data name="NodeName_Solutions" xml:space="preserve">
    <value>Solutions</value>
    <comment>For the solutions node name in the tree view.</comment>
  </data>
  <data name="NodeName_SpecificationSources" xml:space="preserve">
    <value>Specification Sources</value>
    <comment>For the specification sources node name in the tree view.</comment>
  </data>
  <data name="NodeName_SpecTemplates" xml:space="preserve">
    <value>Spec Templates</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Stages" xml:space="preserve">
    <value>Workflow Stages</value>
    <comment>For the workflow stages node name in the tree view.</comment>
  </data>
  <data name="NodeName_StageTransitions" xml:space="preserve">
    <value>Stage Transitions</value>
    <comment>For the workflow stage transitions node name in the tree view.</comment>
  </data>
  <data name="NodeName_StateModels" xml:space="preserve">
    <value>State Models</value>
    <comment>For the state models node name in the tree view.</comment>
  </data>
  <data name="NodeName_States" xml:space="preserve">
    <value>States</value>
    <comment>For the states node name in the tree view.</comment>
  </data>
  <data name="NodeName_StateTransitions" xml:space="preserve">
    <value>State Transitions</value>
    <comment>For the state transitions node name in the tree view.</comment>
  </data>
  <data name="NodeName_Steps" xml:space="preserve">
    <value>Steps</value>
    <comment>For the workflow steps node name in the tree view.</comment>
  </data>
  <data name="NodeName_StepTransitions" xml:space="preserve">
    <value>Step Transitions</value>
    <comment>For the step transitions node name in the tree view.</comment>
  </data>
  <data name="NodeName_Tags" xml:space="preserve">
    <value>Tags</value>
    <comment>For the tags node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_AuditProperty" xml:space="preserve">
    <value>Audit Property</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Collection" xml:space="preserve">
    <value>Collection</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Entity" xml:space="preserve">
    <value>Entity</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_EntityReference" xml:space="preserve">
    <value>Entity Reference</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Feature" xml:space="preserve">
    <value>Feature</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Index" xml:space="preserve">
    <value>Index</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_IndexProperty" xml:space="preserve">
    <value>Index Property</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Method" xml:space="preserve">
    <value>Method</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Parameter" xml:space="preserve">
    <value>Parameter</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Project" xml:space="preserve">
    <value>Project</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Property" xml:space="preserve">
    <value>Property</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_PropertyReference" xml:space="preserve">
    <value>Property Reference</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Relationship" xml:space="preserve">
    <value>Relationship</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_RelationshipProperty" xml:space="preserve">
    <value>Relationship Property</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlColumn" xml:space="preserve">
    <value>Sql Column</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlDatabase" xml:space="preserve">
    <value>Sql Database</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlExtendedProperty" xml:space="preserve">
    <value>Sql Extended Property</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlForeignKey" xml:space="preserve">
    <value>Sql Foreign Key</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlForeignKeyColumn" xml:space="preserve">
    <value>Sql Foreign Key Column</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlIndex" xml:space="preserve">
    <value>Sql Index</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlIndexedColumn" xml:space="preserve">
    <value>Sql Indexed Column</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlProperty" xml:space="preserve">
    <value>Sql Property</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlTable" xml:space="preserve">
    <value>Sql Table</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Stage" xml:space="preserve">
    <value>Stage</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_StageTransition" xml:space="preserve">
    <value>Stage Transition</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_State" xml:space="preserve">
    <value>State</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_StateModel" xml:space="preserve">
    <value>State Model</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_StateTransition" xml:space="preserve">
    <value>State Transition</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Step" xml:space="preserve">
    <value>Step</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_StepTransition" xml:space="preserve">
    <value>Step Transition</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Workflow" xml:space="preserve">
    <value>Workflow</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_XmlAttribute" xml:space="preserve">
    <value>Xml Attribute</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_XmlDocument" xml:space="preserve">
    <value>Xml Document</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_XmlNode" xml:space="preserve">
    <value>Xml Node</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Values" xml:space="preserve">
    <value>Values</value>
    <comment>For the values node name in the tree view.</comment>
  </data>
  <data name="NodeName_Workflows" xml:space="preserve">
    <value>Workflows</value>
    <comment>For the workflows node name in the tree view.</comment>
  </data>
  <data name="NodeName_XmlSources" xml:space="preserve">
    <value>Xml Sources</value>
    <comment>For the specification sources node name in the tree view.</comment>
  </data>
  <data name="NodeName_ZoomBox" xml:space="preserve">
    <value>Zoom Box</value>
    <comment>For the diagram zoom box.</comment>
  </data>
  <data name="Percent" xml:space="preserve">
    <value>%</value>
    <comment>For displaying percentages.</comment>
  </data>
  <data name="Progress_CompilingModelIntro" xml:space="preserve">
    <value>Compiling model for: </value>
    <comment>For showing model compilation progress</comment>
  </data>
  <data name="Progress_ModelAborted" xml:space="preserve">
    <value>The model update for {0} has been ABORTED.  {1} templates were used with a total of {2} template executions, {3} from the cache.</value>
  </data>
  <data name="Progress_ModelSolutionAborted" xml:space="preserve">
    <value>The output solution update for {0} has been ABORTED.  {1} templates were used with a total of {2} template executions, {3} from the cache.</value>
  </data>
  <data name="Progress_ModelSolutionUpdated" xml:space="preserve">
    <value>The output solution for {0} has been updated.  {1} templates were used with a total of {2} template executions, {3} from the cache.</value>
  </data>
  <data name="Progress_ModelUpdated" xml:space="preserve">
    <value>The model for {0} has been updated.  {1} templates were used with a total of {2} template executions, {3} from the cache.</value>
  </data>
  <data name="Progress_SolutionBuilderTask" xml:space="preserve">
    <value>Solution Builder Task</value>
  </data>
  <data name="Progress_UpdatingOutputSolutionIntro" xml:space="preserve">
    <value>Updating output solution for: </value>
    <comment>For showing updating solution progress</comment>
  </data>
  <data name="Status_Ready" xml:space="preserve">
    <value>Ready</value>
    <comment>Ready status</comment>
  </data>
  <data name="Task_InitializationTitle" xml:space="preserve">
    <value>Initialization</value>
    <comment>For initialization messages.</comment>
  </data>
  <data name="Task_SaveTitle" xml:space="preserve">
    <value>Save Task</value>
    <comment>For save tasks</comment>
  </data>
  <data name="Template_ASTLabel" xml:space="preserve">
    <value>Abstract Syntax Tree</value>
  </data>
  <data name="Template_ParsingContentIntro" xml:space="preserve">
    <value>Parsing Content Results for</value>
  </data>
  <data name="Template_ParsingOutputIntro" xml:space="preserve">
    <value>Parsing Output Results for</value>
  </data>
  <data name="Template_ParsingResultsLabel" xml:space="preserve">
    <value>Parsing Results</value>
  </data>
  <data name="Template_ParsingSpecificationIntro" xml:space="preserve">
    <value>Parsing Specification Results for</value>
  </data>
  <data name="Template_SampleCodeLabel" xml:space="preserve">
    <value>Sample Code</value>
  </data>
  <data name="Thread_InitializationDone" xml:space="preserve">
    <value>Initialization has been completed.</value>
    <comment>For initialization complete messages.</comment>
  </data>
  <data name="Thread_InitializationThreadBusy" xml:space="preserve">
    <value>You must wait for the previous initialization job to complete prior to starting a new job.</value>
    <comment>For showing inialization thread busy issues</comment>
  </data>
  <data name="Thread_ThreadBusy" xml:space="preserve">
    <value>You must wait for the {0} job to complete prior to starting a new job.</value>
    <comment>For showing the thread busy message</comment>
  </data>
  <data name="Validation_TagName" xml:space="preserve">
    <value>The name of the tag must not contain any spaces.</value>
  </data>
  <data name="Select_All" xml:space="preserve">
    <value>Select All</value>
    <comment>For select all.</comment>
  </data>
  <data name="Edit_PropertyRelationshipListProperty" xml:space="preserve">
    <value>Relationships</value>
    <comment>For the property relation.</comment>
  </data>
  <data name="Edit_IdentityIncrementProperty" xml:space="preserve">
    <value>Identity Increment</value>
    <comment>For the identity increment property</comment>
  </data>
  <data name="Edit_IdentityProperty" xml:space="preserve">
    <value>Identity</value>
    <comment>For the identity property</comment>
  </data>
  <data name="Edit_IdentitySeedProperty" xml:space="preserve">
    <value>Identity Seed</value>
    <comment>For the identity seed property</comment>
  </data>
  <data name="Edit_PropertyRelationshipsHeader" xml:space="preserve">
    <value>Property Relationships</value>
    <comment>For the property relationships header</comment>
  </data>
  <data name="Edit_MethodRelationshipIDProperty" xml:space="preserve">
    <value>Method Relationship ID</value>
    <comment>For the method relationship.</comment>
  </data>
  <data name="Edit_PropertyRelationshipIDProperty" xml:space="preserve">
    <value>Property Relationship ID</value>
    <comment>For the property relationship.</comment>
  </data>
  <data name="Edit_RelationshipIDSelection" xml:space="preserve">
    <value>Relationship</value>
    <comment>For the relationship.</comment>
  </data>
  <data name="Edit_MethodRelationshipListProperty" xml:space="preserve">
    <value>Relationships</value>
    <comment>For the method relation.</comment>
  </data>
  <data name="Edit_MethodRelationshipsHeader" xml:space="preserve">
    <value>Method Relationships</value>
    <comment>For the property relationships header</comment>
  </data>
  <data name="Edit_DatabaseTypeCodeSelection" xml:space="preserve">
    <value>Database Type</value>
    <comment>For the database type.</comment>
  </data>
  <data name="Edit_PasswordProperty" xml:space="preserve">
    <value>Password</value>
    <comment>For the password property.</comment>
  </data>
  <data name="Edit_UserNameProperty" xml:space="preserve">
    <value>User Name</value>
    <comment>For the user name property.</comment>
  </data>
  <data name="Edit_IsCollectionProperty" xml:space="preserve">
    <value>Collection</value>
    <comment>For the collection checkbox.</comment>
  </data>
  <data name="Edit_ParentModelObjectIDSelection" xml:space="preserve">
    <value>Parent Model Object</value>
    <comment>For the parent model object.</comment>
  </data>
  <data name="ContextMenu_NewObjectInstance" xml:space="preserve">
    <value>New Object Instance</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewObjectInstanceToolTip" xml:space="preserve">
    <value>For creating object instancess for a model object.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewPropertyInstance" xml:space="preserve">
    <value>New Property Instance</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewPropertyInstanceToolTip" xml:space="preserve">
    <value>For creating property instancess for an object instance.</value>
    <comment>For context menus</comment>
  </data>
  <data name="Edit_DefinedByValueIDSelection" xml:space="preserve">
    <value>Defined By Value</value>
    <comment>For the defined by value property.</comment>
  </data>
  <data name="Edit_ModelPropertyIDSelection" xml:space="preserve">
    <value>Model Property</value>
    <comment>For the model property.</comment>
  </data>
  <data name="Edit_ObjectInstanceHeader" xml:space="preserve">
    <value>Object Instance</value>
    <comment>For the object instance header.</comment>
  </data>
  <data name="Edit_ObjectInstanceIDProperty" xml:space="preserve">
    <value>Object Instance ID</value>
    <comment>For the object instance.</comment>
  </data>
  <data name="Edit_PropertyInstanceHeader" xml:space="preserve">
    <value>Property Instance</value>
    <comment>For the property instance header.</comment>
  </data>
  <data name="Edit_PropertyInstanceIDProperty" xml:space="preserve">
    <value>Property Instance ID</value>
    <comment>For the property instance.</comment>
  </data>
  <data name="Edit_PropertyInstanceListProperty" xml:space="preserve">
    <value>Properties</value>
    <comment>For the property instances property.</comment>
  </data>
  <data name="Edit_PropertyValueProperty" xml:space="preserve">
    <value>Property Value</value>
    <comment>For the property value.</comment>
  </data>
  <data name="NodeName_ObjectInstances" xml:space="preserve">
    <value>Object Instances</value>
    <comment>For the object instances node name in the tree view.</comment>
  </data>
  <data name="Edit_DefinedByValueHeader" xml:space="preserve">
    <value>Defined By Value</value>
    <comment>For the defined by value property.</comment>
  </data>
  <data name="Edit_ModelPropertyIDHeader" xml:space="preserve">
    <value>Model Property</value>
    <comment>For the model property property.</comment>
  </data>
  <data name="Edit_ParentObjectInstanceIDSelection" xml:space="preserve">
    <value>Parent Object Instance</value>
    <comment>For the parent object instance.</comment>
  </data>
  <data name="Edit_PropertyInstancesHeader" xml:space="preserve">
    <value>Properties</value>
    <comment>For the property instances header.</comment>
  </data>
  <data name="Edit_PropertyValueHeader" xml:space="preserve">
    <value>Property Value</value>
    <comment>For the property value property.</comment>
  </data>
  <data name="NodeName_Templates_Enumeration" xml:space="preserve">
    <value>Enumeration</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Model" xml:space="preserve">
    <value>Model</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_ModelObject" xml:space="preserve">
    <value>Model Object</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_ModelProperty" xml:space="preserve">
    <value>Model Property</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_ObjectInstance" xml:space="preserve">
    <value>Object Instance</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_PropertyInstance" xml:space="preserve">
    <value>Property Instance</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_Value" xml:space="preserve">
    <value>Value</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="Edit_IsDisplayPropertyProperty" xml:space="preserve">
    <value>Display Property</value>
    <comment>For the display property checkbox.</comment>
  </data>
  <data name="Edit_DebugExpressionHeader" xml:space="preserve">
    <value>Expression</value>
    <comment>For the debug expression header.</comment>
  </data>
  <data name="Edit_DebugHeader" xml:space="preserve">
    <value>Debug</value>
    <comment>For the debug header.</comment>
  </data>
  <data name="Edit_DebugValueHeader" xml:space="preserve">
    <value>Value</value>
    <comment>For the debug value header.</comment>
  </data>
  <data name="ContextMenu_CancelJobs" xml:space="preserve">
    <value>Quit Jobs</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_CancelJobsToolTip" xml:space="preserve">
    <value>For quitting any running jobs.</value>
    <comment>For context menus</comment>
  </data>
  <data name="Button_Go_ToolTip" xml:space="preserve">
    <value>Debug/Continue (F5)</value>
  </data>
  <data name="Button_Stop_ToolTip" xml:space="preserve">
    <value>Stop (Shift +F5)</value>
  </data>
  <data name="Help_Show" xml:space="preserve">
    <value>Show</value>
    <comment>For help</comment>
  </data>
  <data name="Help_HowItWorksHeader" xml:space="preserve">
    <value>How It Works</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_HowItWorksParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+ Solution Builder&lt;/b&gt; is a powerful tool that allows users to create and maintain models and source code and other document solutions in any platform or language as part of a model driven development process.  The following diagram illustrates the basic elements of that process that is supported by Mo+ Solution Builder.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_HowItWorksParagraph2" xml:space="preserve">
    <value>In a nutshell, the basic process of using &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; to create models and output solutions is:
&lt;ul&gt;
&lt;li&gt;Using the Solution Builder Interface, the user creates a Mo+ model, optionally specifying where model information is going to come from as specification sources.  For each specification source, the user chooses a Mo+ template which outlines how to update model information from that source.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;The Specification Interpreter processes each specification source to evaluate the Specification Input (such as a database or XML file), and updates information into the Solution model, based on instructions in the corresponding templates. The Specification Interpreter adds information to the model such as features, entities, properties, relationships, and methods, etc.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;The user can further customize (or create) the model, adding or modifying features, entities, properties, relationships, methods, etc.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;The user creates projects in the model, which specifies what kind of Solution Output to produce, such as source code for a particular tier and platform.  For each project, the user chooses a Mo+ template which outlines how to create and update Solution Output.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;The Code Interpreter processes each project to evaluate the Mo+ model, and update Solution Output, based on instructions in the corresponding templates. The Code Interpreter creates and updates information such as source code files, project files, database tables or procedures, test cases, configuration files, and other documents.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Using the Solution Builder Interface, the user can also create, edit, and debug Mo+ Specification Templates and Mo+ Code Templates to tailor model updates or solution output updates.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;The user saves the Solution model as a Mo+ Model Doc.  This document is simply an XML file that stores only the information that the user creates directly (not information interpreted from specification sources).&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceHeader" xml:space="preserve">
    <value>Mo+ Language Reference</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceParagraph1" xml:space="preserve">
    <value>The &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language is key to allowing the user to manage solution models, and from those solution models, manage complex code, model and document solutions as part of a model driven development process.
&lt;br&gt;&lt;br&gt;
This &lt;b&gt;Mo+&lt;/b&gt; language reference provides more details as to what can be done with the language, and is broken down into the following sections:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Language Features&lt;/b&gt;: This section presents the features of the language at a high level, comparing it to object oriented languages and introducing model oriented language specific features.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Templates&lt;/b&gt;: This section describes the code fragments that are called templates, and describes how templates are used in the overall process of managing solution models and output solutions.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tags&lt;/b&gt;: This section describes each of the valid tags, their purpose, and what can be contained within them.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Statements&lt;/b&gt;: This section defines each of the valid language statements, including valid syntax, and where the statements can be used.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Operators&lt;/b&gt;: This section defines each of the valid language operators, including valid syntax, and how the operators can be used.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Functions&lt;/b&gt;: This section outlines each function to perform actions such as string manipulation, including valid syntax, and how the functions can be used.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Configuration Properties&lt;/b&gt;: This sections outlines each of the global configuration properties, including syntax and purpose.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Special Properties&lt;/b&gt;: This section outlines special properties to make it easier to get some solution model and other information.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceHeader" xml:space="preserve">
    <value>Mo+ Model Reference</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceParagraph1" xml:space="preserve">
    <value>The &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language has at its heart the ability to walk through model data and specification source data to perform a wide variety of tasks.
&lt;br&gt;&lt;br&gt;
Model elements are the objects and properties that comprise the overall structure of the solution model, and these elements are recognized by &lt;b&gt;Mo+&lt;/b&gt; both to build models and generate code.  The user can view and edit instances of these elements in the solution model.
&lt;br&gt;&lt;br&gt;
Spec elements are the objects and properties that comprise an intermediate structure of platform dependent database and xml specification sources, and these elements are recognized by &lt;b&gt;Mo+&lt;/b&gt; to build models.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_StartupParagraph3" xml:space="preserve">
    <value>To begin, right click on the &lt;i&gt;Solutions&lt;/i&gt; node in the Solution Builder window, and open an existing solution or create a new one.  You can create and edit model nodes by hand, or if you set up one or more specification sources, you can have your model created from information in a database or xml file.  Once you have a model, you can start managing your code, model, and/or document solution.
&lt;br&gt;&lt;br&gt;
To get started quickly:
&lt;ol&gt;
&lt;li&gt;Download one or more getting started packs (see Template Libraries and Other Resources section).&lt;/li&gt;
&lt;li&gt;Watch getting started tutorials (see Tutorials section).&lt;/li&gt;
&lt;li&gt;Create your solution, using getting started pack templates to manage your model and/or code.&lt;/li&gt;
&lt;li&gt;Start generating code!&lt;/li&gt;
&lt;/ol&gt;</value>
    <comment>For startup help.</comment>
  </data>
  <data name="Help_StartupTutorialParagraph1" xml:space="preserve">
    <value>Tutorials for the &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; and programming with &lt;b&gt;Mo+&lt;/b&gt; can be found on the source code download site &lt;a href="MoPlus.CodePlex.com"&gt;MoPlus.CodePlex.com&lt;/a&gt;, and at the &lt;b&gt;Mo+&lt;/b&gt; membership site &lt;a href="ModelOrientedPlus.com"&gt;ModelOrientedPlus.com&lt;/a&gt;.
&lt;br&gt;&lt;br&gt;
The tutorials will visually walk the user through various features.  Lower numbered tutorials cover simpler getting started topics, while higher numbered tutorials delve into deeper features and capabilities.</value>
    <comment>For startup help.</comment>
  </data>
  <data name="Help_StartupWhatIsMoPlusHeader" xml:space="preserve">
    <value>What is Mo+?</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupWhatIsMoPlusModelHeader" xml:space="preserve">
    <value>What is a Mo+ Model?</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupWhatIsMoPlusModelParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Mo+&lt;/b&gt; model is a simple platform independent, tier independent representation of a system or solution that users desire to create code or some other kind of output for.</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupWhatIsMoPlusParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+&lt;/b&gt; is short for &lt;b&gt;Model Oriented Plus&lt;/b&gt;, and is the model oriented programming language that gives users the ability to perform a wide variety of tasks such as creating models, documents, and source code in any language.  The language has some similarities to C# or Java, but has features geared towards creating models, walking through model data, and generating code.</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupWhatIsMoPlusSolutionBuildeHeader" xml:space="preserve">
    <value>What is Mo+ Solution Builder?</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupWhatIsMoPlusSolutionBuilderParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+ Solution Builder&lt;/b&gt; is the environment (IDE) that gives users the ability to view and edit &lt;b&gt;Mo+&lt;/b&gt; models, view, edit, and debug &lt;b&gt;Mo+&lt;/b&gt; templates, and to initiate tasks to update models and output.</value>
    <comment>For help</comment>
  </data>
  <data name="Help_UIReferenceHeader" xml:space="preserve">
    <value>User Interface Reference</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+ Solution Builder&lt;/b&gt; is a powerful environment (IDE) that allows the user to perform a wide variety of tasks as part of an ongoing model driven development process.  Among the typical tasks that users would do include:
&lt;ul&gt;
&lt;li&gt;Build, edit, and maintain models that represents solutions users want to generate code and documents for.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Generate and update code and documents for output solutions in a way that is compatible with any customizations users do with those solutions.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Upload, create, edit, and debug code templates to improve code and document generation to meet ongoing solution requirements and best practices.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Upload, create, edit, and debug spec templates to improve model generation to meet ongoing solution requirements and best practices.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceParagraph2" xml:space="preserve">
    <value>&lt;b&gt;Mo+ Solution Builder&lt;/b&gt; includes the following applications:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Windows application (MoPlusSolutionBuilder.exe)&lt;/b&gt;: This is a standalone application that provides all of the Mo+ Solution Builder features, and includes the Solution Builder and Solution Designer windows, and status and output areas.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Visual Studio extension (MoPlus.SolutionBuilder.VSPackage)&lt;/b&gt;: For Visual Studio users, this extension also provides all of the Mo+ Solution Builder features, in a way that makes it easier to use in conjunction with custom development of your solutions.  The Mo+ menu allows the user to bring up the Solution Builder and Solution Designer windows (as separate dockable/floatable windows).  The output and status areas are integrated with the Visual Studio Output and status bar.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Command line utility (MoPlusSolutionUpdater.exe)&lt;/b&gt;: This command line utility is designed to integrate into build processes.  The utility takes a list of Mo+ model document (XML) file paths, and for each Mo+ model document found, builds the model from specification sources (if applicable) and updates the corresponding output solution.&lt;/li&gt;
&lt;/ul&gt;

The &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; interface is broken down into major feature areas as follows:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Solution Builder Window&lt;/b&gt;: This window presents your solution models, templates, and resources/help in a tree view format.  From this window, users performs tasks such as updating models and output solutions, and initiating the editing and/or viewing of items in the tree view.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Solution Designer Window&lt;/b&gt;: This window presents items in the Solution Builder window that the user has chosen to edit or view.  The items or documents are presented in a tab control.  Items can be floated as a separate window or docked in different sections.  What the user can do within an item depends on the type of item.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Status and Output Windows&lt;/b&gt;: These windows provide a log of certain activities being performed.  The status area presents a progress bar to indicate progress of model and solution updating activities.  The output area logs the results of model and solution updating activities, and also shows error messages encountered.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Templates&lt;/b&gt;: Code and Spec templates are stored as separate files, and are often uploaded from existing libraries of templates.  When users choose to edit/view a template, the template document can be edited.  Also, a debugger is available to run the templates in sample mode, with the ability to set breakpoints and watches, and look at sample output.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTreeViewHeader" xml:space="preserve">
    <value>Solution Builder Window</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTreeViewParagraph1" xml:space="preserve">
    <value>The following image illustrates an example of what appears in the Solution Builder window, which presents information in a tree view format.  Right click on any node to view the kinds of actions you can take such as editing or creating new items, viewing, saving, or running jobs.  There are also Ctrl+ hot keys assigned to most of these nodes to perform the tasks.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTreeViewParagraph2" xml:space="preserve">
    <value>The tree view includes a number of different kinds of nodes such as:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Solutions&lt;/b&gt;: This is the high level node that holds one or more of your solution models in any given session.  From here, you open existing solutions or create new ones.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Solution (name)&lt;/b&gt;: This node holds all of the model data for a particular solution, and corresponds to a Mo+ Model document (xml) file that is saved to disk.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Specification Sources&lt;/b&gt;: Nodes under here specify database or xml sources that are used to populate your model.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Projects&lt;/b&gt;: Nodes under here are used for code generation, and they specify what code output is to be created.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Features&lt;/b&gt;: Nodes under here contain most of the entity based model data that is created via specification sources or created by hand.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Workflows&lt;/b&gt;: Nodes under here contain workflow based model data.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Models&lt;/b&gt;: Nodes under here contain workflow based model data.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Diagrams&lt;/b&gt;: Diagrams allow the user to create one or more views of entity relationship data in a diagram format.  Model data can also be edited via these diagrams.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Audit Properties&lt;/b&gt;: These are global properties (if applicable) that may apply to all entities in the model.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Spec Templates&lt;/b&gt;: These contain specification templates that are used to create and maintain the solution model.  The templates are stored on disk, organized by specification source and node.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Code Templates&lt;/b&gt;: These contain code templates that are used to generate code from the solution model.  The templates are stored on disk, organized by solution and node.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Resources&lt;/b&gt;: These read only nodes contain help and other useful information.&lt;/li&gt;
&lt;/ul&gt;
The little slider at the bottom of the tree view allows users to zoom/shrink the entire UI for general viewing purposes.</value>
    <comment>For help.</comment>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="MoPlusWorkflow" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>MoPlusWorkflow.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="SolutionBuilderTreeView" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>SolutionBuilderTreeView.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="CreateCode" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>CreateCode.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="CreateModel" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>CreateModel.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Help_HowItWorksCreateCodelHeader" xml:space="preserve">
    <value>Creating/Modifying Code from a Model</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_HowItWorksCreateCodelParagraph1" xml:space="preserve">
    <value>Once you have a populated Solution Model, you can use it to create and maintain code and other documents.  To do this, you must at least select a Mo+ Code Template in your Solution node to specify how to create your solution.  For most code solutions, you will want to create one or more Projects.  When you create a Project, select a Mo+ Code Template that specifies how to create and update a portion of your solution (such as a business logic layer written in C#).  Each project that outputs code should correspond to a single platform/language and tier (for example, multi tier solutions should contain a project for each tier).
&lt;br&gt;&lt;br&gt;
Choose the &lt;i&gt;Update Solution&lt;/i&gt; action from your solution node to run the Code Interpreter to update your output, based on information in the model.   To change how your model is created and updated from your sources, you can create and edit Mo+ Code templates from the Solution Builder interface.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_HowItWorksCreateModelHeader" xml:space="preserve">
    <value>Creating a Model from Scratch</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_HowItWorksCreateModelParagraph1" xml:space="preserve">
    <value>To create a &lt;b&gt;Mo+&lt;/b&gt; solution model from scratch, just use the Solution Builder interface.  First, create a Solution at the top level, then add additional nodes such as Features, Entities, and Properties, etc., whatever data is required for your output code or documents.
&lt;br&gt;&lt;br&gt;
When you are done, save your solution.  The solution file is stored as a Mo+ Model Doc, which is an xml file containing the data that you entered.
&lt;br&gt;&lt;br&gt;
Once you have a populated model, you can start using it to generate code and other documents.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_HowItWorksLoadModelHeader" xml:space="preserve">
    <value>Loading a Model from a Source</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_HowItWorksLoadModelParagraph1" xml:space="preserve">
    <value>If you have a database or xml file that provides information about your solution, the best way to utilize this information is to set up specification sources to load your model with this information.  First, create a Solution at the top level, then under &lt;i&gt;Specification Sources&lt;/i&gt;, create a Database or Xml source and enter information to connect to your source.  You will also need to choose a Mo+ Specification template that instructs how to build and update the Solution Model from your source.
&lt;br&gt;&lt;br&gt;
Choose the &lt;i&gt;Compile Specification Source Data&lt;/i&gt; action from your solution node to run the Specification Interpreter to update your model (this will happen automatically each time you open your solution file).   To change how your model is created and updated from your sources, you can create and edit Mo+ Specification templates from the Solution Builder interface.
&lt;br&gt;&lt;br&gt;
You can add additional nodes to the model and also edit nodes that are created by your specification sources.  Mo+ Solution Builder keeps track of your customizations.  You will notice in the tree view and your documents that nodes and ui inputs are labeled with darker text when that data has been customized.
&lt;br&gt;&lt;br&gt;
When you are done, save your solution.  The solution file is stored as a Mo+ Model Doc, which is an xml file containing only the data that you entered, not data that is loaded from your specification sources.
&lt;br&gt;&lt;br&gt;
Once you have a populated model, you can start using it to generate code and other documents.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_StartupAboutMoPlusSolutionBuildeHeader" xml:space="preserve">
    <value>About Mo+ Solution Builder</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupAboutMoPlusSolutionBuilderParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+&lt;/b&gt; is a model oriented programming language, geared towards managing models, documents, and source code in any language.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Mo+ Solution Builder&lt;/b&gt; is a development environment (IDE) that utilizes &lt;b&gt;Mo+&lt;/b&gt;, and is used for building models and generating code and other documents in a model driven development process.
&lt;br&gt;&lt;br&gt;
&lt;i&gt;Copyright (C) 2013&lt;/i&gt; Dave Clemmer, Intelligent Coding Solutions, LLC
&lt;br&gt;&lt;br&gt;
&lt;i&gt;Mo+&lt;/i&gt; is a registered trademark of Intelligent Coding Solutions, LLC</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupTutorialHeader" xml:space="preserve">
    <value>Tutorials</value>
    <comment>For the startup control</comment>
  </data>
  <data name="Help_StartupWhatIsMoPlusModelParagraph2" xml:space="preserve">
    <value>The model structure contains elements or nodes such as projects, features, entities, properties, relationships, and other details that specify how the model should be built or how solution output should be built.  The model structure can also contain user defined elements or nodes.
&lt;br&gt;&lt;br&gt;
The model structure is populated with data, such as particular entities, properties, and relationships.  This model data appears in the tree view in the Solution Builder, organized by the nodes in the model structure.
&lt;br&gt;&lt;br&gt;
From populated &lt;b&gt;Mo+&lt;/b&gt; models, users can create and maintain enterprise solutions, documents, and source code in any language.</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupWhatIsMoPlusSolutionBuilderParagraph2" xml:space="preserve">
    <value>To view and edit models, users can open up any model item presented in a tree view format to view and edit details of that item, or create new items.  Users can also create and edit diagrams which show a graphical view of portions of the model.  Users can edit model items through the diagrams as well.
&lt;br&gt;&lt;br&gt;
To view and edit templates written in &lt;b&gt;Mo+&lt;/b&gt;, users can open up any template presented in the tree view format to edit that template, or create new templates.  Templates can be debugged by running the debugger, setting breakpoints and viewing data, and viewing sample output.  Syntax highlighting, code completion, and folding of the template details, and a syntax tree interpretation of the template details are also provided.</value>
    <comment>For help</comment>
  </data>
  <data name="LoadModel" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>LoadModel.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="MoPlusModel" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>MoPlusModel.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Product" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Product.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Edit_OutputSolutionFileNameProperty" xml:space="preserve">
    <value>Output Solution File Name</value>
    <comment>Name of output solution to be generated.</comment>
  </data>
  <data name="Help_UIReferenceDiagrammingHeader" xml:space="preserve">
    <value>Diagrams</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceDiagrammingParagraph1" xml:space="preserve">
    <value>The following image illustrates a diagram that allows additional viewing and editing of entity, relationship, and related information.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceDiagrammingParagraph2" xml:space="preserve">
    <value>Entities can be added to the diagram in any of the following ways:
&lt;ul&gt;
&lt;li&gt;Mouse over the Entities tab on the left hand side, select an entity and drag it onto the canvas.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Click on the Entities tab to dock it, select an entity and drag it onto the canvas.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;From the Solution Builder window, select an entity and drag it onto the canvas.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;From the Solution Builder window, select a feature and drag all of its entites onto the canvas.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Right click and create a new entity on the canvas.&lt;/li&gt;
&lt;/ul&gt;
The canvas provides rubber band selection to move groups of entities.  A context menu provides the ability to remove selected entities from the diagram, or delete selected entites (or relationships).
&lt;br&gt;&lt;br&gt;
Opening expanders on entity details such as Properties and Collections provides a view of those items and provide basic editing of those items.
&lt;br&gt;&lt;br&gt;
Each of the tabs on the left hand side provide functionality upon mouse over, or the item can be docked.  The available functions are:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Entities&lt;/b&gt;: This provides a list of entities that can be added to the diagram.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Properties&lt;/b&gt;: This provides a detailed edit view of the item in the diagram that is selected, similar to the details if you edited the item separately.  The selected item could be an entity, relationship, or any of the items in the expanders in an entity.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Diagram&lt;/b&gt;: This provides basic details on the diagram such as name and description.  It is here where you can save or reset the diagram and the associated information.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Zoom Box&lt;/b&gt;: This provides the ability to zoom or shrink a diagram, and to focus on a particular area of a zoomed diagram.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceEditItemHeader" xml:space="preserve">
    <value>Editing Items</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceEditItemParagraph1" xml:space="preserve">
    <value>The following image illustrates a typical item that can be edited, in this case a method with parameters, etc.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceEditItemParagraph2" xml:space="preserve">
    <value>In addition to entering information via inputs, editing an item usually provides the following buttons with Alt+ hot keys:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Update&lt;/b&gt;: This button updates the information for the item to the model in the Solution Builder window.  No information is saved to disk until the solution itself is saved. This button is enabled once a change has been made to the item.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Reset&lt;/b&gt;: This button resets the item data to its previous update point.  This button is enabled once a change has been made to the item.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Defaults&lt;/b&gt;: This button removes all customizations from the item.  If the item was created from a specification source, the values created by that source will appear.  If the item was created from scratch, values will be data type defaults.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Close&lt;/b&gt;: This button enables the item to be closed.  The user will be prompted if there are unsaved changes.&lt;/li&gt;
&lt;/ul&gt;
You will notice that once customizations are made within an input, the corresponding label will appear in darker text.  You can see which properties are customized by darker text labels.  You can see what is customized in a similar fashion in the Solution Builder window tree view.
&lt;br&gt;&lt;br&gt;
You will also notice that if any inputs fail validation, the corresponding label will appear in red text, and a tooltip with the validation message will appear over the input.  Likewise, errors in items in the Solution Builder window tree view will appear in red.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceOtherNodesHeader" xml:space="preserve">
    <value>Nodes in General</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceOtherNodesParagraph1" xml:space="preserve">
    <value>Nearly every node or item in the solution model gives the user the ability to (via a context menu or hot keys):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Create New&lt;/b&gt;: This creates a new instance of the item (or similar or child item) and puts it into the Solution Designer window.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Edit&lt;/b&gt;: This brings up the currently selected item into the Solution Designer window for editing.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Delete&lt;/b&gt;: This deletes the item from the solution model (after clicking OK on the prompt to delete).&lt;/li&gt;
&lt;/ul&gt;
Many items can be copied and pasted to a similar location, or dragged and dropped to be copied to a similar location.  This may be within or between solutions.  When an item is copied, all of the details are considered customizations, so if you are using specification sources to populate models, you may consider changes in the sources or spec templates to accomplish your needs more effectively.
&lt;br&gt;&lt;br&gt;
Items under Resources can only be viewed (via the Show context menu item).</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceSolutionDesignerHeader" xml:space="preserve">
    <value>Solution Designer Window</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceSolutionDesignerParagraph1" xml:space="preserve">
    <value>The following image illustrates an example of a couple of items that can appear in the &lt;i&gt;Solution Designer&lt;/i&gt; window, which presents information selected for editing or viewing in a detail format.  Any of the tabbed items can be undocked as floating windows or moved into different tab sections.  Any of the tabbed items can be closed, and if changes in a tab are outstanding, the user is prompted.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceSolutionDesignerParagraph2" xml:space="preserve">
    <value>In the &lt;i&gt;Solution Designer&lt;/i&gt; window, users perform tasks such as:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Editing Item&lt;/b&gt;s: Users, can edit details on most any item, and update those details.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Diagramming&lt;/b&gt;: Users can view and edit entity, relationship, and related information in diagram format.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Editing and Debugging Templates&lt;/b&gt;: Users can edit and debug code and spec templates.  See the Templates section for more details on this.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Viewing Help&lt;/b&gt;: Users can view help content.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceSolutionNodeHeader" xml:space="preserve">
    <value>Solution Node</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceSolutionNodeParagraph1" xml:space="preserve">
    <value>The Solution node (with the name of the solution) enables key tasks (via a context menu or hot keys) on the solution such as:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;New Solution&lt;/b&gt;: This creates a new instance of Solution and puts it into the Solution Designer window.  No file is created.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Open Solution&lt;/b&gt;: This brings up a dialog to open an existing solution.  If a solution is chosen, it is opened, the model is updated if the solution contains specification sources, and the solution is displayed in the tree view.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Recent Solutions&lt;/b&gt;: This provides a short cut to open recently opened solutions.  Choosing one will open that solution.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Open Output Solution&lt;/b&gt;: This opens the solution that is created by Mo+ Solution Builder.  The application that opens the solution will be based on the file extension.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Update Output Solution&lt;/b&gt;: This starts a job to update code and other documents in your output solution.  The solution must be linked to a code template.  Optionally, there can be additional projects linked to code templates.  &lt;b&gt;Note:&lt;/b&gt; It is always a good idea to have your output solution under source control or otherwise backed up prior to updating your output solution, in case anything unexpected should occur.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Compile Specification Source Data&lt;/b&gt;: This starts a job to update the solution model, based on data found in specification sources (xml or database sources).  These specification sources have to be defined in the model and each linked to a spec template.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Save&lt;/b&gt;: This action will save the solution, where any customizations are saved in the corresponding solution file (Mo+ Model document).&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Save As:&lt;/b&gt; This action will save the solution as a new file.  The user is prompted for the name of the new solution file (Mo+ Model document).&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Close&lt;/b&gt;: This will close the selected solution, prompting a save if one is required.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Manage Tags&lt;/b&gt;: This brings up the Tag Management tool in the Solution Designer window, which allows the user to view and edit tags on any nodes in the solution model.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceSolutionsNodeHeader" xml:space="preserve">
    <value>Solutions Node/Folder</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceSolutionsNodeParagraph1" xml:space="preserve">
    <value>The top level &lt;i&gt;Solutions&lt;/i&gt; node or folder enables tasks (via a context menu or hot keys) on one or more solutions such as:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;New Solution&lt;/b&gt;: This creates a new instance of Solution and puts it into the Solution Designer window.  No file is created.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Open Solution&lt;/b&gt;: This brings up a dialog to open an existing solution.  If a solution is chosen, it is opened, the model is updated if the solution contains specification sources, and the solution is displayed in the tree view.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Recent Solutions&lt;/b&gt;: This provides a short cut to open recently opened solutions.  Choosing one will open that solution.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Save All&lt;/b&gt;: This action will save all currently opened solutions, where any customizations are saved in the corresponding solution files (Mo+ Model documents).&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Quit Jobs&lt;/b&gt;: This will cancel any background jobs currently running (building models, generating code, debugging, etc.).&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceStatusOutputHeader" xml:space="preserve">
    <value>Status and Output</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceStatusOutputParagraph1" xml:space="preserve">
    <value>The Status bar indicates the current status of any background (compile model or update solution) job that is running, and also shows a progress bar for these tasks.  The Status bar appears at the bottom of the window in the windows application, or if running in Visual Studio, is integrated with that IDE's status bar.
&lt;br&gt;&lt;br&gt;
The Output area gives more detailed information about any background jobs that are running, as well as messaging for any errors that are encountered.  In the windows application, this area appears near the bottom, and a context menu is provided to clear the output text.  If running in Visual Studio, the Output area is integrated with Visual Studio's output window.  Select Solution Builder as the type of output to view this information, and to clear it if desired.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesHeader" xml:space="preserve">
    <value>Templates</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesParagraph1" xml:space="preserve">
    <value>Templates unlock the true power of &lt;b&gt;Mo+ Solution Builder&lt;/b&gt;, and are used to create models and solution output such as source code, models, scripts, and other documents.
&lt;br&gt;&lt;br&gt;
Templates contain code written in the &lt;b&gt;Mo+&lt;/b&gt; programming language, and can accomplish tasks such as:
&lt;ul&gt;
&lt;li&gt;Determining what kind of textual content is to be produced and returned.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Determining if, when, and where to save content to disk, maintaining protected content on disk as applicable.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Creating or updating elements in the solution model, maintaining any user customizations.&lt;/li&gt;
&lt;/ul&gt;
In addition to standard editing facilities, editing templates provides a rich environment with syntax recognition, folding, some code completion, and a debugging facility.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesParagraph2" xml:space="preserve">
    <value>All templates are divided into 3 sections, as indicated on the tabs on the left hand side of the template.
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Configuration&lt;/b&gt;: This section determines how the template is to be called and stored on disk.  The template must have a name, which is how the template is known by other templates as well as the file name.  The node indicates what kind of node will be passed as the root model instance when the template is called.  For example, if the template is an Entity template, the template will ALWAYS be called with an instance of Entity (such as a Customer entity).  The Category is optional, and is used to help group a larger number of templates.  The Top Level Template checkbox, if checked, means that the template will appear in dropdown lists for Solutions or specification Sources as the first template to call.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Content&lt;/b&gt;: Fill out this optional section with valid Mo+ code if the template is to produce some textual content.  The content may be the entire text of a file, or just a small bit of text to be used by other templates.  Any code written in this section CANNOT write content to disk or update the model.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Output&lt;/b&gt;: Fill out this optional section with valid Mo+ code if the template is to update files on disk (Code templates) or update the solution model (Spec templates).  The content to be output may come from the Content section of this template and/or content from other templates.  Code templates can only write content to disk, and Spec templates can only update the solution model.&lt;/li&gt;
&lt;/ul&gt;
See the &lt;i&gt;Mo+ Language Reference&lt;/i&gt; for more details on how the &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language works.</value>
    <comment>For help.</comment>
  </data>
  <data name="MoPlusDiagram" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>MoPlusDiagram.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="MoPlusEditItem" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>MoPlusEditItem.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="MoPlusSolutionDesignerWindow" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>MoPlusSolutionDesignerWindow.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="MoPlusUI" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>MoPlusUI.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Help_StartupResourcesHeader" xml:space="preserve">
    <value>Template Libraries and Other Resources</value>
    <comment>For the startup control</comment>
  </data>
  <data name="Help_StartupResourcesParagraph1" xml:space="preserve">
    <value>Intelligent Coding Solutions is dedicated to improving the effectiveness of model driven development, and to get as much community input towards this end.
&lt;br&gt;&lt;br&gt;
One primary goal is to create and build upon template libraries and other resources for various platforms that represent ongoing best practices from the &lt;b&gt;Mo+&lt;/b&gt; user community, and to make these available to the community at large.
&lt;br&gt;&lt;br&gt;
Visit &lt;a href="ModelOrientedPlus.com"&gt;ModelOrientedPlus.com&lt;/a&gt;, and become a member to give greater input on the direction of &lt;b&gt;Mo+&lt;/b&gt;, and the set of best practice template libraries and other materials.  As a member, you will also get some additional basic support.
&lt;br&gt;&lt;br&gt;
Visit &lt;a href="MoPlus.CodePlex.com"&gt;MoPlus.CodePlex.com&lt;/a&gt; for the latest product downloads and the latest publicly available template library getting started packs.</value>
    <comment>For startup help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesCodeHeader" xml:space="preserve">
    <value>Code Templates</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesCodeParagraph1" xml:space="preserve">
    <value>Code Templates are designed for updating textual solution output of any kind, including source code in any language, models, database scripts, test cases, and documents.  Code template (output) can only update files on disk.  There are many ways to integrate generated code with customizations done outside of &lt;b&gt;Mo+ Solution Builder&lt;/b&gt;, such as use of protected areas and any rules of your making as to when or where to generate code.  Code templates have no platform dependence, other than &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; only runs in a Windows environment.
&lt;br&gt;&lt;br&gt;
To set up Code Templates for generating code:
&lt;ul&gt;
&lt;li&gt;Create or upload a Solution template that describes how to create and maintain your solution.  Edit your Solution in the model, and select this template.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Optionally, set up one or more Projects in the model.  Create or upload Project level templates.  For each Project, select a Project level template the describes how to create and maintain your project.  If projects are used, the Solution level template will need to call the project level templates in its output (with a &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%&gt;&lt;/span&gt;&lt;span style="color:magenta"&gt;Template&lt;/span&gt;&lt;span style="background-color:yellow;color:gray"&gt;%%&gt;&lt;/b&gt;&lt;/span&gt; call for each project).&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Create or upload any other lower level templates to be called in the creation of your solution and/or projects.&lt;/li&gt;
&lt;/ul&gt;
Code template files have an extension of .mpt.  These template files are organized in a directory, where the top level files are for the &lt;i&gt;Solution&lt;/i&gt;, and templates for other node types (such as &lt;i&gt;Entity&lt;/i&gt;) are stored in a folder with the name of that node type.
&lt;br&gt;&lt;br&gt;
Visit &lt;a href="MoPlus.CodePlex.com"&gt;MoPlus.CodePlex.com&lt;/a&gt; to get some Code Template getting started packs to help you start generating code sooner!</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesDebuggingHeader" xml:space="preserve">
    <value>Debugging Templates</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesDebuggingParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+ Solution Builder&lt;/b&gt; provides a rich debugging facility for validating the expected behavior of any template. For additional inspection during the running of jobs, the trace statement can be used in any template code to put inspected values to the output window.
br&gt;&lt;br&gt;
When you open up a &lt;i&gt;Content&lt;/i&gt; or &lt;i&gt;Output&lt;/i&gt; section of a template, additional debugging facilities become available:
&lt;ul&gt;
&lt;li&gt;A breakpoint bar to the left of the line numbers to set breakpoints.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;A green start/continue debugging button (with F5 hot key) to start or continue debugging.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;A red stop debugging button (with Shift+F5 hot key) to stop debugging&lt;br&gt;&lt;/li&gt;
&lt;li&gt;A list (unique to each template Content and Output area) for entering watch expressions&lt;/li&gt;
&lt;/ul&gt;
Breakpoints can be set or removed for any template Content or Output area at any time.  When a debug job is not running, the green start button is available for any template Content or Output area (other debug controls are not visible).  Once a debug job is running, the debug controls at the bottom are only available for the active template, the one where the debug started from or where a breakpoint was reached.  The active template is easy to spot, as the tab has the text in red, and the overflow drop down in the Solution Designer window also has the active template in red.
&lt;br&gt;&lt;br&gt;
A valid watch expression is any expression that you can put in a property tag (see Mo+ Language Reference for details).  For example, you can type in model element names or template calls that are in context at the breakpoint.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesEditingHeader" xml:space="preserve">
    <value>Editing Templates</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesEditingParagraph1" xml:space="preserve">
    <value>When templates are edited, a rich facility is provided, including syntax highlighting, folding, and some code completion (after typing ".").  The recognized syntax colors are:
&lt;ul&gt;&lt;li&gt;&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;Yellow&lt;/b&gt;&lt;/span&gt; for tags&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="color:darkorange"&gt;&lt;b&gt;Dark Orange&lt;/b&gt;&lt;/span&gt; for raw text to be output&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="color:darkgreen"&gt;&lt;b&gt;Dark Green&lt;/b&gt;&lt;/span&gt; for comments&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="color:blue"&gt;&lt;b&gt;Blue&lt;/b&gt;&lt;/span&gt; for valid language terms&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Teal&lt;/b&gt;&lt;/span&gt; for valid model elements, functions, and special properties&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;Chocolate&lt;/b&gt;&lt;/span&gt; for valid model elements, functions, and special properties within property tags&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;SlateBlue&lt;/b&gt;&lt;/span&gt; for literals&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="color:brown"&gt;&lt;b&gt;Brown&lt;/b&gt;&lt;/span&gt; for (potential) template calls&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="color:red"&gt;&lt;b&gt;Red&lt;/b&gt;&lt;/span&gt; for trace statements&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style="color:magenta"&gt;&lt;b&gt;Magenta&lt;/b&gt;&lt;/span&gt; for output expressions&lt;/li&gt;
&lt;/ul&gt;
The following hot keys are set up for quick setting up of tags while entering text:
&lt;ul&gt;&lt;li&gt;&lt;b&gt;Ctrl+Shift+Q&lt;/b&gt;: Creates an evaluation tag group (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%:%%&gt;&lt;/b&gt;&lt;/span&gt;) for entering Mo+ statements.  Available in Content and Output sections.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ctrl+Shift+A&lt;/b&gt;: Creates a text tag group (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%-%%&gt;&lt;/b&gt;&lt;/span&gt;) for entering raw text to be output.  Available in Content and Output sections.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ctrl+Shift+D&lt;/b&gt;: Creates a split text tag group (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;%%&gt;&lt;%%-&lt;/b&gt;&lt;/span&gt;), used for splitting text in a text tag group, usually for inserting something else such as a property tag.  Available in Content and Output sections.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ctrl+Shift+W&lt;/b&gt;: Creates a property tag group (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%=%%&gt;&lt;/b&gt;&lt;/span&gt;) for entering a Mo+ expression.  Available in Content and Output sections.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ctrl+Shift+S&lt;/b&gt;: Creates an output tag group (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%&gt;%%&gt;&lt;/b&gt;&lt;/span&gt;) for entering a Mo+ output expression.  Available in Output sections only.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Find and Replace&lt;/b&gt; dialog is available to help manage your template content:
&lt;ul&gt;&lt;li&gt;Click inside the &lt;i&gt;Content&lt;/i&gt; or &lt;i&gt;Output&lt;/i&gt; template text that you want to do find and replace operations on.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ctrl+F&lt;/b&gt;: Brings up the Find and Replace dialog as a separate, always on top window.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;The dialog provides a number of find and replace options.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Click inside any other &lt;i&gt;Content&lt;/i&gt; or &lt;i&gt;Output&lt;/i&gt; template text areas to continue find and replace operations on.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesSpecHeader" xml:space="preserve">
    <value>Spec Templates</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceTemplatesSpecParagraph1" xml:space="preserve">
    <value>Spec Templates are designed for creating and updating solution models, while retaining any customizations entered by users.  Spec template (output) can only update the solution model.  The &lt;b&gt;Mo+&lt;/b&gt; language for managing specification information is platform independent, but connectors have to be developed and applied internally to get information from each type of supported database.
&lt;br&gt;&lt;br&gt;
To set up Spec Templates for generating models:
&lt;ul&gt;
&lt;li&gt;Create or upload a DatabaseSource or XmlSource template that describes how to create and maintain your solution model.  Create a DatabaseSource or XmlSource in the model, enter source connection details and select this template.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Create or upload any other lower level templates to be called in the creation of your solution model.&lt;/li&gt;
&lt;/ul&gt;
Spec template files have an extension of .mps.  These template files are organized in a directory, where the top level files are for the DatabaseSource or XmlSource, and templates for another node type (such as SqlTable) are stored in a folder with the name of that node type.
&lt;br&gt;&lt;br&gt;
Visit &lt;a href="MoPlus.CodePlex.com"&gt;MoPlus.CodePlex.com&lt;/a&gt; to get some Spec Template getting started packs to help you start generating models sooner!</value>
    <comment>For help.</comment>
  </data>
  <data name="MoPlusDebugWindow" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>MoPlusDebugWindow.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Help_ModelReferenceModelElementAuditPropertyParagraph1" xml:space="preserve">
    <value>An &lt;b&gt;AuditProperty&lt;/b&gt; represents a global property that may apply to all entities in the solution.  An &lt;b&gt;AuditProperty&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Solution&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
An &lt;b&gt;AuditProperty&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyName (string)&lt;/b&gt;: The name of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsAddAuditProperty (bool)&lt;/b&gt;: Flag, indicating if property is utilized for add operations.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsUpdateAuditProperty (bool)&lt;/b&gt;: Flag, indicating if property is utilized for update operations.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsValueGenerated (bool)&lt;/b&gt;: Flag, indicating if property has its value generated externally, such as in a database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DataTypeCode (int)&lt;/b&gt;: (or DataTypeName) The data type the property, based in input data type enumeration values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Precision (int)&lt;/b&gt;: The precision of the property, if applicable for data type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Scale (int)&lt;/b&gt;: The scale of the property, if applicable for data type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;InitialValue (string)&lt;/b&gt;: The initial value of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsNullable (bool)&lt;/b&gt;: Flag, indicating if property can have null values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order in which the property can appear.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SolutionID (Guid)&lt;/b&gt;: (or Solution) The identifier of the parent solution.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementCollectionParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Collection&lt;/b&gt; represents a collection of an entity that is part of another entity.  A &lt;b&gt;Collection&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Entity&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Collection&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;CollectionName (string)&lt;/b&gt;: The name of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsNullable (bool)&lt;/b&gt;: Flag, indicating if property can have null values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order in which the property can appear.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedEntityID (Guid)&lt;/b&gt;: (or ReferencedEntity) Indicates which entity this is a collection of.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityID (Guid)&lt;/b&gt;: (or Entity) The identifier of the parent entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsBaseProperty (bool)&lt;/b&gt;: Read only, returns true if property is found in a base entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsAuditProperty (bool)&lt;/b&gt;: Read only, returns true if property is found as a global audit property.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Collection&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyRelationship&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementEntityParagraph1" xml:space="preserve">
    <value>An &lt;b&gt;Entity&lt;/b&gt; represents an object that can hold all sorts of data, actions, and behaviors.  An &lt;b&gt;Entity&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Feature&lt;/b&gt;, or as a reference within a &lt;b&gt;Collection&lt;/b&gt; or &lt;b&gt;EntityReference&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
An &lt;b&gt;Entity&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;EntityID (Guid)&lt;/b&gt;: The identifier to uniquely identify the entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityName (string)&lt;/b&gt;: The name of the entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsNullable (bool)&lt;/b&gt;: Flag, indicating if property can have null values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityTypeCode (int)&lt;/b&gt;: (or EntityTypeName) The type of the entity, based on input entity type enumeration values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IdentifierTypeCode (int)&lt;/b&gt;: (or IdentifierTypeName) The type of the entity identifier, based on input identifier type enumeration values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;GroupName (string)&lt;/b&gt;: An alternate grouping for the entity, for example a database (schema) grouping.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;BaseEntityID (Guid)&lt;/b&gt;: (or BaseEntity) The identifier of the entity this entity extends, if applicable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FeatureID (Guid)&lt;/b&gt;: (or Feature) The identifier of the parent feature.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyReferenceCount (int)&lt;/b&gt;: Read only number of property references for entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyCount (int)&lt;/b&gt;: Read only number of properties for entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;CollectionCount (int)&lt;/b&gt;: Read only number of collections for entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityReferenceCount (int)&lt;/b&gt;: Read only number of entity references for entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MethodCount (int)&lt;/b&gt;: Read only number of methods for entity.&lt;/li&gt;
&lt;/ul&gt;
An &lt;b&gt;Entity&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Property&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Collection&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyReference&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityReference&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Method&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Index&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Relationship&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StateModel&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementEntityReferenceParagraph1" xml:space="preserve">
    <value>An &lt;b&gt;EntityReference&lt;/b&gt; represents a reference to an entity from another entity.  An &lt;b&gt;EntityReference&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Entity&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
An &lt;b&gt;EntityReference&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityReferenceName (string)&lt;/b&gt;: The name of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsNullable (bool)&lt;/b&gt;: Flag, indicating if property can have null values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order in which the property can appear.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedEntityID (Guid)&lt;/b&gt;: (or ReferencedEntity) Indicates which entity this is a reference to.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityID (Guid)&lt;/b&gt;: (or Entity) The identifier of the parent entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsBaseProperty (bool)&lt;/b&gt;: Read only, returns true if property is found in a base entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsAuditProperty (bool)&lt;/b&gt;: Read only, returns true if property is found as a global audit property.&lt;/li&gt;
&lt;/ul&gt;
An &lt;b&gt;EntityReference&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyRelationship&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementEnumerationParagraph1" xml:space="preserve">
    <value>An &lt;b&gt;Enumeration&lt;/b&gt; represents a collection of expected values, used for custom model structures.  An &lt;b&gt;Enumeration&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Model&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
An &lt;b&gt;Enumeration&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;EnumerationID (Guid)&lt;/b&gt;: The identifier to uniquely identify the enumeration.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EnumerationName (string)&lt;/b&gt;: The name of the enumeration.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the enumeration.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ModelID (Guid)&lt;/b&gt;: (or Model) The identifier of the parent model.&lt;/li&gt;
&lt;/ul&gt;
An &lt;b&gt;Enumeration&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Value&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementFeatureParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Feature&lt;/b&gt; represents a logical grouping of related entities.  A &lt;b&gt;Feature&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Solution&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Feature&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FeatureID (Guid)&lt;/b&gt;: The identifier to uniquely identify the feature.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FeatureName (string)&lt;/b&gt;: The name of the feature.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the feature.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SolutionID (Guid)&lt;/b&gt;: (or Solution) The identifier of the parent solution.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Feature&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementsHeader" xml:space="preserve">
    <value>Model Elements</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementsParagraph1" xml:space="preserve">
    <value>This section describes the structure of a &lt;b&gt;Mo+&lt;/b&gt; model, including all of its elements or nodes, and corresponding properties.  The diagram below illustrates the primary parent/child structure of the model elements accessible via the &lt;b&gt;Mo+&lt;/b&gt; language.  The &lt;i&gt;Solution&lt;/i&gt; is the top level element.  Arrows point to child elements that can be found as collections under the parent.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementsHeader" xml:space="preserve">
    <value>Specification Elements</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementsParagraph1" xml:space="preserve">
    <value>This section describes the structure of specification elements that are utilized when reading information from specification sources.  The diagram below illustrates the primary parent/child structure of the specification elements accessible via the &lt;b&gt;Mo+&lt;/b&gt; language.  The &lt;i&gt;SqlDatabase&lt;/i&gt; and &lt;i&gt;XmlDocument&lt;/i&gt; are top level elements.  Arrows point to child elements that can be found as collections under the parent.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementIndexParagraph1" xml:space="preserve">
    <value>An &lt;b&gt;Index&lt;/b&gt; represents a grouping of properties within an entity that need to be accessed efficiently.  An &lt;b&gt;Index&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Entity&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
An &lt;b&gt;Index&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;IndexID (Guid)&lt;/b&gt;: The identifier to uniquely identify the index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IndexName (string)&lt;/b&gt;: The name of the index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsPrimaryKeyIndex (bool)&lt;/b&gt;: Flag indicating if index is the primary key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsUniqueIndex (bool)&lt;/b&gt;: Flag indicating if the property values for the index are unique within the entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityID (Guid)&lt;/b&gt;: (or Entity) The identifier of the parent entity.&lt;/li&gt;
&lt;/ul&gt;
An &lt;b&gt;Index&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;IndexProperty&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementIndexPropertyParagraph1" xml:space="preserve">
    <value>An &lt;b&gt;IndexProperty&lt;/b&gt; represents a property within the entity that is part of an index.  An &lt;b&gt;IndexProperty&lt;/b&gt; is found in a collection as a child of Index.
&lt;br&gt;&lt;br&gt;
An &lt;b&gt;IndexProperty&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;IndexPropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the index property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyID (Guid)&lt;/b&gt;: (or Property) The identifier of the property within the entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order of the property within the index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the index property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IndexID (Guid)&lt;/b&gt;: (or Index) The identifier of the parent index.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementMethodParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Method&lt;/b&gt; represents a procedure or action that can be done relating to an entity.  A &lt;b&gt;Method&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Entity&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Method&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;MethodID (Guid)&lt;/b&gt;: The identifier to uniquely identify the method.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MethodName (string)&lt;/b&gt;: The name of the method.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MethodTypeCode (int)&lt;/b&gt;: (or MethodTypeName) The type of the method relating to what kind of action it performs, based on input method type enumeration values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the method.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityID (Guid)&lt;/b&gt;: (or Entity) The identifier of the parent entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ParameterCount (int)&lt;/b&gt;: Read only number of parameters for the method.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Method&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Parameter&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MethodRelationship&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementMethodRelationshipParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;MethodRelationship&lt;/b&gt; represents a link to a relationship, if the method action is based on data found in a relationship with the method's entity.  For example, this is used to construct join clauses for the method in relational database procedures.  A &lt;b&gt;MethodRelationship&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Method&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;MethodRelationship&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;MethodRelationshipID (Guid)&lt;/b&gt;: The identifier to uniquely identify the method relationship.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RelationshipID (Guid)&lt;/b&gt;: (or Relationship) The identifier of the corresponding relationship.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order of the relationship within the method, if the relationships is a set or chain.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the method relationship.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MethodID (Guid)&lt;/b&gt;: (or Method) The identifier of the parent method.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementModelObjectParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;ModelObject&lt;/b&gt; represents a user defined custom object that is used within a custom solution model.  A &lt;b&gt;ModelObject&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Model&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;ModelObject&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ModelObjectID (Guid)&lt;/b&gt;: The identifier to uniquely identify the model object.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ModelObjectName (string)&lt;/b&gt;: The name of the model object.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ParentModelObjectID (Guid)&lt;/b&gt;: The identifier of the parent model object, if this model object is a child of another.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the model object.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ModelID (Guid)&lt;/b&gt;: (or Model) The identifier of the parent model.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;ModelObject&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ModelProperty&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ObjectInstance&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementModelParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Model&lt;/b&gt; represents a user defined custom solution model structure and data that is used in conjunction with or instead of implicit model elements such as &lt;b&gt;Entity&lt;/b&gt;, &lt;b&gt;Relationship&lt;/b&gt;, and &lt;b&gt;Property&lt;/b&gt;.  In fact, with a &lt;b&gt;Model&lt;/b&gt; and its underlying elements, users can define ANY hierarchical model structure as a basis for managing code, model, or document solutions.  A &lt;b&gt;Model&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Solution&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Model&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ModelID (Guid)&lt;/b&gt;: The identifier to uniquely identify the model.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ModelName (string)&lt;/b&gt;: The name of the model.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the model.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SolutionID (Guid)&lt;/b&gt;: (or Solution) The identifier of the parent solution.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Model&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ModelObject&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Enumeration&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementModelPropertyParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;ModelProperty&lt;/b&gt; represents a user defined custom property that describes a custom model object.  A &lt;b&gt;ModelProperty&lt;/b&gt; is found in a collection as a child of &lt;b&gt;ModelObject&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;ModelProperty&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ModelPropertyID (Guid)&lt;/b&gt; The identifier to uniquely identify the model property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ModelPropertyName (string)&lt;/b&gt; The name of the model property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DefinedByModelObjectID (Guid)&lt;/b&gt; The identifier of the model object if the property is a type of that object.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DefinedByEnumerationID (Guid)&lt;/b&gt; The identifier of the enumeration if the property has values of that enumeration.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DefinedByValueID (Guid)&lt;/b&gt; The identifier of the model object if the property is a type of that enumeration value.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsCollection (bool)&lt;/b&gt; Flag indicating if property is a collection of its type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsDisplayProperty (bool)&lt;/b&gt; Flag indicating if property value is used for display purposes such as the primary name for the model object.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt; The description of the model property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ModelID (Guid)&lt;/b&gt; (or Model) The identifier of the parent model.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementObjectInstanceParagraph1" xml:space="preserve">
    <value>An &lt;b&gt;ObjectInstance&lt;/b&gt; represents a populated instance of a user defined custom object.  An &lt;b&gt;ObjectInstance&lt;/b&gt; is found in a collection as a child of &lt;b&gt;ModelObject&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
An &lt;b&gt;ObjectInstance&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ObjectInstanceID (Guid)&lt;/b&gt; The identifier to uniquely identify the object instance.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ParentObjectInstanceID (Guid)&lt;/b&gt; The identifier of the parent object instance, if this object instance is a child of another.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt; The description of the object instance.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ModelObjectID (Guid)&lt;/b&gt; (or ModelObject) The identifier of the parent model object.&lt;/li&gt;
&lt;/ul&gt;
An &lt;b&gt;ObjectInstance&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyInstance&lt;/b&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementParameterParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Parameter&lt;/b&gt; represents a piece of data that is passed to a method call.  A &lt;b&gt;Parameter&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Method&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Parameter&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ParameterID (Guid)&lt;/b&gt;: The identifier to uniquely identify the parameter.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ParameterName (string)&lt;/b&gt;: The name of the parameter.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order in which the parameter should appear with respect to others.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedEntityID (Guid)&lt;/b&gt;: (or ReferencedEntity) The identifier of the entity that the parameter property is within.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedPropertyID (Guid)&lt;/b&gt;: (or ReferencedProperty) The identifier of the property that the parameter is based on.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the parameter.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MethodID (Guid)&lt;/b&gt;: (or Method) The identifier of the parent method.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementProjectParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Project&lt;/b&gt; represents a portion of a software or document solution.  For example, a project in a software solution might represent a particular platform and tier within that solution such as an ASP.Net web service layer.  A &lt;b&gt;Project&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Solution&lt;/b&gt; or &lt;b&gt;Project&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Project&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ProjectID (Guid)&lt;/b&gt;: The identifier to uniquely identify the project.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ProjectName (string)&lt;/b&gt;: The name of the project.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Namespace (string)&lt;/b&gt;: The namespace of the project, if applicable for a software project.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DbServerName (string)&lt;/b&gt;: The name of the database server to connect to, if applicable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DbName (string)&lt;/b&gt;: The name of the database to connect to, if applicable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;TemplatePath (string)&lt;/b&gt;: The absolute or relative path to the template for generating code for the project (and it's components).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the project.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SolutionID (Guid)&lt;/b&gt;: (or Method) The identifier of the parent solution.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ProjectReferenceCount (int)&lt;/b&gt;: Read only number of project references in project.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Project&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Project&lt;/b&gt; (if the project has project references)
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementPropertyInstanceParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;PropertyInstance&lt;/b&gt; represents a populated property of an property instance for a user defined model object.  A &lt;b&gt;PropertyInstance&lt;/b&gt; is found in a collection as a child of &lt;b&gt;ObjectInstance&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;PropertyInstance&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyInstanceID (Guid)&lt;/b&gt;: The identifier to uniquely identify the property instance.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ParentPropertyInstanceID (Guid)&lt;/b&gt;: The identifier of the parent property instance, if this property instance is a child of another.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order&lt;/b&gt;: The order of the property instance, if part of a collection.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyValue (string)&lt;/b&gt;: The value of the property instance.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the property instance.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ObjectInstanceID (Guid)&lt;/b&gt;: (or ObjectInstance) The identifier of the parent object instance.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ModelPropertyID (Guid)&lt;/b&gt;: (or ModelProperty) The identifier of the associated model property.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementPropertyParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Property&lt;/b&gt; represents a value that describes an entity.  A &lt;b&gt;Property&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Entity&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Property&lt;/b&gt;  consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyName (string)&lt;/b&gt;: The name of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsPrimaryKeyMember (bool)&lt;/b&gt;: Flag, indicating if property is part of the primary key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsForeignKeyMember (bool)&lt;/b&gt;: Flag, indicating if property is part of a foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DataTypeCode (int)&lt;/b&gt;: (or DataTypeName) The data type the property, based in input data type enumeration values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MinLength (int)&lt;/b&gt;: The minimum length of the property value, if applicable for data type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Length (int)&lt;/b&gt;: The maximum length of the property value, if applicable for data type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Precision (int)&lt;/b&gt;: The precision of the property value, if applicable for data type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Scale (int)&lt;/b&gt;: The scale of the property vlaue, if applicable for data type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;InitialValue (string)&lt;/b&gt;: The initial value of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ValueConstraint (string)&lt;/b&gt;: A programatic or other constraint on the value of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsNullable (bool)&lt;/b&gt;: Flag, indicating if property can have null values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order in which the property can appear.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Identity (bool)&lt;/b&gt;: Flag, indicating if property is an identity, with values being auto generated.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IdentitySeed (long)&lt;/b&gt;: If an identity, the initial value to be used.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IdentityIncrement (long)&lt;/b&gt;: If an identity, the increment used to determine the next identity value.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedEntityID (Guid)&lt;/b&gt;: (or ReferencedEntity) Indicates which entity this is a reference to.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityID (Guid)&lt;/b&gt;: (or Entity) The identifier of the parent entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsBaseProperty (bool)&lt;/b&gt;: Read only, returns true if property is found in a base entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsAuditProperty (bool)&lt;/b&gt;: Read only, returns true if property is found as a global audit property.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementPropertyReferenceParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;PropertyReference&lt;/b&gt; represents a reference to a property from another entity.  A &lt;b&gt;PropertyReference&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Entity&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;PropertyReference&lt;/b&gt;  consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyReferenceName (string)&lt;/b&gt;: The name of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsNullable (bool)&lt;/b&gt;: Flag, indicating if property can have null values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order in which the property can appear.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedEntityID (Guid)&lt;/b&gt;: (or ReferencedEntity) Indicates which entity this is a reference to.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedPropertyID (Guid)&lt;/b&gt;: (or ReferencedProperty) Indicates which property this is a reference to.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityID (Guid)&lt;/b&gt;: (or Entity) The identifier of the parent entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsBaseProperty (bool)&lt;/b&gt;: Read only, returns true if property is found in a base entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsAuditProperty (bool)&lt;/b&gt;: Read only, returns true if property is found as a global audit property.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;PropertyReference&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyRelationship&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementPropertyRelationshipParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;PropertyRelationship&lt;/b&gt; represents a link to a relationship, if the property data is to be found via a relationship with the property's entity.  For example, this is used to construct join clauses for the property in relational database procedures.  A &lt;b&gt;PropertyRelationship&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Collection&lt;/b&gt;, &lt;b&gt;EntityReference&lt;/b&gt;, or &lt;b&gt;PropertyReference&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;PropertyRelationship&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyRelationshipID (Guid)&lt;/b&gt;: The identifier to uniquely identify the property relationship.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RelationshipID (Guid)&lt;/b&gt;: (or Relationship) The identifier of the corresponding relationship.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order of the relationship within the property, if the relationships is a set or chain.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the property relationship.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyID (Guid)&lt;/b&gt;: (or Property) The identifier of the parent property.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementRelationshipParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Relationship&lt;/b&gt; represents a connection between two entities.  A &lt;b&gt;Relationship&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Entity&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Relationship&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;RelationshipID (Guid)&lt;/b&gt;: The identifier to uniquely identify the relationship.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RelationshipName (string)&lt;/b&gt;: The name of the relationship.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsNullable (bool)&lt;/b&gt;: Flag indicating if property values in relationship are required.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ItemsMin (int)&lt;/b&gt;: Minimum number of items of parent entity that should be in relationship with referenced entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ItemsMax (int)&lt;/b&gt;: Maximum number of items of parent entity that should be in relationship with referenced entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedItemsMin (int)&lt;/b&gt;: Minimum number of items of referenced entity that should be in relationship with parent entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedItemsMax (int)&lt;/b&gt;: Maximum number of items of referenced entity that should be in relationship with parent entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the relationship.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedEntityID (Guid)&lt;/b&gt;: (or ReferencedEntity) The identifier of the entity relationship is connected to.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityID (Guid)&lt;/b&gt;: (or Entity) The identifier of the parent entity.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Relationship&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;RelationshipProperty&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementRelationshipPropertyParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;RelationshipProperty&lt;/b&gt; represents a property within the entity that is part of a relationship.  A &lt;b&gt;RelationshipProperty&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Relationship&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;RelationshipProperty&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;RelationshipPropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the relationship property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyID (Guid)&lt;/b&gt;: (or Property) The identifier of the property within the relationship parent entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedPropertyID (Guid)&lt;/b&gt;: (or ReferencedProperty) The identifier of the property within the relationship referenced entity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order of the property within the relationship.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the relationship property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;RelationshipID (Guid)&lt;/b&gt;: (or Relationship) The identifier of the parent relationship.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementSolutionParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Solution&lt;/b&gt; is the top level element that contains all of the information for a solution model.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Solution&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SolutionID (Guid)&lt;/b&gt;: The identifier to uniquely identify the solution.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SolutionName (string)&lt;/b&gt;: The name of the solution.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Namespace (string)&lt;/b&gt;: The namespace of the solution, if applicable for a software solution.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;OutputSolutionFileName (string)&lt;/b&gt;: The name of the output solution file (including extension, excluding path), if applicable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;CompanyName (string)&lt;/b&gt;: The name of the company as it relates to the solution, if applicable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ProductName (string)&lt;/b&gt;: The name of the product as it relates to the solution, if applicable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ProductVersion (string)&lt;/b&gt;: The version of the product as it relates to the solution, if applicable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;TemplatePath (string)&lt;/b&gt;: The absolute or relative path to the template for generating code for the solution (and it's components).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;UseRelativePaths (bool)&lt;/b&gt;: Flag, indicating if template paths for the solution (and projects) should be relative.  If you are using relative paths, set this value to true, save the solution, then choose your solution and project level templates.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the solution.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityCount (int)&lt;/b&gt;: Read only number of entities in the solution.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ProjectCount (int)&lt;/b&gt;: Read only number of projects in the solution.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SolutionDirectory (string)&lt;/b&gt;: Read only path of the directory where the output solution (and Mo+ model document) is located.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Solution&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;DatabaseSource&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XmlSource&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Project&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Feature&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Workflow&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Model&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AuditProperty&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementStageParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Stage&lt;/b&gt; represents a grouping of activity within a workflow.  A &lt;b&gt;Stage&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Workflow&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Stage&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StageID (Guid)&lt;/b&gt;: The identifier to uniquely identify the stage.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StageName (string)&lt;/b&gt;: The name of the stage.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order of the stage within the workflow.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the stage.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;WorkflowID (Guid)&lt;/b&gt;: (or Workflow) The identifier of the parent workflow.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Stage&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StageTransition&lt;/b&gt;
&lt;li&gt;&lt;b&gt;Step&lt;/b&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementStageTransitionParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;StageTransition&lt;/b&gt; represents a movement or change from one stage to another.  A &lt;b&gt;StageTransition&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Stage&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;StageTransition&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StageTransitionID (Guid)&lt;/b&gt;: The identifier to uniquely identify the stage transition.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StageTransitionName (string)&lt;/b&gt;: The name of the stage transition.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the stage transition.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FromStageID (Guid)&lt;/b&gt;: (or FromStage) The identifier of the initiating stage.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ToStageID (Guid)&lt;/b&gt;: (or ToStage) The identifier of the destination (and parent) stage.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementStateModelParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;StateModel&lt;/b&gt; represents a lifecycle of activity and status within an entity. A &lt;b&gt;StateModel&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Entity&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;StateModel&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StateModelID (Guid)&lt;/b&gt;: The identifier to uniquely identify the state model.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StateModelName (string)&lt;/b&gt;: The name of the state model.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the state model.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EntityID (Guid)&lt;/b&gt;: (or Entity) The identifier of the parent entity.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;StateModel&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;State&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementStateParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;State&lt;/b&gt; represents a particular status and associated activity within a state model. A &lt;b&gt;State&lt;/b&gt; is found in a collection as a child of &lt;b&gt;StateModel&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;State&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StateID (Guid)&lt;/b&gt;: The identifier to uniquely identify the state.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StateName (string)&lt;/b&gt;: The name of the state.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order of the state within the state model.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the state.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StateModelID (Guid)&lt;/b&gt;: (or StateModel) The identifier of the parent state model.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;State&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StateTransition&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementStateTransitionParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;StateTransition&lt;/b&gt; represents a movement or change from one state to another.  A &lt;b&gt;StateTransition&lt;/b&gt; is found in a collection as a child of &lt;b&gt;State&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;StateTransition&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StateTransitionID (Guid)&lt;/b&gt;: The identifier to uniquely identify the state transition.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StateTransitionName (string)&lt;/b&gt;: The name of the state transition.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the state transition.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FromStateID (Guid)&lt;/b&gt;: (or FromState) The identifier of the initiating state.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ToStateID (Guid)&lt;/b&gt;: (or ToState) The identifier of the destination (and parent) state.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementStepParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Step&lt;/b&gt; represents a grouping of activity within a stage.  A &lt;b&gt;Step&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Stage&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Step&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StepID (Guid)&lt;/b&gt;: The identifier to uniquely identify the step.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StepName (string)&lt;/b&gt;: The name of the step.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order of the step within the stage.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the step.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StageID (Guid)&lt;/b&gt;: (or Stage) The identifier of the parent stage.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Step&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StepTransition&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementStepTransitionParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;StepTransition&lt;/b&gt; represents a movement or change from one step to another.  A &lt;b&gt;StepTransition&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Step&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;StepTransition&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StepTransitionID (Guid)&lt;/b&gt;: The identifier to uniquely identify the step transition.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StepTransitionName (string)&lt;/b&gt;: The name of the step transition.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the step transition.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FromStepID (Guid)&lt;/b&gt;: (or FromStep) The identifier of the initiating step.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ToStepID (Guid)&lt;/b&gt;: (or ToStep) The identifier of the destination (and parent) step.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementTagParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Tag&lt;/b&gt; (not to be confused with template tags) represents a way to mark an element in the solution model.  Any model element can contain a collection of tags.
&lt;br&gt;&lt;br&gt;
Tags are probably the most flexible way to determine if and how to update your generated documents.  Tags can be used to determine whether to generate files.  Tags can be used to determine differences in how files should be generated based on exceptions or other conditions.  Tags can be used in expressions for any other kind of decision making.
&lt;br&gt;&lt;br&gt;
In the user interface, tags appear as free form words, separated by spaces.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Tag&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;TagName (string)&lt;/b&gt;: The name of the tag.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementValueParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Value&lt;/b&gt; represents a valid value for an enumeration.  A &lt;b&gt;Value&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Enumeration&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Value&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ValueID (Guid)&lt;/b&gt;: The identifier to uniquely identify the value.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ValueName (string)&lt;/b&gt;: The name of the value.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order of the value in the set of values for the enumeration.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the value.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;EnumerationID (Guid)&lt;/b&gt;: (or Enumeration) The identifier of the parent enumeration.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementWorkflowParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;Workflow&lt;/b&gt; represents a lifecycle of activity and status within a solution. A &lt;b&gt;Workflow&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Solution&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;Workflow&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;WorkflowID (Guid)&lt;/b&gt;: The identifier to uniquely identify the workflow.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;WorkflowName (string)&lt;/b&gt;: The name of the workflow.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the workflow.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SolutionID (Guid)&lt;/b&gt;: (or Solution) The identifier of the parent solution.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;Workflow&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Stage&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSpecificationSourceParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SpecificationSource&lt;/b&gt; represents information on an external source of specification information to be loaded into the solution model.  A &lt;b&gt;SpecificationSource&lt;/b&gt; can be a &lt;b&gt;DatabaseSource&lt;/b&gt; or an &lt;b&gt;XmlSource&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
As most of the information within a &lt;b&gt;SpecificationSource&lt;/b&gt; is used internally by &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; to load information into a platform independent format, most of the properties are not available via the Mo+ programming language.  The following properties are available:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlDatabase&lt;/b&gt;: For DatabaseSources, this holds the information for a source database in the SqlDatabase format.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XmlDocument&lt;/b&gt;: For XmlSources, this holds the information for a source xml file in the XmlDocument format.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlColumnParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlColumn&lt;/b&gt; represents information found in a column of a source database table.  A &lt;b&gt;SqlColumn&lt;/b&gt; is found in a collection as a child of &lt;b&gt;SqlTable&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlColumn&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlColumnID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlColumnName (string)&lt;/b&gt;: The name of the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DataType (string)&lt;/b&gt;: The data type of the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order of the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MaximumLength (int)&lt;/b&gt;: The maximum length of column values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NumericPrecision (int)&lt;/b&gt;: The precision of column values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NumericScale (int)&lt;/b&gt;: The scale of column values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Default (string)&lt;/b&gt;: The default value of the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DefaultSchema (string)&lt;/b&gt;: The default schema of the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsFullTextIndexed (bool)&lt;/b&gt;: Flag if sql column is part of a full text index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsForeignKey (bool)&lt;/b&gt;: Flag if sql column is part of a foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;InPrimaryKey (bool)&lt;/b&gt;: Flag if sql column is part of a primary key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Nullable (bool)&lt;/b&gt;: Flag if sql column values are nullable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Identity (bool)&lt;/b&gt;: Flag if sql column is an identity column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IdentitySeed (long)&lt;/b&gt;: The identity seed of the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IdentityIncrement (long)&lt;/b&gt;: The identity increment of the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Urn (string)&lt;/b&gt;: The urn of the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State (string)&lt;/b&gt;: The state of the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlTableID (Guid)&lt;/b&gt;: (or SqlTable) The identifier of the parent sql table.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;SqlColumn&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlProperty&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlExtendedProperty&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlDatabaseParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlDatabase&lt;/b&gt; represents all of the information that is loaded from a source database by &lt;b&gt;Mo+ SolutionBuilder&lt;/b&gt; from a &lt;b&gt;DatabaseSource&lt;/b&gt;.  A &lt;b&gt;SqlDatabase&lt;/b&gt; is the top level element for database specification information.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlDatabase&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlDatabaseID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlDatabaseName (string)&lt;/b&gt;: The name of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DbID (int)&lt;/b&gt;: The external database id.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Owner (string)&lt;/b&gt;: The owner account of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PrimaryFilePath (string)&lt;/b&gt;: The primary file path of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DefaultSchema (string)&lt;/b&gt;: The default schema of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DefaultFileGroup (string)&lt;/b&gt;: The default file group of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DefaultFullTextCatalog (string)&lt;/b&gt;: The default full text catalog of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;CreateDate (DateTime)&lt;/b&gt;: The created date of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Status (string)&lt;/b&gt;: The status of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;UserName (string)&lt;/b&gt;: The user name of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Urn (string)&lt;/b&gt;: The urn of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State (string)&lt;/b&gt;: The state of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlTableID (Guid)&lt;/b&gt;: (or SqlTable) The identifier of the parent sql table.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;SqlDatabase&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlTable&lt;/b&gt;
&lt;li&gt;&lt;b&gt;SqlProperty&lt;/b&gt;
&lt;li&gt;&lt;b&gt;SqlExtendedProperty&lt;/b&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlExtendedPropertyParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlExtendedProperty&lt;/b&gt; represents extended property information that may be available in source database elements.  A &lt;b&gt;SqlExtendedProperty&lt;/b&gt; may be found within most any other Sql elements.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlExtendedProperty&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlExtendedPropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql extended property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlExtendedPropertyName (string)&lt;/b&gt;: The name of the sql extended property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlValue (string)&lt;/b&gt;: The value of the sql extended property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Urn (string)&lt;/b&gt;: The urn of the sql extended property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State (string)&lt;/b&gt;: The state of the sql extended property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlDatabaseID (Guid)&lt;/b&gt;: (or SqlDatabase) The identifier of the parent sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlTableID (Guid)&lt;/b&gt;: (or SqlTable) The identifier of the parent sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlColumnID (Guid)&lt;/b&gt;: (or SqlColumn) The identifier of the parent sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlIndexID (Guid)&lt;/b&gt;: (or SqlIndex) The identifier of the parent sql index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlForeignKeyID (Guid)&lt;/b&gt;: (or SqlForeignKey) The identifier of the parent sql foreign key.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlForeignKeyColumnParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlForeignKeyColumn&lt;/b&gt; represents information found in a foreign key column of a foreign key in a source database.  A &lt;b&gt;SqlForeignKeyColumn&lt;/b&gt; is found in a collection as a child of &lt;b&gt;SqlForeignKey&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlForeignKeyColumn&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlForeignKeyColumnID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql foreign key column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlForeignKeyColumnName (string)&lt;/b&gt;: The name of the sql foreign key column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DbID (int)&lt;/b&gt;: The external identifier of the sql foreign key column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedColumn (string)&lt;/b&gt;: The referenced column name of the sql foreign key column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Urn (string)&lt;/b&gt;: The urn of the sql foreign key column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State (string)&lt;/b&gt;: The state of the sql foreign key column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the sql foreign key column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlForeignKeyID (Guid)&lt;/b&gt;: (or SqlTable) The identifier of the parent sql foreign key.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;SqlForeignKeyColumn&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlProperty&lt;/b&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlForeignKeyParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlForeignKey&lt;/b&gt; represents information found in a foreign key of a database table.  A &lt;b&gt;SqlForeignKey&lt;/b&gt; is found in a collection as a child of &lt;b&gt;SqlTable&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlForeignKey&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlForeignKeyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlForeignKeyName (string)&lt;/b&gt;: The name of the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DbID (int)&lt;/b&gt;: The external identifier of the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedKey (string)&lt;/b&gt;: The referenced key of the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedTable (string)&lt;/b&gt;: The referenced table of the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedTableSchema (string)&lt;/b&gt;: The referenced table schema of the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsChecked (bool)&lt;/b&gt;: Flag, indicating if the sql foreign key is checked.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsSystemNamed (bool)&lt;/b&gt;: Flag, indicating if the sql foreign key is system named.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;CreateDate (DateTime)&lt;/b&gt;: The created date of the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DateLastModified (DateTime)&lt;/b&gt;: The last modified date of the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Urn (string)&lt;/b&gt;: The urn of the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State (string)&lt;/b&gt;: The state of the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlTableID (Guid)&lt;/b&gt;: (or SqlTable) The identifier of the parent sql table.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;SqlForeignKey&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlProperty&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlExtendedProperty&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlIndexedColumnParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlIndexedColumn&lt;/b&gt; represents information found in a indexed column of an index in a source database.  A &lt;b&gt;SqlIndexedColumn&lt;/b&gt; is found in a collection as a child of &lt;b&gt;SqlIndex&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlIndexedColumn&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlIndexedColumnID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql indexed column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlIndexedColumnName (string)&lt;/b&gt;: The name of the sql indexed column and name of associated column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DbID (int)&lt;/b&gt;: The external identifier of the sql indexed column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsIncluded (bool)&lt;/b&gt;: Flag, indicating if sql indexed column is included/used.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsComputed (bool)&lt;/b&gt;: Flag, indicating if sql indexed column is computed.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Descending (bool)&lt;/b&gt;: Flag, indicating if sql indexed column values are descending.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Urn (string)&lt;/b&gt;: The urn of the sql indexed column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State (string)&lt;/b&gt;: The state of the sql indexed column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the sql indexed column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlIndexID (Guid)&lt;/b&gt;: (or SqlTable) The identifier of the parent sql index.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;SqlIndexedColumn&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlProperty&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlIndexParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlIndex&lt;/b&gt; represents information found in a index of a database table.  A &lt;b&gt;SqlIndex&lt;/b&gt; is found in a collection as a child of &lt;b&gt;SqlTable&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlIndex&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlIndexID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlIndexName (string)&lt;/b&gt;: The name of the sql index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DbID (int)&lt;/b&gt;: The external identifier of the sql index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsClustered (bool)&lt;/b&gt;: Flag, indicating if the sql index is clustered.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsUnique (bool)&lt;/b&gt;: Flag, indicating if the sql index is unique.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsXmlIndex (bool)&lt;/b&gt;: Flag, indicating if the sql index is an xml index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;IsFullTextKey (bool)&lt;/b&gt;: Flag, indicating if the sql index is a full text index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FileGroup (string)&lt;/b&gt;: The file group of the sql index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Urn (string)&lt;/b&gt;: The urn of the sql index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State (string)&lt;/b&gt;: The state of the sql index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the sql index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlTableID (Guid)&lt;/b&gt;: (or SqlTable) The identifier of the parent sql table.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;SqlIndex&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlProperty&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Sql</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlPropertyParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlProperty&lt;/b&gt; represents additional property information that may be available in source database elements.  A &lt;b&gt;SqlProperty&lt;/b&gt; may be found within most any other Sql elements.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlProperty&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlPropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlPropertyName (string)&lt;/b&gt;: The name of the sql property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlType (string)&lt;/b&gt;: The type of the sql property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlValue (string)&lt;/b&gt;: The value of the sql property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlDatabaseID (Guid)&lt;/b&gt;: (or SqlDatabase) The identifier of the parent sql database.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlTableID (Guid)&lt;/b&gt;: (or SqlTable) The identifier of the parent sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlColumnID (Guid)&lt;/b&gt;: (or SqlColumnID) The identifier of the parent sql column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlIndexID (Guid)&lt;/b&gt;: (or SqlTable) The identifier of the parent sql index.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlIndexedColumnID (Guid)&lt;/b&gt;: (or SqlIndexedColumn The identifier of the parent sql indexed column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlForeignKeyID (Guid)&lt;/b&gt;: (or SqlForeignKey) The identifier of the parent sql foreign key.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlForeignKeyColumnID (Guid)&lt;/b&gt;: (or SqlForeignKeyColumn) The identifier of the parent sql foreign key column.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlTableParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlTable&lt;/b&gt; represents information found in a source database table.  A &lt;b&gt;SqlTable&lt;/b&gt; is found in a collection as a child of &lt;b&gt;SqlDatabase&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlTable&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlTableID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlTableName (string)&lt;/b&gt;: The name of the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DbID (int)&lt;/b&gt;: The external identifier of the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Owner (string)&lt;/b&gt;: The owner account of the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Schema (string)&lt;/b&gt;: The schema of the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FileGroup (string)&lt;/b&gt;: The file group of the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;CreateDate (DateTime)&lt;/b&gt;: The created date of the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DateLastModified (DateTime)&lt;/b&gt;: The last modified date of the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Urn (string)&lt;/b&gt;: The urn of the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State (string)&lt;/b&gt;: The state of the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the sql table.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlDatabaseID (Guid)&lt;/b&gt;: (or SqlDatabase) The identifier of the parent sql database.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;SqlTable&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlColumn&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlIndex&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlForeignKey&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlProperty&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlExtendedProperty&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementXmlAttributeParagraph1" xml:space="preserve">
    <value>An &lt;b&gt;XmlAttribute&lt;/b&gt; represents information found in an attribute in a source xml file.  An &lt;b&gt;XmlAttribute&lt;/b&gt; is found in a collection as a child of &lt;b&gt;XmlDocument&lt;/b&gt; or &lt;b&gt;XmlNode&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;XmlAttribute&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;XmlAttributeID (Guid)&lt;/b&gt;: The identifier to uniquely identify the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XmlAttributeName (string)&lt;/b&gt;: The name of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;LocalName (string)&lt;/b&gt;: The local name of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Value (string)&lt;/b&gt;: The value of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;BaseURI (string)&lt;/b&gt;: The base uri of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Prefix (string)&lt;/b&gt;: The prefix of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NamespaceURI (string)&lt;/b&gt;: The namespace uri of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NodeType (string)&lt;/b&gt;: The node type of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;InnerText (string)&lt;/b&gt;: The inner text of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;InnerXml (string)&lt;/b&gt;: The inner xml of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;OuterXml (string)&lt;/b&gt;: The outer xml of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SchemaInfo (string)&lt;/b&gt;: The schema info of the xml attribute.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XmlNodeID (Guid)&lt;/b&gt;: (or XmlNode) The identifier of the parent xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XmlDocumentID (Guid)&lt;/b&gt;: (or XmlDocument) The identifier of the parent xml document.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementXmlDocumentParagraph1" xml:space="preserve">
    <value>An &lt;b&gt;XmlDocument&lt;/b&gt; represents information found in a source xml file, as loaded by &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; from an &lt;b&gt;XmlSource&lt;/b&gt;.  An &lt;b&gt;XmlDocument&lt;/b&gt; is the top level node for an xml source.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;XmlDocument&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;XmlDocumentID (Guid)&lt;/b&gt;: The identifier to uniquely identify the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XmlDocumentName (string)&lt;/b&gt;: The name of the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;LocalName (string)&lt;/b&gt;: The local name of the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Value (string)&lt;/b&gt;: The value of the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;BaseURI (string)&lt;/b&gt;: The base uri of the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NamespaceURI (string)&lt;/b&gt;: The namespace uri of the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DocumentType (string)&lt;/b&gt;: The document type of the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NodeType (string)&lt;/b&gt;: The node type of the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;InnerText (string)&lt;/b&gt;: The inner text of the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;InnerXml (string)&lt;/b&gt;: The inner xml of the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;OuterXml (string)&lt;/b&gt;: The outer xml of the xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SchemaInfo (string)&lt;/b&gt;: The schema info of the xml document.&lt;/li&gt;
&lt;/ul&gt;
An &lt;b&gt;XmlDocument&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;XmlNode&lt;/b&gt;
&lt;li&gt;&lt;b&gt;XmlAttribute&lt;/b&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementXmlNodeParagraph1" xml:space="preserve">
    <value>An &lt;b&gt;XmlNode&lt;/b&gt; represents information found in a node in a source xml file.  An &lt;b&gt;XmlNode&lt;/b&gt; is found in a collection as a child of &lt;b&gt;XmlDocument&lt;/b&gt; or &lt;b&gt;XmlNode&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;XmlNode&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;XmlNodeID (Guid)&lt;/b&gt;: The identifier to uniquely identify the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XmlNodeName (string)&lt;/b&gt;: The name of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;LocalName (string)&lt;/b&gt;: The local name of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Value (string)&lt;/b&gt;: The value of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;BaseURI (string)&lt;/b&gt;: The base uri of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Prefix (string)&lt;/b&gt;: The prefix of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NamespaceURI (string)&lt;/b&gt;: The namespace uri of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;NodeType (string)&lt;/b&gt;: The node type of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;InnerText (string)&lt;/b&gt;: The inner text of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;InnerXml (string)&lt;/b&gt;: The inner xml of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;OuterXml (string)&lt;/b&gt;: The outer xml of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SchemaInfo (string)&lt;/b&gt;: The schema info of the xml node.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XmlDocumentID (Guid)&lt;/b&gt;: (or XmlDocument) The identifier of the parent xml document.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ParentNodeID (Guid)&lt;/b&gt;: (or XmlNode) The identifier of the parent xml node, if applicable.&lt;/li&gt;
&lt;/ul&gt;
An &lt;b&gt;XmlNode&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;XmlNode&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XmlAttribute&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesHeader" xml:space="preserve">
    <value>Configuration Properties</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesParagraph1" xml:space="preserve">
    <value>Configuration properties in the &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language get and/or set global information that is used to aid in the management of solution models or output solution code or documents.  As configuration property data is global, a value set by one template can be used by subsequent template calls.  Often, configuration properties are managed by higher level templates.
&lt;br&gt;&lt;br&gt;
Configuration properties can only appear inside property tags (&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;).
&lt;br&gt;&lt;br&gt;
This section is broken down by each configuration property, describing:
&lt;ul&gt;
&lt;li&gt;Valid syntax for using the configuration property.&lt;/li&gt;
&lt;li&gt;What global information the configuration property can get and/or set.&lt;/li&gt;
&lt;li&gt;An example using the configuration property.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFeaturesHeader" xml:space="preserve">
    <value>Language Features</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFeaturesModelContextHeader" xml:space="preserve">
    <value>Model Context</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFeaturesModelContextParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+&lt;/b&gt; is a model oriented language, primarily due to its use of a notion called &lt;b&gt;Model Context&lt;/b&gt;, which makes it easier to utilize data in the solution model.  There are three forms of model context that can be utilized any time:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Stack Context (template based)&lt;/b&gt;: Stack context provides a means to get model data from the template's context stack.  When a template is called by the interpreter, a context stack is created and populated with an instance of the model element that the template is based on.  For example, if the template is an &lt;i&gt;Entity&lt;/i&gt; based template, the template will ALWAYS be called with an instance of &lt;i&gt;Entity&lt;/i&gt;, otherwise the interpreter will not execute the template.  The instance at the bottom of the stack is always considered the current instance in the template.  Statements such as &lt;b&gt;&lt;span style="color:blue"&gt;foreach&lt;/span&gt;&lt;/b&gt; and &lt;b&gt;&lt;span style="color:blue"&gt;with&lt;/span&gt;&lt;/b&gt; push instances (temporarily) onto the bottom of the stack.  Instances higher up the context stack can be easily accessed via the &lt;b&gt;&lt;span style="color:teal"&gt;../&lt;/span&gt;&lt;/b&gt; notation (&lt;b&gt;&lt;span style="color:teal"&gt;../../&lt;/span&gt;&lt;/b&gt;, &lt;b&gt;&lt;span style="color:teal"&gt;../../../&lt;/span&gt;&lt;/b&gt;, etc.).  The top of the context stack can always be reached with the &lt;b&gt;&lt;span style="color:teal"&gt;this&lt;/span&gt;&lt;/b&gt; keyword.&lt;br&gt;&lt;/li&gt;


&lt;li&gt;&lt;b&gt;Current Context (global)&lt;/b&gt;: Current context is a global context for a model element that is manually set within a template, and can be utilized by that template or other templates.  One current context can be maintained for each type of element, and is used or set by a property named &lt;i&gt;Current[elementType]&lt;/i&gt;.  For example the &lt;i&gt;CurrentEntity&lt;/i&gt; property is used to get or set the global current instance of &lt;i&gt;Entity&lt;/i&gt;.  These global current instances are not placed on template context stacks, and are not to be confused with the current instance within a template.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Structure Context (model structure based)&lt;/b&gt;: Structure context provides a means to get model data based on the parent/child relationships of an instance of a model element with other instances in the solution model.  For example, the &lt;i&gt;Entity&lt;/i&gt; element is the parent of the &lt;i&gt;Property&lt;/i&gt; element.  An instance of &lt;i&gt;Property&lt;/i&gt; can easily access any information from its parent &lt;i&gt;Entity&lt;/i&gt; (and the parent's parents, etc.).  An instance of &lt;i&gt;Entity&lt;/i&gt; can easily access any information from its child &lt;i&gt;Property&lt;/i&gt; instances.  Since the &lt;i&gt;Solution&lt;/i&gt; instance is ultimately the parent of all solution model data, any instance in the model can be retrieved through a search.  Structure context is a secondary context, and is based on a model instance that is obtained through stack context or current context.&lt;/li&gt;
&lt;/ul&gt;
Consider the following sample code for a &lt;i&gt;Solution&lt;/i&gt; code template to illustrate the use of &lt;b&gt;Model Context&lt;/b&gt;:</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFeaturesModelContextParagraph2" xml:space="preserve">
    <value>When this template is called, the &lt;i&gt;Solution&lt;/i&gt; instance (we will call it &lt;i&gt;My Solution&lt;/i&gt;) is passed to it and pushed onto the context stack.
&lt;br&gt;&lt;br&gt;
At line 1, the context stack looks like this:
&lt;ul&gt;
&lt;li&gt;&lt;span style="color:green"&gt;&lt;b&gt;My Solution&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
At line 4, a collection of each &lt;i&gt;Entity&lt;/i&gt; in the &lt;i&gt;Solution&lt;/i&gt; is gathered, and each &lt;i&gt;Entity&lt;/i&gt; encountered is pushed onto the context stack within the scope of the &lt;b&gt;&lt;span style="color:blue"&gt;foreach&lt;/span&gt;&lt;/b&gt; statement (lines 5-26).
&lt;br&gt;&lt;br&gt;
At line 6, the context stack looks like this (we will call the &lt;i&gt;Entity&lt;/i&gt; pushed onto the stack &lt;i&gt;Customer&lt;/i&gt;):
&lt;ul&gt;
&lt;li&gt;My Solution&lt;/li&gt;
&lt;li&gt;&lt;span style="color:green"&gt;&lt;b&gt;Customer&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
At line 6, the statement &lt;b&gt;&lt;span style="color:teal"&gt;CurrentEntity&lt;/span&gt; &lt;span style="color:bluel"&gt;=&lt;/span&gt; &lt;span style="color:teal"&gt;Entity&lt;/span&gt;&lt;/b&gt; is making use of current context, setting the current entity to the entity on the context stack (&lt;i&gt;Customer&lt;/i&gt;).
&lt;br&gt;&lt;br&gt;
Line 9 is making use of the stack context (the current item at the bottom of the stack) by accessing the &lt;b&gt;&lt;span style="color:teal"&gt;FeatureName&lt;/span&gt;&lt;/b&gt; and &lt;b&gt;&lt;span style="color:teal"&gt;EntityName&lt;/span&gt;&lt;/b&gt; properties of &lt;i&gt;Customer&lt;/i&gt;.  Properties found in parents of &lt;i&gt;Customer&lt;/i&gt; can also be accessed, which would be utilizing structure context (using the current item in the stack context).
&lt;br&gt;&lt;br&gt;
Line 10 is making use of structure context. The &lt;b&gt;&lt;span style="color:blue"&gt;in &lt;/span&gt; &lt;span style="color:teal"&gt;Feature&lt;/span&gt;&lt;/b&gt; clause in this &lt;b&gt;&lt;span style="color:blue"&gt;foreach&lt;/span&gt;&lt;/b&gt; statement is getting each &lt;i&gt;Entity&lt;/i&gt; that is in the same &lt;i&gt;Feature&lt;/i&gt; that is the parent of &lt;i&gt;Customer&lt;/i&gt; (we will call this feature &lt;i&gt;Customers&lt;/i&gt;).  Again, each &lt;i&gt;Entity&lt;/i&gt; encountered is pushed onto the context stack within the scope of the &lt;b&gt;&lt;span style="color:blue"&gt;foreach&lt;/span&gt;&lt;/b&gt; statement (lines 11-25).
&lt;br&gt;&lt;br&gt;
At line 12, the context stack looks like this (we will call the &lt;i&gt;Entity&lt;/i&gt; pushed onto the stack &lt;i&gt;Address&lt;/i&gt;):
&lt;ul&gt;
&lt;li&gt;My Solution&lt;/li&gt;
&lt;li&gt;Customer&lt;/li&gt;
&lt;li&gt;&lt;span style="color:green"&gt;&lt;b&gt;Address&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
At line 15, the &lt;b&gt;&lt;span style="color:blue"&gt;with&lt;/span&gt;&lt;/b&gt; statement is making use of stack context.  The &lt;b&gt;&lt;span style="color:teal"&gt;../&lt;/span&gt;&lt;/b&gt; expression gets the instance one up from the bottom of the stack (in this case &lt;i&gt;Customer&lt;/i&gt;), and this item is pushed onto the context stack within the scope of the &lt;b&gt;&lt;span style="color:blue"&gt;with&lt;/span&gt;&lt;/b&gt; statement (lines 16-24).
&lt;br&gt;&lt;br&gt;
At line 17, the context stack looks like this:
&lt;ul&gt;
&lt;li&gt;My Solution&lt;/li&gt;
&lt;li&gt;Customer&lt;/li&gt;
&lt;li&gt;Address&lt;/li&gt;
&lt;li&gt;&lt;span style="color:green"&gt;&lt;b&gt;Customer&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
At line 18, the &lt;b&gt;&lt;span style="color:teal"&gt;../Feature.FeatureName&lt;/span&gt;&lt;/b&gt; expression is making use of both stack context and structure context.  The &lt;b&gt;&lt;span style="color:teal"&gt;../&lt;/span&gt;&lt;/b&gt; part of this expression gets the item one up the stack (&lt;i&gt;Address&lt;/i&gt;), and the &lt;b&gt;&lt;span style="color:teal"&gt;Feature.FeatureName&lt;/span&gt;&lt;/b&gt; gets the name of the parent feature of &lt;i&gt;Address&lt;/i&gt;.
&lt;br&gt;&lt;br&gt;
Line 23 makes use of current context with the &lt;b&gt;&lt;span style="color:teal"&gt;CurrentEntity.EntityName&lt;/span&gt;&lt;/b&gt; expression.  This pulls the name of the &lt;i&gt;Customer&lt;/i&gt; entity, based not on the context stack, but on the assignment on line 6.
&lt;br&gt;&lt;br&gt;
Hopefully this example gives you a general idea on how you can utilize model context with the &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language!</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFeaturesModelsAndCodeHeader" xml:space="preserve">
    <value>Managing Models and Code</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFeaturesModelsAndCodeParagraph1" xml:space="preserve">
    <value>The &lt;b&gt;Mo+&lt;/b&gt; language has a few additional high level features geared towards managing solution models and output solutions in a model driven development process:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Not Strongly Typed&lt;/b&gt;: By design, the language is not strongly typed, in order to facilitate its primary purpose to manage models and textual output.  The &lt;b&gt;Mo+&lt;/b&gt; interpreter will freely convert built in properties, declared variables, and template content to/from their natural type and string values.  For example, if a template returns numeric results (such as 1, 2, ...), those results can be used in a numeric expression in one statement and be used to add to textual content in another.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Protected Areas&lt;/b&gt;: The language supports the notion of protected areas, areas within output solution files that should not be modified by &lt;b&gt;Mo+ Solution Builder&lt;/b&gt;.  This feature is key to maintaining customizations while updates based on the model need to occur.  Protected areas are defined through &lt;i&gt;Configuration Properties&lt;/i&gt;.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Output Filtering&lt;/b&gt;: The language supports retrieving previously existing output solution files, and performing various filtering and checking on that file data to aid in output decision making (see below).  &lt;b&gt;Ignored Areas&lt;/b&gt; and &lt;b&gt;Protected Areas&lt;/b&gt; (defined through &lt;i&gt;Configuration Properties&lt;/i&gt;) can be utilized to aid in the filtering process.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Output Decision Making&lt;/b&gt;: Most code generators update all of their generated code whenever they are executed.  The language within &lt;i&gt;Output&lt;/i&gt; areas of code and spec templates is specifically designed to make decisions as to &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;when&lt;/b&gt;, &lt;b&gt;where&lt;/b&gt;, and &lt;b&gt;how&lt;/b&gt; to update a piece of solution output (or solution model information).  Some examples of many kinds of decisions that can be made in updating the output include:
&lt;ul&gt;
&lt;li&gt;Don't update the output file if it is effectively the same as the generated file (outside of ignored and protected areas).&lt;/li&gt;
&lt;li&gt;Don't update the output file if it doesn't meet the criteria as a generated file.&lt;/li&gt;
&lt;li&gt;Don't update the output file if it has been marked as "don't touch me!".&lt;/li&gt;
&lt;li&gt;Make a backup of the previously generated file prior to updating the output file.&lt;/li&gt;
&lt;li&gt;Update the ouput file, maintaining customized content within protected areas.&lt;/li&gt;
&lt;li&gt;Update the output file in a temporary location instead of its "normal" location, based on criteria.&lt;/li&gt;
&lt;li&gt;Don't update an instance in the solution model, based on criteria.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFeaturesOOHeader" xml:space="preserve">
    <value>Similarities to Object Oriented Languages</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFeaturesOOParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+&lt;/b&gt; has a number of similarities to object oriented languages:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Model Structure (like objects)&lt;/b&gt;: &lt;b&gt;Mo+&lt;/b&gt; provides the ability to utilize built in elements in the solution model structure (such as &lt;i&gt;Entity&lt;/i&gt;, &lt;i&gt;Relationship&lt;/i&gt;, and &lt;i&gt;Property&lt;/i&gt;), and provides the ability for users to define their own elements in the model structure.  This is analogous to being able to utilize existing or create new objects in oo languages.  Specifically, spec templates provide users with the ability to create new elements in the model structure.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Model Data (like object instances)&lt;/b&gt;: &lt;b&gt;Mo+&lt;/b&gt; provides the ability to update solution model data by creating or updating instances of elements in the model structure.  This is analogous to being able to create or update object instances in oo languages.  Specifically, spec templates provide users with the ability to create and update solution model data.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Instance based properties and methods&lt;/b&gt;: Similar to oo languages, &lt;b&gt;Mo+&lt;/b&gt; provides the ability to utilize or create properties and methods to get information or perform tasks based on an instance in the model data.  Built in properties and methods provide access to solution model data and perform some tasks.  The &lt;i&gt;Content&lt;/i&gt; portions of spec and code templates can be utilized in the same manner as built in properties when used by other templates.  Templates can also have parameters, and be used like methods to return information or perform tasks.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Instance based iterators&lt;/b&gt;: Similar to oo languages, &lt;b&gt;Mo+&lt;/b&gt; provides the ability to iterate through collections of model data based on an instance in the model data.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Inheritance&lt;/b&gt;: The &lt;b&gt;Mo+&lt;/b&gt; provides a basic notion of inheritance for some elements in the solution model, such as &lt;i&gt;Entity&lt;/i&gt; and &lt;i&gt;ModelObject&lt;/i&gt;.  Instances of these elements can be linked to a base instance in the solution model.  Spec and code templates can then make use of this information to perform tasks based on the inheritance.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFeaturesParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+&lt;/b&gt; model oriented programming language has a rich set of features that are geared towards model driven development.  &lt;b&gt;Mo+&lt;/b&gt; has many similar features to object oriented languages, and its syntax is somewhat similar to &lt;b&gt;C#&lt;/b&gt; or &lt;b&gt;Java&lt;/b&gt;, but &lt;b&gt;Mo+&lt;/b&gt; also has a number of unique model oriented features.
&lt;br&gt;&lt;br&gt;
This section is intended to give the user an overall feel for the &lt;b&gt;Mo+&lt;/b&gt; language, and is broken down as follows:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Similarities to Object Oriented Languages&lt;/b&gt;: This section outlines the similarities of this model oriented language to object oriented languages.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Model Context&lt;/b&gt;: This section describes the unique features of the language that make it easier to utilize solution model data to perform various tasks.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Managing Models and Code&lt;/b&gt;: This section delves into some of the additional features of the language to make it easier to manage solution models and output code/model/document solutions.&lt;/li&gt;
&lt;/ul&gt;
Please review the additional sections in this language reference to get more specific details on the &lt;b&gt;Mo+&lt;/b&gt; language.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsHeader" xml:space="preserve">
    <value>Functions</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsParagraph1" xml:space="preserve">
    <value>Functions in the &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language perform some transformation on string and other data, or aid in getting single or multiple instances in the solution model.
&lt;br&gt;&lt;br&gt;
This section is broken down by each function, describing:
&lt;ul&gt;
&lt;li&gt;Valid syntax for using the function.&lt;/li&gt;
&lt;li&gt;What the function can do and how it can be used.&lt;/li&gt;
&lt;li&gt;An example using the function.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesHeader" xml:space="preserve">
    <value>Special Properties</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesParagraph1" xml:space="preserve">
    <value>Special properties in the &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language aid in getting model data or provide additional means for iterating through collections of model data.
&lt;br&gt;&lt;br&gt;
This section is broken down by each special property, describing:
&lt;ul&gt;
&lt;li&gt;Valid syntax for using the special property.&lt;/li&gt;
&lt;li&gt;What information the special property provides access to.&lt;/li&gt;
&lt;li&gt;An example using the special property.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsHeader" xml:space="preserve">
    <value>Statements</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsParagraph1" xml:space="preserve">
    <value>Statements form the heart of the &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language.  Like statements in other languages, &lt;b&gt;Mo+&lt;/b&gt; statements perform a wide variety of tasks such as iterating, calculating, and transforming.
&lt;br&gt;&lt;br&gt;
This section is broken down by each statement, describing:
&lt;ul&gt;
&lt;li&gt;Valid syntax for using the statement.&lt;/li&gt;
&lt;li&gt;Where the statement can be used.&lt;/li&gt;
&lt;li&gt;What actions the statement can perform.&lt;/li&gt;
&lt;li&gt;What the statement can do with examples.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTagsHeader" xml:space="preserve">
    <value>Template Tags</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTagsParagraph1" xml:space="preserve">
    <value>Template Tags (not to be confused with Tags in the solution model and the tag management feature) are begin and end indicators that instruct the &lt;b&gt;Mo+&lt;/b&gt; language interpreter to perform various actions.  All valid &lt;b&gt;Mo+&lt;/b&gt; language statements, properties, functions, and any other directives must be done with a tag group (begin tag and end tag combination).
&lt;br&gt;&lt;br&gt;
This section describes each of the valid tag types and what information can be placed within them.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesCallingHeader" xml:space="preserve">
    <value>Calling Templates</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesCallingParagraph1" xml:space="preserve">
    <value>In order to perform more complex tasks in updating solution models or output solutions, templates often call other templates to get content or induce output.
&lt;br&gt;&lt;br&gt;
A code template can call another code template, or a spec template can call another spec template if the following conditions are met:
&lt;ul&gt;
&lt;li&gt;The calling template identifies the called template properly by name.&lt;/li&gt;

&lt;li&gt;The calling template calls with a model context that matches the called template's node type.  In other words, if the called template is an &lt;i&gt;Entity&lt;/i&gt; template, the calling template must provide to the called template a model context that is an instance of &lt;i&gt;Entity&lt;/i&gt;.&lt;/li&gt;
&lt;/ul&gt;
A template can call another template:
&lt;ul&gt;
&lt;li&gt;Within a property tag (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%=%%&gt;&lt;/b&gt;&lt;/span&gt;), with or without parameters.  When called in this fashion the called template appends to the content (or output path) of the calling template.&lt;/li&gt;
&lt;li&gt;Within an output tag (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%&gt;%%&gt;&lt;/b&gt;&lt;/span&gt;), with or without parameters.  When called in this fashion the called template executes its output statements.  No change is done to the calling template content or output.&lt;/li&gt;
&lt;li&gt;Within an expression, with or without parameters.  When called in this fashion, the called template returns content that can be utilized in any expression, just like any built in property.  Some templates are created just for this purpose, in order to better manage and return the results of complex calculations.&lt;/li&gt;
&lt;/ul&gt;
If a template has one or more parameters:
&lt;ul&gt;
&lt;li&gt;The parameters are always considered optional.  The calling template may not provide parameters.&lt;/li&gt;
&lt;li&gt;If the calling template passes parameters to the called template, the parameter must be in a name/value pair (for example if a template called &lt;i&gt;MyTemplate&lt;/i&gt; has a parameter named &lt;i&gt;initialValue&lt;/i&gt;, then the calling template will make a call such as &lt;i&gt;MyTemplate(initialValue=someValue)&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;The order of the parameters supplied by the calling template is not important.&lt;/li&gt;
&lt;/ul&gt;
Consider the following blocks of template code to illustrate calling templates, with and without parameters.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesCallingParagraph2" xml:space="preserve">
    <value>In this example, we are following the template calls inside a &lt;i&gt;Solution&lt;/i&gt; template called &lt;span style="color:darkgreen"&gt;&lt;b&gt;EntityListTest&lt;/b&gt;&lt;/span&gt;, which is the larger block of code at the top.
&lt;br&gt;&lt;br&gt;
All of the template calls are done for each &lt;i&gt;Entity&lt;/i&gt; in the &lt;i&gt;Solution&lt;/i&gt; within the &lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; statement at line 5.
&lt;br&gt;&lt;br&gt;
At line 8, the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;CapitalEntityName&lt;/b&gt;&lt;/span&gt;&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;%%&gt;&lt;/b&gt;&lt;/span&gt; property tag calls the template &lt;span style="color:darkgreen"&gt;&lt;b&gt;CapitalEntityName&lt;/b&gt;&lt;/span&gt;, which returns the capitalized form of the entity name for the &lt;i&gt;Entity&lt;/i&gt; instance passed to it (via the stack context), and appends it to the calling template's content.
&lt;br&gt;&lt;br&gt;
At line 9, the &lt;span style="color:teal"&gt;&lt;b&gt;Solution.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;DescriptionBlurbTest&lt;/b&gt;&lt;/span&gt; call to the template &lt;span style="color:darkgreen"&gt;&lt;b&gt;DescriptionBlurbTest&lt;/b&gt;&lt;/span&gt; is used in an expression, without a parameter.  Since the called template only returns content if a parameter value is supplied, the result of this expression should always be null.  Also, since &lt;span style="color:darkgreen"&gt;&lt;b&gt;DescriptionBlurbTest&lt;/b&gt;&lt;/span&gt; is a &lt;i&gt;Solution&lt;/i&gt; template, the &lt;i&gt;Solution&lt;/i&gt; instance must be passed to it.
&lt;br&gt;&lt;br&gt;
At line 13, the &lt;span style="color:teal"&gt;&lt;b&gt;Solution.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;DescriptionBlurbTest&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;description = &lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; call to the template &lt;span style="color:darkgreen"&gt;&lt;b&gt;DescriptionBlurbTest&lt;/b&gt;&lt;/span&gt; is used in an expression, this time with a parameter (the description of the entity).  In this case a description blurb (non null) may be returned for the expression.  No change to the calling template content is done.&lt;br&gt;&lt;br&gt;
At line 15, the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Solution.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;DescriptionBlurbTest&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;description = &lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;%%&gt;&lt;/b&gt;&lt;/span&gt; property tag calls the template &lt;span style="color:darkgreen"&gt;&lt;b&gt;DescriptionBlurbTest&lt;/b&gt;&lt;/span&gt; with a parameter (the description of the entity).  A description blurb is returned and appended to the calling template's content, if a description is found.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesCodeWorkflowHeader" xml:space="preserve">
    <value>Code Template Workflow</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesCodeWorkflowParagraph1" xml:space="preserve">
    <value>Code templates are key in the overall model driven development workflow, as they are the building blocks used to manage output solution code, models, and other documents.
&lt;br&gt;&lt;br&gt;
Code templates are utilized when the output solution is updated, which is invoked when the &lt;i&gt;Update Output Solution&lt;/i&gt; on the &lt;i&gt;Solution&lt;/i&gt; node is selected and executed.
&lt;br&gt;&lt;br&gt;
The following diagram illustrates how code templates are utilized when the &lt;i&gt;Update Output Solution&lt;/i&gt; command for a solution is executed.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesCodeWorkflowParagraph2" xml:space="preserve">
    <value>When the &lt;i&gt;Update Output Solution&lt;/i&gt; command for a solution is executed to update an output solution:
&lt;ul&gt;
&lt;li&gt;The &lt;i&gt;Code Interpreter&lt;/i&gt; is invoked.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;The template that is defined in the &lt;i&gt;TemplatePath&lt;/i&gt; property of the &lt;i&gt;Solution&lt;/i&gt; is called by the &lt;i&gt;Code Interpreter&lt;/i&gt;.  This template's output is invoked, and is called with the &lt;i&gt;Solution&lt;/i&gt; instance.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;The &lt;i&gt;Code Interpreter&lt;/i&gt; processes the &lt;b&gt;Mo+&lt;/b&gt; language statements in the &lt;i&gt;Solution&lt;/i&gt; template's &lt;i&gt;Output&lt;/i&gt; section.  While processing these statements:
&lt;ul&gt;
&lt;li&gt;The template may get its own content as defined by statements in the &lt;i&gt;Content&lt;/i&gt; section.&lt;/li&gt;
&lt;li&gt;The template may update a file for the output solution.&lt;/li&gt;
&lt;li&gt;The template may call other templates, invoking their output.&lt;/li&gt;
&lt;li&gt;The template may call other templates, getting their content for output decision making.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;If the &lt;i&gt;Solution&lt;/i&gt; has one or more &lt;i&gt;Projects&lt;/i&gt;, the &lt;i&gt;Solution&lt;/i&gt; template can update project output by invoking the output for each relevant &lt;i&gt;Project&lt;/i&gt; via the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:magenta"&gt;&lt;b&gt;Template&lt;/b&gt;&lt;/span&gt;&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;%%&gt;&lt;/b&gt;&lt;/span&gt; output property, where &lt;span style="color:magenta"&gt;&lt;b&gt;Template&lt;/b&gt;&lt;/span&gt; will get the template that is defined in the &lt;i&gt;TemplatePath&lt;/i&gt; field for that &lt;i&gt;Project&lt;/i&gt;.&lt;/li&gt;

&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesHeader" xml:space="preserve">
    <value>Templates</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesParagraph1" xml:space="preserve">
    <value>Templates are the blocks of code written in the &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language, and are used to create models and solution output such as source code, models, scripts, and other documents.
&lt;br&gt;&lt;br&gt;
Each template is stored as a separate file, and as part of a template library can be used by more than one solution to suit your needs and promote best practices.
&lt;br&gt;&lt;br&gt;
This section describes templates in more detail, broken down as follows:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Template Types&lt;/b&gt;: This section defines the two different types of templates: code templates and spec templates.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Template Sections&lt;/b&gt;: This section defines each section within a template and valid content within them.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Calling Templates&lt;/b&gt;: This section describes how templates can be called and used by other templates, with and without parameter.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Code Template Workflow&lt;/b&gt;: This section describes how code templates are used in the overall model driven development workflow of managing output solutions.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Spec Template Workflow&lt;/b&gt;: This section describes how spec templates are used in the overall model driven development workflow of managing solution models.&lt;/li&gt;

&lt;/ul&gt;
See the &lt;i&gt;User Interface Reference&lt;/i&gt; for more details on editing and debugging templates.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesSectionsHeader" xml:space="preserve">
    <value>Template Sections</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesSectionsParagraph1" xml:space="preserve">
    <value>All templates are divided into the following 3 sections:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Configuration&lt;/b&gt;: This section determines how the template is to be called and stored on disk.  The template must have a name, which is how the template is known by other templates as well as the file name.  The node indicates what kind of node will be passed as the root model instance when the template is called.  For example, if the template is an &lt;i&gt;Entity&lt;/i&gt; template, the template will ALWAYS be called with an instance of &lt;i&gt;Entity&lt;/i&gt; (such as a Customer entity).&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Content&lt;/b&gt;: This section is used as needed to return content to any calling template.  This section can include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;span style="color:darkgreen"&gt;Comments&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Evaluation tags (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%:%%&gt;&lt;/b&gt;&lt;/span&gt;) with valid statements, expressions, and tags for building upon the content (no output expressions or statements such as &lt;b&gt;&lt;span style="color:magenta"&gt;add remove update delete insert forfiles&lt;/span&gt;&lt;/b&gt; are allowed).&lt;/li&gt;
&lt;li&gt;Text tags (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%-%%&gt;&lt;/b&gt;&lt;/span&gt;) with &lt;span style="color:darkorange"&gt;&lt;b&gt;raw text&lt;/b&gt;&lt;/span&gt; for building upon the content.&lt;/li&gt;
&lt;li&gt;Property tags (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%=%%&gt;&lt;/b&gt;&lt;/span&gt;) with valid expressions for building upon the content.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Output&lt;/b&gt;: This section is used as needed to update output files (for code templates) or update the solution model (for spec templates).  This section can include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&lt;span style="color:darkgreen"&gt;Comments&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Evaluation tags (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%:%%&gt;&lt;/b&gt;&lt;/span&gt;) with valid statements, expressions, and tags for building upon the output path or decision making on updating output (files for code templates, solution model for spec templates).  Output expressions and statements such as &lt;b&gt;&lt;span style="color:magenta"&gt;update delete insert remove forfiles&lt;/span&gt;&lt;/b&gt; (for code templates) and &lt;b&gt;&lt;span style="color:magenta"&gt;add delete&lt;/span&gt;&lt;/b&gt; (for spec templates) are allowed.&lt;/li&gt;
&lt;li&gt;Text tags (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%-%%&gt;&lt;/b&gt;&lt;/span&gt;) with &lt;span style="color:darkorange"&gt;&lt;b&gt;raw text&lt;/b&gt;&lt;/span&gt; for building upon the output path.&lt;/li&gt;
&lt;li&gt;Property tags (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%=%%&gt;&lt;/b&gt;&lt;/span&gt;) with valid expressions for building upon the output path.&lt;/li&gt;
&lt;li&gt;Output tags (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%&gt;%%&gt;&lt;/b&gt;&lt;/span&gt;) with valid calls to other templates to induce output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesSpecWorkflowHeader" xml:space="preserve">
    <value>Spec Template Workflow</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesSpecWorkflowParagraph1" xml:space="preserve">
    <value>Spec templates are the key building blocks for updating solution models in the overall model driven development workflow.
&lt;br&gt;&lt;br&gt;
Spec templates are utilized when the solution model is updated, which is invoked when the &lt;i&gt;Solution (Mo+ Model Doc)&lt;/i&gt; is opened, or when the &lt;i&gt;Compile Specification Source Data&lt;/i&gt; on the &lt;i&gt;Solution&lt;/i&gt; node is selected and executed.
&lt;br&gt;&lt;br&gt;
The following diagram illustrates how spec templates are utilized when the &lt;i&gt;Compile Specification Source Data&lt;/i&gt; command for a solution is executed.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesSpecWorkflowParagraph2" xml:space="preserve">
    <value>When the &lt;i&gt;Compile Specification Source Data&lt;/i&gt; command for a solution is executed to update a solution model:
&lt;ul&gt;
&lt;li&gt;The &lt;i&gt;Specification Interpreter&lt;/i&gt; is invoked.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;The &lt;i&gt;Specification Interpreter&lt;/i&gt; gets each &lt;i&gt;SpecificationSource&lt;/i&gt; (&lt;i&gt;DatabaseSource&lt;/i&gt; or &lt;i&gt;XmlSource&lt;/i&gt;) for the &lt;i&gt;Solution&lt;/i&gt; by their defined &lt;i&gt;Order&lt;/i&gt;.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;For each &lt;i&gt;SpecificationSource&lt;/i&gt; encountered:
&lt;ul&gt;
&lt;li&gt;The &lt;i&gt;Specification Interpreter&lt;/i&gt; loads the information from the source database (or xml file), and puts this data into specification elements within a &lt;i&gt;SqlDatabase&lt;/i&gt; (or &lt;i&gt;XmlDocument&lt;/i&gt;).  Putting this data into specification elements removes depdencies on source platforms within the &lt;b&gt;Mo+&lt;/b&gt; language.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;The template that is defined in the &lt;i&gt;TemplatePath&lt;/i&gt; property of the &lt;i&gt;SpecificationSource&lt;/i&gt; is called by the &lt;i&gt;Specification Interpreter&lt;/i&gt;.  This template's output is invoked, and is called with the &lt;i&gt;SpecificationSource&lt;/i&gt; instance.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;The &lt;i&gt;Specification Interpreter&lt;/i&gt; processes the &lt;b&gt;Mo+&lt;/b&gt; language statements in the &lt;i&gt;SpecificationSource&lt;/i&gt; template's &lt;i&gt;Output&lt;/i&gt; section.  While processing these statements:
&lt;ul&gt;
&lt;li&gt;The template may get its own content as defined by statements in the &lt;i&gt;Content&lt;/i&gt; section.&lt;/li&gt;
&lt;li&gt;The template may update elements in the solution model.&lt;/li&gt;
&lt;li&gt;The template may call other templates, invoking their output.&lt;/li&gt;
&lt;li&gt;The template may call other templates, getting their content for output decision making.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesTypesHeader" xml:space="preserve">
    <value>Template Types</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTemplatesTypesParagraph1" xml:space="preserve">
    <value>There are two different types of templates, each with a specific purpose within a model driven development process:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Code Templates&lt;/b&gt;: Code Templates are designed for updating textual solution output of any kind, including source code in any language.  Code templates are required if you want to produce code or other solutions using &lt;b&gt;Mo+ Solution Builder&lt;/b&gt;.  Code template files have an extension of &lt;b&gt;.mpt&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
Some key features of code templates include:
&lt;ul&gt;
&lt;li&gt;Access to any instance in the solution model.&lt;/li&gt;
&lt;li&gt;Ability to build textual content with a rich set of expressions and statements.&lt;/li&gt;
&lt;li&gt;Ability to create and update output files with flexible decision making.&lt;/li&gt;
&lt;li&gt;Ability to call other code templates to get and build upon textual content.&lt;/li&gt;
&lt;li&gt;Ability to call other code templates as part of expressions.&lt;/li&gt;
&lt;li&gt;Ability to induce other code templates to produce output.&lt;/li&gt;
&lt;/ul&gt;
Code templates &lt;b&gt;cannot&lt;/b&gt;:
&lt;ul&gt;
&lt;li&gt;Update any instance in the solution model.&lt;/li&gt;
&lt;li&gt;Access any specification elements and data from specification sources.&lt;/li&gt;
&lt;li&gt;Call or use spec templates.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Spec Templates&lt;/b&gt;: Spec Templates are designed for creating and updating solution models, while retaining any customizations entered by users.  Spec templates are only required if you want to update the solution model from external specification sources such as databases or xml files.  Spec template files have an extension of &lt;b&gt;.mps&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
Some key features of spec templates include:
&lt;ul&gt;
&lt;li&gt;Access to data from specification sources via specification elements.&lt;/li&gt;
&lt;li&gt;Access to any instance in the solution model.&lt;/li&gt;
&lt;li&gt;Ability to build textual content with a rich set of expressions and statements.&lt;/li&gt;
&lt;li&gt;Ability to create and update solution models with flexible decision making.&lt;/li&gt;
&lt;li&gt;Ability to call other spec templates to get and build upon textual content.&lt;/li&gt;
&lt;li&gt;Ability to call other spec templates as part of expressions.&lt;/li&gt;
&lt;li&gt;Ability to induce other spec templates to produce output.&lt;/li&gt;
&lt;/ul&gt;
Spec templates &lt;b&gt;cannot&lt;/b&gt;:
&lt;ul&gt;
&lt;li&gt;Update any content on disk.&lt;/li&gt;
&lt;li&gt;Access any files other than indirectly via specification sources.&lt;/li&gt;
&lt;li&gt;Call or use code templates.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;/ul&gt;
See the &lt;i&gt;User Interface Reference&lt;/i&gt; for more details on how the user interface organizes the templates into libraries, and on getting sample template libraries.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_StartupFAQHeader" xml:space="preserve">
    <value>Frequently Asked Questions</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupFAQParagraph1" xml:space="preserve">
    <value>Following are some frequently asked questions about using &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; and programming in the &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language.
&lt;br&gt;&lt;br&gt;
Additional qestions can be found on the source code download site &lt;a href="MoPlus.CodePlex.com"&gt;MoPlus.CodePlex.com&lt;/a&gt;, and on the &lt;b&gt;Mo+&lt;/b&gt; membership site &lt;a href="ModelOrientedPlus.com"&gt;ModelOrientedPlus.com&lt;/a&gt;.  You can ask questions in either of these sites as well as on &lt;a href="stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; (using the Mo+ tag).</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupFAQTemplatesHeader" xml:space="preserve">
    <value>How can I deal with complex or inefficient templates?</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupFAQTemplatesParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Mo+ Solution Builder&lt;/b&gt; can create and maintain large, complex solutions utilizing spec and code templates written in the &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language.  Sometimes, as the set of templates grows to meet the needs for the solution, the templates may seem to be a bit hard to manage, being either too complex or inefficient.  If you are creating a new template library, it's always good to start simple, generating simpler things, then adding complexity.
&lt;br&gt;&lt;br&gt;
Here are some things to look out for in dealing with harder to manage template libraries:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Inefficiency&lt;/b&gt;: If executing the templates for model or code generation takes longer than expected, operations done within the templates may be too complex, or complex operations may be called more times than necessary.  For efficiency, you will want to reduce the number of complex operations, while still meeting your needs.  One way to do this is to encapsulate a complex operation that is utilized over and over again into a separate template.  This has 2 advantages:
&lt;ol&gt;
&lt;li&gt;The encapsulated template can be used like any other property, making your templates easier to read and use.&lt;/li&gt;
&lt;li&gt;The &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; interpreter will often cache the template results per instance in the model, so the complex operation will be called fewer times.  When you update the model or your solution, you can make note in the &lt;i&gt;Output&lt;/i&gt; window of how many template calls were cached.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Too Many Templates&lt;/b&gt;: A larger number of templates is generally good for encapsulation and efficiency (see above).  But, the sheer number of templates may be hard to manage in terms of what they do and when to use them.  Utilizing a naming convention for your templates, and a convention for using the &lt;i&gt;Category&lt;/i&gt; field of the templates will be a great help as the number of templates grows.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Solution Design Not Ideally Oriented To Your Model&lt;/b&gt;: When creating a code, model, or document solution, it is best to start with good code samples that make use of your organization's or community best practices.  If building the code templates to meet the code generation needs for your solution seems too complex, it is a good idea to review your solution design from time to time for any improvements that may make it easier to generate from your model.  For example, common interfaces and methods that are understood by code classes for many model elements will often reduce code template complexity, while also reducing the amount of unnecessary generated code.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Mo+ Feature Needs&lt;/b&gt;: It may turn out that you may need more information in the solution model structure to better meet your needs, or that there should be some additional features in the &lt;b&gt;Mo+&lt;/b&gt; language or the &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; UI to do what you want to do in a simpler manner.  Feedback of this nature is greatly appreciated for future improvements.&lt;/li&gt;
&lt;/ul&gt;
The sample template libraries may suffer from one or more of the above issues, and it is desired to improve and expand on the sample libraries for the community.  Please provide any feedback on those samples!</value>
    <comment>For help</comment>
  </data>
  <data name="Help_UIReferenceTemplatesDebuggingParagraph2" xml:space="preserve">
    <value>When a debug job is complete (either finished or stopped), a results dialog comes up with two sections as indicated by tabs on the left hand side:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Sample Code&lt;/b&gt;: This shows the results of the content (or output) at the end of the debug run (completed or stopped).  No changes are performed to the model or disk during debugging.  If the results are for output, the sample code indicates what items would have been added (+), deleted (-), or modified (&gt;).&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Abstract Syntax Tree&lt;/b&gt;: This shows the results of how your code was parsed.  Open up the nodes in the tree, compare line numbers, etc., to validate that your code was interpreted as you expected.&lt;/li&gt;
&lt;/ul&gt;
When debug jobs are started, the debugger may pick a model element at random in order to execute the template.  Say for example that you are debugging an Entity template, and you have specific entities such as Customer and Order.  If you are running the template standalone, the debugger must choose some entity, so it picks one at random.  If you want to be more definitive as to which elements are chosen, create a solution or specification source level test case template to call the template you want to debug with the item(s) you want to.
&lt;br&gt;&lt;br&gt;
To assist in debugging and template usage, you will notice in the &lt;i&gt;Solution Builder&lt;/i&gt; window that templates and related folders turn green (or red) after running template tasks such as building models, generating code, or debugging.  Mouse over any template with green text and you will see some basic statistics on how many times the template was called and how many template calls it made.  Templates that caused errors (and folders containing templates in error) will be in red.</value>
    <comment>For help.</comment>
  </data>
  <data name="ModelContext" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>ModelContext.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TemplateCalls" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>TemplateCalls.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Help_LanguageReferenceStatementsAddTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:magenta"&gt;&lt;b&gt;add&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Current&lt;/b&gt;&lt;/span&gt;xxx&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;:  xxx is a valid element type in the solution model, such as &lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In the &lt;i&gt;Output&lt;/i&gt; areas of spec templates only.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;add&lt;/i&gt; statement is used to add an instance to the solution model.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:magenta"&gt;&lt;b&gt;add&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;CurrentEntity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
will add the current &lt;i&gt;Entity&lt;/i&gt; instance to the solution model.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;add&lt;/i&gt; statement only works in conjunction with Current Context, as Stack or Structure Context refers to an instance already in the solution model (see the &lt;i&gt;Language Features&lt;/i&gt; section for more on model context).</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsBreakTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;break&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;break&lt;/i&gt; statement is used to break out of a sequence of statements, including iterations such as &lt;span style="color:blue"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:blue"&gt;&lt;b&gt;while&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:blue"&gt;&lt;b&gt;forfiles&lt;/b&gt;&lt;/span&gt;, and a clause in a  &lt;span style="color:blue"&gt;&lt;b&gt;case&lt;/b&gt;&lt;/span&gt; statement.  The &lt;i&gt;break&lt;/i&gt; statement can appear within a &lt;span style="color:blue"&gt;&lt;b&gt;with&lt;/b&gt;&lt;/span&gt; or &lt;span style="color:blue"&gt;&lt;b&gt;if&lt;/b&gt;&lt;/span&gt; statement block, where its primary function is to break out of a parent iteration.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;if (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;SomeCondition&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt; == true)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;break&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
will break the iteration through each &lt;i&gt;Entity&lt;/i&gt; if &lt;i&gt;SomeCondition&lt;/i&gt; is met.  If any statements appear in the if statement after the break, they will not be executed.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsClearTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;clear&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;clear&lt;/i&gt; statement is used to clear a template's &lt;i&gt;Content (Text)&lt;/i&gt; (if the statement is in the template's &lt;i&gt;Context&lt;/i&gt; area), or clear a template's &lt;i&gt;Output (Path)&lt;/i&gt; (if the statement is in the template's &lt;i&gt;Output&lt;/i&gt; area).  Any statements that appear after the &lt;i&gt;clear&lt;/i&gt; statement can continue to append to the template's content (or output).</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsDeleteTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:magenta"&gt;&lt;b&gt;delete&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;&lt;/b&gt;&lt;/span&gt;filePath&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:magenta"&gt;&lt;b&gt;delete&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Current&lt;/b&gt;&lt;/span&gt;xxx&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;:  (for code templates) &lt;i&gt;filePath&lt;/i&gt; is a valid &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:brown"&gt;&lt;b&gt;template call&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:slateblue"&gt;&lt;b&gt;literal&lt;/b&gt;&lt;/span&gt;, or any math operation combination of expressions (expression1 + expression2, etc.) that yields a full path for a file.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;:  (for spec templates) &lt;i&gt;xxx&lt;/i&gt; is a valid element type in the solution model, such as &lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In the &lt;i&gt;Output&lt;/i&gt; areas of code and spec templates.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;delete&lt;/i&gt; statement is used to delete a file (for code templates) and delete an instance from the solution model (for spec templates).
&lt;br&gt;&lt;br&gt;
For example, in a code template:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:magenta"&gt;&lt;b&gt;delete&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"c:\\temp\\test.txt"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
will delete the file at "c:\\temp\\test.txt".

&lt;br&gt;&lt;br&gt;
For example, in a spec template:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:magenta"&gt;&lt;b&gt;delete&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;CurrentEntity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
will delete the current &lt;i&gt;Entity&lt;/i&gt; instance from the solution model.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;delete&lt;/i&gt; statement in a spec template only works in conjunction with Current Context (see the &lt;i&gt;Language Features&lt;/i&gt; section for more on model context).</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsForeachTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;element&lt;/b&gt;&lt;/span&gt; &lt;i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;in&lt;/b&gt;&lt;/span&gt; inExp &lt;span style="color:blue"&gt;&lt;b&gt;where&lt;/b&gt;&lt;/span&gt; whereExp &lt;span style="color:blue"&gt;&lt;b&gt;limit&lt;/b&gt;&lt;/span&gt; n &lt;span style="color:blue"&gt;&lt;b&gt;sort&lt;/b&gt;&lt;/span&gt; property sortDirection&lt;/i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;) {&amp;nbsp;[statements]&amp;nbsp;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: element is a valid model element such as &lt;i&gt;Entity&lt;/i&gt; (or for spec templates a valid specification element such as &lt;i&gt;SqlTable&lt;/i&gt;).&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: inExp for an optional in clause is an element as above, a current context instance such as &lt;i&gt;CurrentEntity&lt;/i&gt;, with or without a collection helper method such as &lt;span style="color:blue"&gt;&lt;b&gt;FindAll&lt;/b&gt;&lt;/span&gt;.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: whereExp for an optional where clause specifies a valid logical expression based on properties (built in or template calls) of the &lt;i&gt;element&lt;/i&gt;.  Logical expressions can be combined in and (&amp;&amp;) and or (||) expressions, and nested via parentheses.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: n for an optional limit clause specifies the maximum number of items to iterate through.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: property for an optional sort clause is a valid property within &lt;i&gt;element&lt;/i&gt;.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: sortDirection for an optional sort clause can be &lt;span style="color:blue"&gt;&lt;b&gt;asc&lt;/b&gt;&lt;/span&gt; (ascending) or &lt;span style="color:blue"&gt;&lt;b&gt;desc&lt;/b&gt;&lt;/span&gt; (descending).&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;[statements]&lt;/i&gt; is a set of zero or more valid &lt;b&gt;Mo+&lt;/b&gt; language statements.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;foreach&lt;/i&gt; statement is used to iterate through a collection of model or specification elements of a single type, and execute a number of statements for each item in that collection.  There are many flexible ways to get collections using the optional &lt;i&gt;in&lt;/i&gt;, &lt;i&gt;where&lt;/i&gt;, &lt;i&gt;sort&lt;/i&gt;, and &lt;i&gt;limit&lt;/i&gt; clauses.  As the &lt;i&gt;foreach&lt;/i&gt; statement iterates through its collection, it pushes the item in the collection onto the context stack at the beginning of the &lt;i&gt;foreach&lt;/i&gt; block (of statements) and pops it off the stack at the end of the &lt;i&gt;foreach&lt;/i&gt; block.  Thus, there is no need to use a variable to track the current item in the iteration.
&lt;br&gt;&lt;br&gt;
An example of using &lt;i&gt;foreach&lt;/i&gt; in its simplest form:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This &lt;i&gt;foreach&lt;/i&gt; will iterate through each &lt;i&gt;Entity&lt;/i&gt;, getting the collection from the current instance via stack context, or the first parent of that instance that has an entity collection via structure context.  For example, if the current instance via stack context is a &lt;i&gt;Method&lt;/i&gt; (which doesn't have an entity collection), the parent of &lt;i&gt;Method&lt;/i&gt; is &lt;i&gt;Entity&lt;/i&gt; (which doesn't have an entity collection), and the parent of that &lt;i&gt;Entity&lt;/i&gt; is &lt;i&gt;Feature&lt;/i&gt; (which does have an entity collection), and the collection used by the foreach is for that &lt;i&gt;Feature&lt;/i&gt;.
&lt;br&gt;&lt;br&gt;
Another example using more clauses:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;in&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Solution&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;FindAll&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;FeatureName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;, &lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Domain"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;where&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityName.StartsWith&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Customer"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;&amp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityName.EndsWith&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"s"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;limit&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;2&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;sort&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;desc)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This &lt;i&gt;foreach&lt;/i&gt; will get all &lt;i&gt;Entity&lt;/i&gt; instances from the &lt;i&gt;Solution&lt;/i&gt; with a feature name of "Domain", based on the in clause.  It will then filter out the list, based on the where clause, to entity names that start with "Customer" and don't end in "s".  The iteration will be sorted descending by &lt;i&gt;EntityName&lt;/i&gt;, based on the sort clause.  The iteration will only include up to the first 2 items found, based on the limit clause.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; Use the &lt;i&gt;ItemIndex&lt;/i&gt; property to find which zero based item you are within the &lt;i&gt;foreach&lt;/i&gt; .</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsReturnTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;return&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;return&lt;/i&gt; statement is used to halt execution of any additional statements in the template, even if the &lt;i&gt;return&lt;/i&gt; statement is within nested iterations.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;if (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;SomeCondition&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt; == true)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;return&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
will halt the execution of the template in the middle of the iteration through each &lt;i&gt;Entity&lt;/i&gt; if &lt;i&gt;SomeCondition&lt;/i&gt; is met.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTagsEvaluationHeader" xml:space="preserve">
    <value>Evaluation Tags</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTagsEvaluationParagraph1" xml:space="preserve">
    <value>Evaluation tags define an evaluation area (or scope) in a template where any number of decision making or other actions can occur.  Evaluation areas perform the "heavy hitting" within a template.
&lt;br&gt;&lt;br&gt;
An evaluation area is begun with the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%:&lt;/b&gt;&lt;/span&gt; tag, and ended with the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;%%&gt;&lt;/b&gt;&lt;/span&gt; tag.  Evaluation tags cannot appear within the area (or scope) of another tag.
&lt;br&gt;&lt;br&gt;
Evaluation tags can contain the following within their area (or scope):
&lt;ul&gt;
&lt;li&gt;&lt;span style="color:darkgreen"&gt;&lt;b&gt;Comments&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Valid &lt;span style="color:blue"&gt;&lt;b&gt;statements&lt;/b&gt;&lt;/span&gt;, including &lt;span style="color:teal"&gt;&lt;b&gt;properties&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:slateblue"&gt;&lt;b&gt;literals&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:brown"&gt;&lt;b&gt;template calls&lt;/b&gt;&lt;/span&gt; and &lt;span style="color:red"&gt;&lt;b&gt;trace&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Text tags (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%-%%&gt;&lt;/b&gt;&lt;/span&gt;) containing any amount of &lt;span style="color:darkorange"&gt;&lt;b&gt;raw text&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Property tags (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%=%%&gt;&lt;/b&gt;&lt;/span&gt;) containing valid &lt;span style="color:brown"&gt;&lt;b&gt;expressions&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Output tags (&lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%&gt;%%&gt;&lt;/b&gt;&lt;/span&gt;) containing valid &lt;span style="color:magenta"&gt;&lt;b&gt;expressions&lt;/b&gt;&lt;/span&gt; (in &lt;i&gt;Output&lt;/i&gt; areas of templates only).&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTagsOutputHeader" xml:space="preserve">
    <value>Output Tags</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTagsOutputParagraph1" xml:space="preserve">
    <value>Output tags define an area (or scope) in a template where another template's output is induced.  The template whose output is induced may output its own content, output other content, or induce the output of other templates.  The template whose output is induced makes further decision making as to if, where, when, and what to output.
&lt;br&gt;&lt;br&gt;
An output area is begun with the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%&gt;&lt;/b&gt;&lt;/span&gt; tag, and ended with the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;%%&gt;&lt;/b&gt;&lt;/span&gt; tag.  Output tags can only appear in the &lt;i&gt;Output&lt;/i&gt; sections of templates, and can appear outside the scope of other tags, or within the scope of evaluation tags.
&lt;br&gt;&lt;br&gt;
Output tags can contain the following within their area (or scope):
&lt;ul&gt;
&lt;li&gt;&lt;span style="color:magenta"&gt;&lt;b&gt;Template calls&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span style="color:magenta"&gt;&lt;b&gt;Template&lt;/b&gt;&lt;/span&gt; property (for calling a &lt;i&gt;Project&lt;/i&gt; template.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTagsPropertyHeader" xml:space="preserve">
    <value>Property Tags</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTagsPropertyParagraph1" xml:space="preserve">
    <value>Property tags define an area (or scope) in a template where the result of an expression is to be appended to the template &lt;i&gt;Content (Text)&lt;/i&gt; or &lt;i&gt;Output (Path)&lt;/i&gt;.
&lt;br&gt;&lt;br&gt;
A property area is begun with the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%=&lt;/b&gt;&lt;/span&gt; tag, and ended with the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;%%&gt;&lt;/b&gt;&lt;/span&gt; tag.  Property tags can appear outside the scope of other tags, or within the scope of evaluation tags.
&lt;br&gt;&lt;br&gt;
Property tags can contain the following within their area (or scope):
&lt;ul&gt;
&lt;li&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Properties&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;Literals&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span style="color:brown"&gt;&lt;b&gt;Template calls&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;

If the property area is within the &lt;i&gt;Content&lt;/i&gt; section of a template, the result of the expression is appended to the template's &lt;i&gt;Content (Text property)&lt;/i&gt;.  If the text area is within the &lt;i&gt;Output&lt;/i&gt; section of a template, the result of the expression is appended to the template's &lt;i&gt;Output (Path property)&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTagsTextHeader" xml:space="preserve">
    <value>Text Tags</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceTagsTextParagraph1" xml:space="preserve">
    <value>Text tags define an area (or scope) in a template where raw text is to be appended to the template &lt;i&gt;Content (Text)&lt;/i&gt; or &lt;i&gt;Output (Path)&lt;/i&gt;.
&lt;br&gt;&lt;br&gt;
A text area is begun with the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;&lt;%%-&lt;/b&gt;&lt;/span&gt; tag, and ended with the &lt;span style="background-color:yellow;color:gray"&gt;&lt;b&gt;%%&gt;&lt;/b&gt;&lt;/span&gt; tag.  Text tags can appear outside the scope of other tags, or within the scope of evaluation tags.
&lt;br&gt;&lt;br&gt;
Text tags only contain &lt;span style="color:darkorange"&gt;&lt;b&gt;raw text&lt;/b&gt;&lt;/span&gt;.  If the text area is within the &lt;i&gt;Content&lt;/i&gt; section of a template, that text is appended to the template's &lt;i&gt;Content (Text property)&lt;/i&gt;.  If the text area is within the &lt;i&gt;Output&lt;/i&gt; section of a template, that text is appended to the template's &lt;i&gt;Output (Path property)&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsForfilesTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;forfiles (&lt;/b&gt;&lt;/span&gt;directory&lt;span style="color:blue"&gt;&lt;b&gt;, &amp;nbsp;&lt;/b&gt;&lt;/span&gt;extension&lt;span style="color:blue"&gt;&lt;b&gt;) {&amp;nbsp;[statements]&amp;nbsp;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: directory is the full path of a file directory.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: extension is the name of the file extension, including the ".", such as ".txt".&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;[statements]&lt;/i&gt; is a set of zero or more valid &lt;b&gt;Mo+&lt;/b&gt; language statements.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In code template &lt;i&gt;Output&lt;/i&gt; areas only.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;forfiles&lt;/i&gt; statement is used to iterate through a directory of files of a particular extension, in order to perform some action on them, such as deleting outdated generated files.  An example of using &lt;i&gt;forfiles&lt;/i&gt;:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;forfiles (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;ProjectDirectory&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;".txt"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This &lt;i&gt;forfiles&lt;/i&gt; will iterate through each file in the directory specified by ProjectDirectory, including subdirectories.  Within this iteration, the &lt;span style="color:teal"&gt;&lt;b&gt;ItemPath&lt;/b&gt;&lt;/span&gt; property provides the path of the file, and the &lt;span style="color:teal"&gt;&lt;b&gt;ItemFile&lt;/b&gt;&lt;/span&gt; property provides the contents of the file.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsIfTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;if (&lt;/b&gt;&lt;/span&gt;expression&lt;span style="color:blue"&gt;&lt;b&gt;)&amp;nbsp;{&amp;nbsp;[statements]&amp;nbsp;}&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;else if (&lt;/b&gt;&lt;/span&gt;expression&lt;span style="color:blue"&gt;&lt;b&gt;)&amp;nbsp;{&amp;nbsp;[statements]&amp;nbsp;}&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;else (&lt;/b&gt;&lt;/span&gt;expression&lt;span style="color:blue"&gt;&lt;b&gt;)&amp;nbsp;{&amp;nbsp;[statements]&amp;nbsp;}&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;expression&lt;/i&gt; specifies a valid logical expression based on available properties, templates calls, and other functions.  Logical expressions can be combined in and (&amp;&amp;) and or (||) expressions, and nested via parentheses.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;[statements]&lt;/i&gt; is a set of zero or more valid &lt;b&gt;Mo+&lt;/b&gt; language statements.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;if&lt;/i&gt; statement is used to perform logic based decisions and execute a set of statements based on conditions.  There can be any number of &lt;i&gt;else if&lt;/i&gt; conditions following the first &lt;i&gt;if&lt;/i&gt; condition.  An &lt;i&gt;else&lt;/i&gt; condition can also appear at the end.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;if (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;MethodTypeCode&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;||&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;SomeOtherProperty&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put if statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;else if (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;YetOtherProperty&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put else if statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;else&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put else statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
If the first expression is true, the if statements will be excecuted, else if the second expression is true, the else if statements will be executed, otherwise the else statements will be executed.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsInsertTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:magenta"&gt;&lt;b&gt;insert&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;path, matchingText, insertText&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:magenta"&gt;&lt;b&gt;insert&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;path, beginTag, endTag, matchingText, insertText&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;path&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the full path of the file to be updated.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;matchingText&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the text in the file to perform the insert before.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;insertText&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the text to be inserted.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;beginTag&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies text in the file that must occur before the &lt;i&gt;matchingText&lt;/i&gt;.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;endTag&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies text in the file that must occur after the &lt;i&gt;matchingText&lt;/i&gt;.  When these tags are used,  the &lt;i&gt;insertText&lt;/i&gt; is inserted into the file before the matching &lt;i&gt;beginTag&lt;/i&gt;.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In the &lt;i&gt;Output&lt;/i&gt; area of code templates only.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;insert&lt;/i&gt; statement is used to insert one block of textual content into an existing file.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:magenta"&gt;&lt;b&gt;insert&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:slateblue"&gt;&lt;b&gt;"c:\\tmp\\test.xml"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:slateblue"&gt;&lt;b&gt;"&amp;lt;node"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:slateblue"&gt;&lt;b&gt;"&amp;lt;/node&amp;gt;"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:slateblue"&gt;&lt;b&gt;"Class"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:slateblue"&gt;&lt;b&gt;"&amp;lt;node Name="Another Class"&amp;gt;&amp;lt;/node&amp;gt;"&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This inserts a node containing &lt;i&gt;Another Class&lt;/i&gt; before another node containing &lt;i&gt;Class&lt;/i&gt; in the &lt;i&gt;test.xml&lt;/i&gt; file.
&lt;br&gt;&lt;br&gt;The &lt;i&gt;insert&lt;/i&gt; statement generally works best for inserting small blocks of text in a file that has identifiable tags or nodes (such as xml), and does not make use of the protected areas feature.  If the file being updated is more completely managed by &lt;b&gt;Mo+ Solution Builder&lt;/b&gt;, and/or if protected areas are being used, use the &lt;span style="color:blue"&gt;&lt;b&gt;update&lt;/b&gt;&lt;/span&gt; statement to replace the existing content, preserving protected areas.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsLogTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;log(&lt;/b&gt;&lt;/span&gt;logGroup, logName, logValue&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;logGroup&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies a log group, for grouping related items.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;logName&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the (unique) name of the item to be logged.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;logValue&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies a value to be logged.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;log&lt;/i&gt; statement is used to log values into a global log, organized by group name, and then by item name.  Items are retrieved from the log using the &lt;span style="color:teal"&gt;&lt;b&gt;LogValue&lt;/b&gt;&lt;/span&gt; method.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;log(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Entities"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;EntityID&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%-&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;LogValue(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;"Entities"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
The first &lt;i&gt;foreach&lt;/i&gt; logs the ID of each &lt;i&gt;Entity&lt;/i&gt; encountered, and the second &lt;i&gt;foreach&lt;/i&gt; retrieves the ID for each &lt;i&gt;Entity&lt;/i&gt;.  Since the values are stored globally, they can be retrieved inside of other templates.  If values do not need to be stored globally, using the &lt;span style="color:blue"&gt;&lt;b&gt;var&lt;/b&gt;&lt;/span&gt; statement is preferable and more convenient.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsParamTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;param&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;parameterName&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;parameterName&lt;/i&gt; is the name of the parameter, an alphanumeric string that doesn't conflict with other parameters, variables, or reserved words.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;param&lt;/i&gt; statement is used to declare a parameter for a template.  Parameter values cannot be set within the template, but are passed in via a calling template.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;param&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;myParameter&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;myParameter&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
will return the value of the parameter that is passed via the calling template.  A &lt;i&gt;param&lt;/i&gt; statement can be called anywhere before the parameter value is used in expressions or properties.
&lt;br&gt;&lt;br&gt;
All parameters are condidered optional, and if used by the calling template are referred to by name (order of parameters is not important).  See the &lt;i&gt;Calling Templates&lt;/i&gt; section for more details on calling templates with parameter values.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsProgressTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;progress&lt;/b&gt;&lt;/span&gt;&lt;i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;work&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;work&lt;/i&gt;, an optional parameter, is any expression (property, template call, literal, etc.) that results in a numeric value for the amount of work for calculating progress.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;progress&lt;/i&gt; statement is used set the amount of work and report progress during &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; tasks such as updating the solution model and updating output solutions.  The &lt;i&gt;progress&lt;/i&gt; statement with a parameter sets the work, and without the parameter increments the progress.  The use of the &lt;i&gt;progress&lt;/i&gt; statement will not affect solution model or output solution data, but will merely be reflected in the progress bar by &lt;b&gt;Mo+ Solution Builder&lt;/b&gt;.  Ideally, the amount of progress work is set early on by a high level &lt;i/&gt;Solution&lt;/i&gt; or &lt;i&gt;SpecificationSource&lt;/i&gt; template, and progress reporting smoothly goes from 0 to 100 percent of the work.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;progress(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityCount&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;progress&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
will set the amount of progress work equal to the number of entities, then bump up progress for each entity.  Usually, much more activity happens (such as updating files or solution model elements) prior to reaching another &lt;i&gt;progress&lt;/i&gt; statement.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsRemoveTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:magenta"&gt;&lt;b&gt;remove&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;path, matchingText&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:magenta"&gt;&lt;b&gt;remove&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;path, beginTag, endTag, matchingText&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;path&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the full path of the file to be updated.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;matchingText&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the text in the file to remove.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;beginTag&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies text in the file that must occur before the &lt;i&gt;matchingText&lt;/i&gt;.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;endTag&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies text in the file that must occur after the &lt;i&gt;matchingText&lt;/i&gt;.  When these tags are used,  everything between the matching &lt;i&gt;beginTag&lt;/i&gt; and the matching &lt;i&gt;endTag&lt;/i&gt; is removed.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In the &lt;i&gt;Output&lt;/i&gt; area of code templates only.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;remove&lt;/i&gt; statement is used to remove one block of textual content from an existing file.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:magenta"&gt;&lt;b&gt;remove&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"c:\\tmp\\test.xml"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:slateblue"&gt;&lt;b&gt;"&amp;lt;node"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:slateblue"&gt;&lt;b&gt;"&amp;lt;/node&amp;gt;"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:slateblue"&gt;&lt;b&gt;"Class"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This removes the node containing &lt;i&gt;Class&lt;/i&gt; from the &lt;i&gt;test.xml&lt;/i&gt; file.
&lt;br&gt;&lt;br&gt;The &lt;i&gt;remove&lt;/i&gt; statement generally works best for removing small blocks of text in a file that has identifiable tags or nodes (such as xml), and does not make use of the protected areas feature.  If the file being updated is more completely managed by &lt;b&gt;Mo+ Solution Builder&lt;/b&gt;, and/or if protected areas are being used, use the &lt;span style="color:blue"&gt;&lt;b&gt;update&lt;/b&gt;&lt;/span&gt; statement to replace the existing content, preserving protected areas.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsVarTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;var&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;variableName&lt;/b&gt;&lt;/span&gt;&lt;i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;intialValue&lt;/i&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;variableName&lt;/i&gt; is the name of the variable, an alphanumeric string that doesn't conflict with other parameters, variables, or reserved words.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;intialValue&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the initial value for the variable.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;var&lt;/i&gt; statement is used to declare a variable for a template.  Variables can be used anytime after they have been declared.  As &lt;b&gt;Mo+&lt;/b&gt; is not a strongly typed language, the type is based on what the variable is set to, and can be reset with a value of a different type.  Setting variable values to instances in the solution model currently is not supported.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;var&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;0&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
will just return the value of the variable that was declared and set with an initial value.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceOperatorsHeader" xml:space="preserve">
    <value>Operators</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceOperatorsParagraph1" xml:space="preserve">
    <value>Operators in the &lt;b&gt;Mo+&lt;/b&gt; model oriented programming language are similar to other languages, and perform various forms of retrieving, testing, and/or transformation of data.
&lt;br&gt;&lt;br&gt;
This section is broken down by each operator type, describing:
&lt;ul&gt;
&lt;li&gt;Valid syntax for using the operator.&lt;/li&gt;
&lt;li&gt;How the operator can be used.&lt;/li&gt;
&lt;li&gt;What the operator can do with examples.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsSwitchTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;switch (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;{&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;i&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;case &lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;literal&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;:&amp;nbsp;[statements]&amp;nbsp;break&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;default:&amp;nbsp;[statements]&amp;nbsp;break&lt;/b&gt;&lt;/span&gt;
&lt;/i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;property&lt;/i&gt; is a property of a valid model element such as &lt;i&gt;Entity&lt;/i&gt; (or for spec templates a property of a valid specification element such as &lt;i&gt;SqlTable&lt;/i&gt;).&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;literal&lt;/i&gt; is a literal value for the property, and can be a string, numeric, true, false, or null.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;[statements]&lt;/i&gt; is a set of zero or more valid &lt;b&gt;Mo+&lt;/b&gt; language statements.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;switch&lt;/i&gt; statement is used to perform logic based decisions and execute a set of statements based on one or more &lt;i&gt;case&lt;/i&gt; conditions.  There can be any number of &lt;i&gt;case&lt;/i&gt; clauses (with one or more &lt;i&gt;case&lt;/i&gt; conditions).  A &lt;i&gt;default&lt;/i&gt; clause can also appear after all &lt;i&gt;case&lt;/i&gt; clauses.  Each &lt;i&gt;case&lt;/i&gt; or &lt;i&gt;default&lt;/i&gt; clause can include a set of statements and is terminated with a &lt;i&gt;break&lt;/i&gt; statement.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;switch (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;MethodTypeCode&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;span style="color:blue"&gt;&lt;b&gt;case &lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;:&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;span style="color:blue"&gt;&lt;b&gt;case &lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;2&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;:&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put first statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;break&lt;/b&gt;&lt;/span&gt;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;span style="color:blue"&gt;&lt;b&gt;case &lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;3&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;:&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put second statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;break&lt;/b&gt;&lt;/span&gt;&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp&lt;span style="color:blue"&gt;&lt;b&gt;default:&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put default statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;break&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
The first set of statements is executed if the method type is 1 or 2, the second set of statements is executed if the method type is 3, else the default set of statements are executed.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsTraceTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:red"&gt;&lt;b&gt;trace&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;expression&lt;i&gt;&amp;nbsp;[+ expression, ...], path&lt;/i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;expression&lt;/i&gt; is any expression (property, template call, literal, etc.) that is to appear in the trace.  Can be a concatenation of multiple expressions.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;path&lt;/i&gt; is any expression (property, template call, literal, etc.) that results in a full path file name.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;trace&lt;/i&gt; statement is used to send trace output to the &lt;b&gt;Mo+ Solution Builder&lt;/b&gt; &lt;i&gt;Output&lt;/i&gt; window.  The trace information includes location and model context information where encountered in the template, and includes the supplied &lt;i&gt;expression&lt;/i&gt;.  If a &lt;i&gt;path&lt;/i&gt; is supplied, the trace output is also appended to the file supplied.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:red"&gt;&lt;b&gt;trace&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:blue"&gt;&lt;b&gt; + &lt;/b&gt;&lt;/span&gt;
&lt;span style="color:slateblue"&gt;&lt;b&gt;": "&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:blue"&gt;&lt;b&gt; + &lt;/b&gt;&lt;/span&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;EntityID&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;, &lt;/b&gt;&lt;/span&gt;
&lt;span style="color:slateblue"&gt;&lt;b&gt;"c:\\tmp\\trace.txt"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This provides some trace information, including the entity name and id, and also appends the information to a trace file.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsUpdateTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:magenta"&gt;&lt;b&gt;update&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;filePath&lt;i&gt;, fileText&lt;/i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;:  &lt;i&gt;filePath&lt;/i&gt; is a valid &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:brown"&gt;&lt;b&gt;template call&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:slateblue"&gt;&lt;b&gt;literal&lt;/b&gt;&lt;/span&gt;, or any math operation combination of expressions (expression1 + expression2, etc.) that yields a full path for a file.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;:  &lt;i&gt;fileText&lt;/i&gt;, for optional custom text, is a valid &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:brown"&gt;&lt;b&gt;template call&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:slateblue"&gt;&lt;b&gt;literal&lt;/b&gt;&lt;/span&gt;, or any expression that specifies the text to be put into the file.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In the &lt;i&gt;Output&lt;/i&gt; areas of code templates only.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;update&lt;/i&gt; statement is used to update the contents of a file, preserving protected areas, if protected areas are specified (see the &lt;i&gt;Configuration Properties&lt;/i&gt; section for setting up protected areas).  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:magenta"&gt;&lt;b&gt;update&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Path&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
will update the file with the template's content as specified in the &lt;i&gt;Content&lt;/i&gt; section to the file specified by the &lt;i&gt;Path&lt;/i&gt; property in the &lt;i&gt;Output&lt;/i&gt; section.

&lt;br&gt;&lt;br&gt;
Files can be updated with custom text, such as:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:magenta"&gt;&lt;b&gt;update&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"c:\\tmp\\tmp.txt"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"hello world"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This updates the tmp.txt file to contain the text "hello world".</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsWhileTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;while (&lt;/b&gt;&lt;/span&gt;expression&lt;span style="color:blue"&gt;&lt;b&gt;) {&amp;nbsp;[statements]&amp;nbsp;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;:  &lt;i&gt;expression&lt;/i&gt; specifies a valid logical expression based on available properties, templates calls, and other functions.  Logical expressions can be combined in and (&amp;&amp;) and or (||) expressions, and nested via parentheses.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;[statements]&lt;/i&gt; is a set of zero or more valid &lt;b&gt;Mo+&lt;/b&gt; language statements.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;while&lt;/i&gt; statement is used to continue to execute a set of statements while an &lt;i&gt;expression&lt;/i&gt; is true.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;while (&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:brown"&gt;&lt;b&gt;OneCondition&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;&amp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;AnotherCondition&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This &lt;i&gt;while&lt;/i&gt; will execute its statements until either &lt;i&gt;OneCondition&lt;/i&gt; or &lt;i&gt;AnotherCondition&lt;/i&gt; are no longer true.  The statements within a &lt;i&gt;while&lt;/i&gt; statement should insure that the &lt;i&gt;expression&lt;/i&gt; eventually evaluates to false to prevent an infinite loop.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsWithTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;with (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;element&lt;/b&gt;&lt;/span&gt; &lt;i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;from&lt;/b&gt;&lt;/span&gt; fromExp&lt;/i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;) {&amp;nbsp;[statements]&amp;nbsp;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;element&lt;/i&gt; is a valid model element such as &lt;i&gt;Entity&lt;/i&gt; (or for spec templates a valid specification element such as &lt;i&gt;SqlTable&lt;/i&gt;).&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;fromExp&lt;/i&gt; for an optional from clause is an element as above, a current context instance such as &lt;i&gt;CurrentEntity&lt;/i&gt;, with or without a &lt;span style="color:blue"&gt;&lt;b&gt;Find&lt;/b&gt;&lt;/span&gt; method.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;[statements]&lt;/i&gt; is a set of zero or more valid &lt;b&gt;Mo+&lt;/b&gt; language statements.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;with&lt;/i&gt; statement is used to push a model element onto the context stack for using that model element within the &lt;i&gt;with&lt;/i&gt; statemnent block.  The model element, if found, is pushed onto the context stack at the beginning of the &lt;i&gt;with&lt;/i&gt; block (of statements) and pops it off the stack at the end of the &lt;i&gt;with&lt;/i&gt; block.
&lt;br&gt;&lt;br&gt;
An example of using &lt;i&gt;with&lt;/i&gt; in its simplest form:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;with (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Solution&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This &lt;i&gt;with&lt;/i&gt; will push the &lt;i&gt;Solution&lt;/i&gt; onto the context stack, so that each of the statements in the block are working with the &lt;i&gt;Solution&lt;/i&gt;, by default.
&lt;br&gt;&lt;br&gt;
Another example using a find:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;with (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;from&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Solution&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Find&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;, &lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Customer"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;))&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This &lt;i&gt;with&lt;/i&gt; will search for an &lt;i&gt;Entity&lt;/i&gt; named "Customer", and if found will push that item onto the context stack and execute the statements within the block.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsFindMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;modelContext&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Find&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;expression&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;modelContext&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Find&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;modelContext&lt;/i&gt; refers (by any form of model context) to an instance of a solution model element (or for spec templates can be an instance of a specification element), from which the search is performed.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;expression&lt;/i&gt; is a value to search by, and is one of the following:
&lt;ul&gt;
&lt;li&gt;A declared &lt;span style="color:brown"&gt;&lt;b&gt;variable&lt;/b&gt;&lt;/span&gt; or &lt;span style="color:brown"&gt;&lt;b&gt;parameter&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;span style="color:brown"&gt;&lt;b&gt;template&lt;/b&gt;&lt;/span&gt; call, with or without parameters.&lt;/li&gt;
&lt;li&gt;A solution model element &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A specification element &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;SqlTableName&lt;/b&gt;&lt;/span&gt; (spec templates only).&lt;/li&gt;
&lt;li&gt;Any of the above transformed with a supported &lt;span style="color:teal"&gt;&lt;b&gt;function&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;Substring&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Any combination of expressions (can be nested with parentheses) that results in a searchable value.&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;property&lt;/i&gt; refers to a valid property of the element being searched via the &lt;i&gt;with&lt;/i&gt; statement.  If supplied, is used to match to the &lt;i&gt;expression&lt;/i&gt; value for the find.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas, used in a &lt;span style="color:blue"&gt;&lt;b&gt;with&lt;/b&gt;&lt;/span&gt; statement &lt;span style="color:blue"&gt;&lt;b&gt;from&lt;/b&gt;&lt;/span&gt; clause.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Find&lt;/i&gt; function returns an instance of the solution model (or specification), if found, and is used by the &lt;i&gt;with&lt;/i&gt; statement to push that instance onto the context stack.  If a &lt;i&gt;property&lt;/i&gt; parameter is supplied, the search is done based on that property's value.  Otherwise, the search is done against the primary id of the model (or specification) element in the &lt;i&gt;with&lt;/i&gt; statement.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;with (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;from&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Solution&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Find&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;, &lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Customer"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;))&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This use of &lt;i&gt;Find&lt;/i&gt; will search for an &lt;i&gt;Entity&lt;/i&gt; with an entity name of "Customer", and if found will push that item onto the context stack and execute the statements within the block.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceOperatorsArithmeticHeader" xml:space="preserve">
    <value>Arithmetic Operators</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceOperatorsArithmeticParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;+&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;-&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;*&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;/&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;expression&lt;/i&gt; is one of the following:
&lt;ul&gt;
&lt;li&gt;A declared &lt;span style="color:brown"&gt;&lt;b&gt;variable&lt;/b&gt;&lt;/span&gt; or &lt;span style="color:brown"&gt;&lt;b&gt;parameter&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;span style="color:brown"&gt;&lt;b&gt;template&lt;/b&gt;&lt;/span&gt; call, with or without parameters.&lt;/li&gt;
&lt;li&gt;A solution model element &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A specification element &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;SqlTableName&lt;/b&gt;&lt;/span&gt; (spec templates only).&lt;/li&gt;
&lt;li&gt;Any of the above transformed with a supported &lt;span style="color:teal"&gt;&lt;b&gt;function&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;Substring&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Any combination of expressions (can be nested with parentheses) that results in an arithmetically transformable value.&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The arithmetic operators are used to transform two expressions into a result.  Specifically:
&lt;ul&gt;
&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;+&amp;nbsp;&lt;/b&gt;&lt;/span&gt;operator adds the left hand &lt;i&gt;expression&lt;/i&gt; and the the right hand &lt;i&gt;expression&lt;/i&gt;.  If either &lt;i&gt;expression&lt;/i&gt; is not numeric, a string concatenation is performed.&lt;/li&gt;

&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;-&amp;nbsp;&lt;/b&gt;&lt;/span&gt;operator subtracts the right hand &lt;i&gt;expression&lt;/i&gt; from the left hand &lt;i&gt;expression&lt;/i&gt;.  If either &lt;i&gt;expression&lt;/i&gt; is not numeric, no operation is performed.&lt;/li&gt;

&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;*&amp;nbsp;&lt;/b&gt;&lt;/span&gt;operator multiplies the left hand &lt;i&gt;expression&lt;/i&gt; and the right hand &lt;i&gt;expression&lt;/i&gt;.  If either &lt;i&gt;expression&lt;/i&gt; is not numeric, no operation is performed.&lt;/li&gt;

&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;/&amp;nbsp;&lt;/b&gt;&lt;/span&gt;operator divides the left hand &lt;i&gt;expression&lt;/i&gt; by the right hand &lt;i&gt;expression&lt;/i&gt;.  If either &lt;i&gt;expression&lt;/i&gt; is not numeric, no operation is performed.&lt;/li&gt;
&lt;/ul&gt;
An example using the&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;+&amp;nbsp;&lt;/b&gt;&lt;/span&gt;operator:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;var&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;0&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;+&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"hello"&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;+&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;" world"&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
If the first &lt;i&gt;+&lt;/i&gt; operation yields a numeric result of 2, while the second &lt;i&gt;+&lt;/i&gt; operation yields a string concatenation of "hello world".</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceOperatorsAssignmentHeader" xml:space="preserve">
    <value>Assignment Operator</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceOperatorsAssignmentParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: assignableProperty &lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;value&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;assignableProperty&lt;/i&gt; is one of the following:
&lt;ul&gt;
&lt;li&gt;A declared &lt;span style="color:brown"&gt;&lt;b&gt;variable&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;i&gt;Current&lt;/i&gt; model element, such as &lt;span style="color:teal"&gt;&lt;b&gt;CurrentEntity&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A declared &lt;span style="color:brown"&gt;&lt;b&gt;parameter&lt;/b&gt;&lt;/span&gt;, as part of a call to another template.&lt;/li&gt;
&lt;li&gt;An assignable property of a solution model element, such as &lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt; (spec template &lt;i&gt;Output&lt;/i&gt; areas only).&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;value&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the value to be assigned to the &lt;i&gt;assignableProperty&lt;/i&gt;.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas (in the &lt;i&gt;Output&lt;/i&gt; area of spec templates only for assignments to solution model properties).
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;=&lt;/i&gt; assignment operator is used to assign a value to an instance, property, or variable.  Some example assignments include:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;var&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;0&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;myVariable&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;+&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;CurrentEntity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;CurrentEntity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;MyEntityName&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
The first assignment initializes a declared variable.  The second assignment updates that variable with an addition expression.  The third assignment sets the current context &lt;i&gt;CurrentEntity&lt;/i&gt; to the &lt;i&gt;Entity&lt;/i&gt; found via the context stack.  The last assignment sets the name of that &lt;i&gt;Entity&lt;/i&gt; to the results from a template call.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceOperatorsLogicalHeader" xml:space="preserve">
    <value>Logical Operators</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceOperatorsLogicalParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;&amp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;||&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;expression&lt;/i&gt; is one of the following:
&lt;ul&gt;
&lt;li&gt;A declared &lt;span style="color:brown"&gt;&lt;b&gt;variable&lt;/b&gt;&lt;/span&gt; or &lt;span style="color:brown"&gt;&lt;b&gt;parameter&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;span style="color:brown"&gt;&lt;b&gt;template&lt;/b&gt;&lt;/span&gt; call, with or without parameters.&lt;/li&gt;
&lt;li&gt;A solution model element &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A specification element &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;SqlTableName&lt;/b&gt;&lt;/span&gt; (spec templates only).&lt;/li&gt;
&lt;li&gt;Any of the above transformed with a supported &lt;span style="color:teal"&gt;&lt;b&gt;function&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;Substring&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Any combination of expressions (can be nested with parentheses) that results in a logically comparable value.&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The logical operators are used to compare an expression on the left to the expression on the right, and return a value of &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; or &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;.  Specifically:
&lt;ul&gt;
&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;&amp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt; operator returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if the left hand &lt;i&gt;expression&lt;/i&gt; is true &lt;i&gt;and&lt;/i&gt; the right hand &lt;i&gt;expression&lt;/i&gt; is true, else returns &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;||&amp;nbsp;&lt;/b&gt;&lt;/span&gt; operator returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if the left hand &lt;i&gt;expression&lt;/i&gt; is true &lt;i&gt;or&lt;/i&gt; the right hand &lt;i&gt;expression&lt;/i&gt; is true, else returns &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
For logical operators, each &lt;i&gt;expression&lt;/i&gt; should return &lt;i&gt;true&lt;/i&gt; or &lt;i&gt;false&lt;/i&gt;.  An example using logical operators:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;if ((&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;MethodTypeCode&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;gt;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;&amp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;SomeOtherProperty&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;true)&amp;nbsp;||&amp;nbsp;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;MethodTypeCode&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;4&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;&amp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;YetOtherProperty&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;true))&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    &lt;span style="color:darkgreen"&gt;&lt;b&gt;// do something if the conditions are met...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
If the first &lt;i&gt;&amp;&amp;&lt;/i&gt; operation is true, the &lt;i&gt;if&lt;/i&gt; statemenent result will be true, else if the second &lt;i&gt;&amp;&amp;&lt;/i&gt; operation is true, the &lt;i&gt;if&lt;/i&gt; statemenent result will be true, otherwise, the &lt;i&gt;if&lt;/i&gt; statement result will be false.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceOperatorsRelationalHeader" xml:space="preserve">
    <value>Relational Operators</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceOperatorsRelationalParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;!=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;gt;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;gt;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Syntax&lt;/b&gt;: expression&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;expression&lt;/i&gt; is one of the following:
&lt;ul&gt;
&lt;li&gt;A declared &lt;span style="color:brown"&gt;&lt;b&gt;variable&lt;/b&gt;&lt;/span&gt; or &lt;span style="color:brown"&gt;&lt;b&gt;parameter&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;span style="color:brown"&gt;&lt;b&gt;template&lt;/b&gt;&lt;/span&gt; call, with or without parameters.&lt;/li&gt;
&lt;li&gt;A solution model element &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A specification element &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;SqlTableName&lt;/b&gt;&lt;/span&gt; (spec templates only).&lt;/li&gt;
&lt;li&gt;Any of the above transformed with a supported &lt;span style="color:teal"&gt;&lt;b&gt;function&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;Substring&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Any combination of expressions (can be nested with parentheses) that results in a relationally comparable value.&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The relational operators are used to compare an expression on the left to the expression on the right, and return a value of &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; or &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;.  Specifically:
&lt;ul&gt;
&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt; operator returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if the left hand &lt;i&gt;expression&lt;/i&gt; is equal to the right hand &lt;i&gt;expression&lt;/i&gt;, else returns &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;!=&amp;nbsp;&lt;/b&gt;&lt;/span&gt; operator returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if the left hand &lt;i&gt;expression&lt;/i&gt; is not equal to the right hand &lt;i&gt;expression&lt;/i&gt;, else returns &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;gt;&amp;nbsp;&lt;/b&gt;&lt;/span&gt; operator returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if the left hand &lt;i&gt;expression&lt;/i&gt; is greater than the right hand &lt;i&gt;expression&lt;/i&gt;, else returns &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;/b&gt;&lt;/span&gt; operator returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if the left hand &lt;i&gt;expression&lt;/i&gt; is less than the right hand &lt;i&gt;expression&lt;/i&gt;, else returns &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;gt;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt; operator returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if the left hand &lt;i&gt;expression&lt;/i&gt; is greater than or equal to the right hand &lt;i&gt;expression&lt;/i&gt;, else returns &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;The&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt; operator returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if the left hand &lt;i&gt;expression&lt;/i&gt; is less than or equal to the right hand &lt;i&gt;expression&lt;/i&gt;, else returns &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
For relational operators other than (non) equality, the expressions will be compared numerically if possible, otherwise they will be compared as strings.  An example using relational operators:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;if ((&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;MethodTypeCode&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;gt;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;&amp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;SomeOtherProperty&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;true)&amp;nbsp;||&amp;nbsp;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;MethodTypeCode&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;4&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;&amp;&amp;&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;YetOtherProperty&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;==&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;true))&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    &lt;span style="color:darkgreen"&gt;&lt;b&gt;// do something if the conditions are met...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
If the first &lt;i&gt;&amp;&amp;&lt;/i&gt; operation is true, the &lt;i&gt;if&lt;/i&gt; statemenent result will be true, else if the second &lt;i&gt;&amp;&amp;&lt;/i&gt; operation is true, the &lt;i&gt;if&lt;/i&gt; statemenent result will be true, otherwise, the &lt;i&gt;if&lt;/i&gt; statement result will be false.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsColumnMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;Column(&lt;/b&gt;&lt;/span&gt;columnName&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;columnName&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the name of the column in the current record to get data from.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Column&lt;/i&gt; function is used to retrieve a value from a column of a database record.  To be used in conjunction with the &lt;span style="color:teal"&gt;&lt;b&gt;Record&lt;/b&gt;&lt;/span&gt; item (special property) in a &lt;span style="color:teal"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt; statement.  For example, in an &lt;i&gt;Entity&lt;/i&gt; template:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Record&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%-&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkorange"&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Column&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Description"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This will retrieve the "Description" column data for each record for the &lt;i&gt;Entity&lt;/i&gt;.  For this to work, the &lt;i&gt;Entity&lt;/i&gt; instance must be created in the solution model from a &lt;i&gt;DatabaseSource&lt;/i&gt; database table.  This table data is then read during the &lt;i&gt;foreach&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsFileMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;File&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;path&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;path&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the full path to get textual data from.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In the &lt;i&gt;Output&lt;/i&gt; areas of code templates only.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;File&lt;/i&gt; function is used to retrieve the texual contents of a file (usually in the output solution directory).  This function is often used in output decision making, to determine if the file should be updated.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;File&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"c:\\tmp\\test.txt"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; would be the contents of the indicated file.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsFindAllMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;modelContext&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;FindAll&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;expression&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;modelContext&lt;/i&gt; refers (by any form of model context) to an instance of a solution model element (or for spec templates can be an instance of a specification element), from which the search is performed.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;property&lt;/i&gt; refers to a valid property of the element being searched via the &lt;i&gt;foreach&lt;/i&gt; statement.  Is used to match to the &lt;i&gt;expression&lt;/i&gt; value for the find.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;expression&lt;/i&gt; is a value to search by, and is one of the following:
&lt;ul&gt;
&lt;li&gt;A declared &lt;span style="color:brown"&gt;&lt;b&gt;variable&lt;/b&gt;&lt;/span&gt; or &lt;span style="color:brown"&gt;&lt;b&gt;parameter&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;span style="color:brown"&gt;&lt;b&gt;template&lt;/b&gt;&lt;/span&gt; call, with or without parameters.&lt;/li&gt;
&lt;li&gt;A solution model element &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;A specification element &lt;span style="color:teal"&gt;&lt;b&gt;property&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;SqlTableName&lt;/b&gt;&lt;/span&gt; (spec templates only).&lt;/li&gt;
&lt;li&gt;Any of the above transformed with a supported &lt;span style="color:teal"&gt;&lt;b&gt;function&lt;/b&gt;&lt;/span&gt;, such as &lt;span style="color:teal"&gt;&lt;b&gt;Substring&lt;/b&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Any combination of expressions (can be nested with parentheses) that results in a searchable value.&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas, used in a &lt;span style="color:blue"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt; statement &lt;span style="color:blue"&gt;&lt;b&gt;in&lt;/b&gt;&lt;/span&gt; clause.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;FindAll&lt;/i&gt; function returns a collection of a solution model (or specification) element, and is used by the &lt;i&gt;foreach&lt;/i&gt; statement to push items in that collection onto the context stack.  The search is done based on the &lt;i&gt;property&lt;/i&gt;'s value.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;in&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Solution&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;FindAll&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;FeatureName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;, &lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Domain"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;))&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This use of &lt;i&gt;FindAll&lt;/i&gt; will get all &lt;i&gt;Entity&lt;/i&gt; instances from the &lt;i&gt;Solution&lt;/i&gt; with a feature name of "Domain".</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsLogMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;LogValue(&lt;/b&gt;&lt;/span&gt;logGroup, logName&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;logGroup&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies a log group, for grouping related items.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;logName&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the (unique) name of the item to be logged.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;LogValue&lt;/i&gt; function is used to retrieve log values from a global log, organized by group name, and then by item name.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;log(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Entities"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;EntityID&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%-&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;LogValue(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;"Entities"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
The first &lt;i&gt;foreach&lt;/i&gt; logs the ID of each &lt;i&gt;Entity&lt;/i&gt; encountered, and the second &lt;i&gt;foreach&lt;/i&gt; retrieves the ID for each &lt;i&gt;Entity&lt;/i&gt;.  The log values can be retrieved inside of other templates.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringCamelCaseParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: string&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;CamelCase&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has a string value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;CamelCase&lt;/i&gt; function is used to convert a string value to camel case.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;PropertyName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;CamelCase&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the property name was &lt;i&gt;"CustomerName"&lt;/i&gt; would be &lt;i&gt;"customerName"&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringCapitalCaseParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: string&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;CapitalCase&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has a string value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;CapitalCase&lt;/i&gt; function is used to convert a string value to capital case.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;PropertyName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;CapitalCase&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the property name was &lt;i&gt;"customerName"&lt;/i&gt; would be &lt;i&gt;"CustomerName"&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringContainsParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Contains&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;string&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies a string to search for.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Contains&lt;/i&gt; function is used to indicate if the input &lt;i&gt;text&lt;/i&gt; contains the input &lt;i&gt;string&lt;/i&gt;.  The search is case sensitive, and returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if a match is found, &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt; otherwise.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Contains&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"customer"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; if the description contained "customer" would be &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;.
&lt;br&gt;&lt;br&gt;
A special use of this function is available in conjunction with the &lt;span style="color:teal"&gt;&lt;b&gt;Tags&lt;/b&gt;&lt;/span&gt; collection on any node or instance in the solution model.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Tags&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Contains&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Ignore"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; if model instance contained a tag exactly matching "Ignore" would be &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringEndsWithParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EndsWith&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;string&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies a string to search for.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;EndsWith&lt;/i&gt; function is used to indicate if the input &lt;i&gt;text&lt;/i&gt; ends with the input &lt;i&gt;string&lt;/i&gt;.  The search is case sensitive, and returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if a match is found, &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt; otherwise.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EndsWith&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"customer."&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; if the description ended with "customer." would be &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringFilterIgnoredParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;FilterIgnored&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;FilterIgnored&lt;/i&gt; function is used to filter the input &lt;i&gt;text&lt;/i&gt; by &lt;i&gt;IGNOREDAREASTART&lt;/i&gt; and &lt;i&gt;IGNOREDAREAEND&lt;/i&gt; tags (see the Configuration Properties section for more information on ignored areas).  The filtered text (filtered of all occurrences of ignored areas) is returned.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;FilterIgnored&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the description contained ignored areas would be a filtered description without the ignored areas.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringFilterParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Filter&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;beginTag&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;endTag&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;beginTag&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies a string to search for.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;endTag&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies a string after &lt;i&gt;beginTag&lt;/i&gt; to search for.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Filter&lt;/i&gt; function is used to filter the input &lt;i&gt;text&lt;/i&gt; by taking out the area from the first matching &lt;i&gt;beginTag&lt;/i&gt; to the first matching &lt;i&gt;endTag&lt;/i&gt; after &lt;i&gt;beginTag&lt;/i&gt; (including the tags).  The filtered text is returned.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Filter&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"&amp;lt;customer&amp;gt;"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"&amp;lt;/customer&amp;gt;"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; if the description contained a string matching "&amp;lt;customer&amp;gt;" followed by a string matching "&amp;lt;/customer&amp;gt;" would be a filtered description without the first "&amp;lt;customer&amp;gt;...&amp;lt;/customer&amp;gt;" region.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringFilterProtectedParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;FilterProtected&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;FilterProtected&lt;/i&gt; function is used to filter the input &lt;i&gt;text&lt;/i&gt; by &lt;i&gt;PROTECTEDAREASTART&lt;/i&gt; and &lt;i&gt;PROTECTEDAREAEND&lt;/i&gt; tags (see the Configuration Properties section for more information on protected areas).  The filtered text (filtered of all occurrences of protected areas) is returned.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;FilterProtected&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the description contained protected areas would be a filtered description without the protected areas.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringIndexOfParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;IndexOf&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;string&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies a string to search for.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;IndexOf&lt;/i&gt; function is used to indicate the index of the input &lt;i&gt;string&lt;/i&gt;, if the input &lt;i&gt;text&lt;/i&gt; contains the input &lt;i&gt;string&lt;/i&gt;.  The search is case sensitive, and returns the 0 based index &lt;span style="color:slateblue"&gt;&lt;b&gt;n&lt;/b&gt;&lt;/span&gt; where the match was found (if a match is found), &lt;span style="color:slateblue"&gt;&lt;b&gt;-1&lt;/b&gt;&lt;/span&gt; otherwise.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;IndexOf&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"customer"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; if the description contained "customer" at position 18 would be &lt;span style="color:slateblue"&gt;&lt;b&gt;18&lt;/b&gt;&lt;/span&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringRegexIsMatchParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;RegexIsMatch&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;regex&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;regex&lt;/i&gt; is any regular expression to match the &lt;i&gt;text&lt;/i&gt; with.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;RegexIsMatch&lt;/i&gt; function is used to indicate if the input &lt;i&gt;text&lt;/i&gt; conforms to the input regular expression &lt;i&gt;regex&lt;/i&gt;.  The search returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if a match is found, &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt; otherwise.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;RegexIsMatch&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; if the description matched the (rough) email regular expression would be &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringRegexReplaceParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;RegexReplace&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;regex&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;replace&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;regex&lt;/i&gt; is any regular expression to match the &lt;i&gt;text&lt;/i&gt; with.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;replace&lt;/i&gt; is any expression yielding a string for replacement.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;RegexReplace&lt;/i&gt; function is used to replace text in &lt;i&gt;text&lt;/i&gt; that conforms to the input regular expression &lt;i&gt;regex&lt;/i&gt; with the replacement string &lt;i&gt;replace&lt;/i&gt;.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;RegexReplace&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"xxx"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; if the description matched the (rough) email regular expression would be &lt;span style="color:slateblue"&gt;&lt;b&gt;"xxx"&lt;/b&gt;&lt;/span&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringReplaceParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Replace&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;find&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;replace&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;find&lt;/i&gt; is any expression yielding a string to match the &lt;i&gt;text&lt;/i&gt; with.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;replace&lt;/i&gt; is any expression yielding a string for replacement.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Replace&lt;/i&gt; function is used to replace text in &lt;i&gt;text&lt;/i&gt; that matches &lt;i&gt;find&lt;/i&gt; with the replacement string &lt;i&gt;replace&lt;/i&gt;.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Replace&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"User"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Customer"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; will replace all occurrences of "User" to "Customer".</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringStartsWithParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;StartsWith&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;string&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies a string to search for.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;StartsWith&lt;/i&gt; function is used to indicate if the input &lt;i&gt;text&lt;/i&gt; starts with the input &lt;i&gt;string&lt;/i&gt;.  The search is case sensitive, and returns &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt; if a match is found, &lt;span style="color:slateblue"&gt;&lt;b&gt;false&lt;/b&gt;&lt;/span&gt; otherwise.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;StartsWith&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"The customer"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; if the description started with "The customer" would be &lt;span style="color:slateblue"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringSubstringParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: text&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Substring&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;startIndex&lt;i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;length&lt;/i&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;text&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has textual (string) content.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;startIndex&lt;/i&gt; is any expression yielding an integer for the starting index within &lt;i&gt;text&lt;/i&gt;.&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;length&lt;/i&gt;, if supplied is any expression yielding an integer for the maximum length of the substring to return.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Substring&lt;/i&gt; function is used to get a piece of text within &lt;i&gt;text&lt;/i&gt; that starts at &lt;i&gt;startIndex&lt;/i&gt;.  If &lt;i&gt;length&lt;/i&gt;, is supplied, the substring return is limited to that length, otherwise, the remainder of the text from &lt;i&gt;startIndex&lt;/i&gt; is returned.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Substring&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;IndexOf&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Customer"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;8&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; will return a substring of "Customer" (assuming the description contains this substring).</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringToLowerParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: string&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;ToLower&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has a string value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;ToLower&lt;/i&gt; function is used to convert a string value to lower case.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;PropertyName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;ToLower&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the property name was &lt;i&gt;"CustomerName"&lt;/i&gt; would be &lt;i&gt;"customername"&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringToUpperParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: string&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;ToUpper&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has a string value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;ToUpper&lt;/i&gt; function is used to convert a string value to upper case.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;PropertyName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;ToUpper&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the property name was &lt;i&gt;"CustomerName"&lt;/i&gt; would be &lt;i&gt;"CUSTOMERNAME"&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringTrimEndParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: string&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;TrimEnd&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has a string value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;TrimEnd&lt;/i&gt; function is used to trim white space off the end of a string value.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;PropertyName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;TrimEnd&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the property name was &lt;i&gt;" CustomerName "&lt;/i&gt; would be &lt;i&gt;" CustomerName"&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringTrimParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: string&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Trim&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has a string value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Trim&lt;/i&gt; function is used to trim white space off of both ends of a string value.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;PropertyName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Trim&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the property name was &lt;i&gt;" CustomerName "&lt;/i&gt; would be &lt;i&gt;"CustomerName"&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringTrimStartParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: string&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;TrimStart&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has a string value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;TrimStart&lt;/i&gt; function is used to trim white space off the beginning of a string value.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;PropertyName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;TrimStart&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the property name was &lt;i&gt;" CustomerName "&lt;/i&gt; would be &lt;i&gt;"CustomerName "&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringUnderscoreCaseParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: string&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;UnderscoreCase&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has a string value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;UnderscoreCase&lt;/i&gt; function is used to convert a string value to underscore case.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;PropertyName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;UnderscoreCase&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the property name was &lt;i&gt;"CustomerName"&lt;/i&gt; would be &lt;i&gt;"_customerName"&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesIgnoredAreaEndMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;IGNOREDAREAEND&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;string&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is a string literal value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;IGNOREDAREAEND&lt;/i&gt; configuration property is used to define a ending area or tag that represents an ignored area.  An ignored area is usually used in conjunction with the &lt;span style="color:teal"&gt;&lt;b&gt;FilterIgnored&lt;/b&gt;&lt;/span&gt; function to help in output decision making.  &lt;b&gt;Mo+&lt;/b&gt; supports one recognized ignored area at a time.  From template to template, this property can be changed as needed.
&lt;br&gt;&lt;br&gt;
For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;IGNOREDAREAEND&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;"&amp;lt;/Status&amp;gt;"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
sets the end of an ignored area to the &lt;i&gt;&amp;lt;/Status&amp;gt;&lt;/i&gt; ending tag.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesIgnoredAreaStartMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;IGNOREDAREASTART&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;string&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is a string literal value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;IGNOREDAREASTART&lt;/i&gt; configuration property is used to define a starting area or tag that represents an ignored area.  An ignored area is usually used in conjunction with the &lt;span style="color:teal"&gt;&lt;b&gt;FilterIgnored&lt;/b&gt;&lt;/span&gt; function to help in output decision making.  &lt;b&gt;Mo+&lt;/b&gt; supports one recognized ignored area at a time.  From template to template, this property can be changed as needed.
&lt;br&gt;&lt;br&gt;
For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;IGNOREDAREASTART&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;"&amp;lt;CreatedByUserName&amp;gt;"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
sets the start of an ignored area to the &lt;i&gt;&amp;lt;CreatedByUserName&amp;gt;&lt;/i&gt; tag.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesNowMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;NOW&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;NOW&lt;/i&gt; configuration property is used to get the current date.  This is most often used to mark the date a file was generated.
&lt;br&gt;&lt;br&gt;
For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;NOW&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
gets the current date, such as "4/9/2013".</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesProtectedAreaEndMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;PROTECTEDAREAEND&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;string&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is a string literal value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;PROTECTEDAREAEND&lt;/i&gt; configuration property is used to define a ending area or tag that represents a protected area, an area that will be maintained when a file is (re)generated.  A protected area is usually used in conjunction with the &lt;span style="color:teal"&gt;&lt;b&gt;FilterProtected&lt;/b&gt;&lt;/span&gt; function to help in output decision making.  &lt;b&gt;Mo+&lt;/b&gt; supports one recognized protected area at a time.  From template to template, this property can be changed as needed.
&lt;br&gt;&lt;br&gt;
For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;PROTECTEDAREAEND&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;"#endregion protected"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
sets the end of a protected area to "#endregion protected".</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesProtectedAreaStartMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;PROTECTEDAREASTART&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;string&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is a string literal value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;PROTECTEDAREASTART&lt;/i&gt; configuration property is used to define a starting area or tag that represents a protected area, an area that will be maintained when a file is (re)generated.  A protected area is usually used in conjunction with the &lt;span style="color:teal"&gt;&lt;b&gt;FilterProtected&lt;/b&gt;&lt;/span&gt; function to help in output decision making.  &lt;b&gt;Mo+&lt;/b&gt; supports one recognized protected area at a time.  From template to template, this property can be changed as needed.
&lt;br&gt;&lt;br&gt;
For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;PROTECTEDAREASTART&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;"#region protected"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
sets the start of a protected area to "#region protected".</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesTabMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;TAB&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;number&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;number&lt;/i&gt; is a numeric literal value, positive or negative.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;TAB&lt;/i&gt; configuration property is used to increment or decrement the number of tab stops to add to the code content when a new line is reached.  A tab is usually used in conjuntion with the &lt;span style="color:teal"&gt;&lt;b&gt;USETABS&lt;/b&gt;&lt;/span&gt; (true) configuration property to manage the indentation when going from one template to another in building up code content.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;TAB&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
adds another tab to the number of tab stops added to the code content when a new line is reached.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesTabStringMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;TABSTRING&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;string&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is a string literal value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;TABSTRING&lt;/i&gt; configuration property is used to determine what to output for a tab when using the &lt;i&gt;USETABS&lt;/i&gt; tab management feature.  The default value is the tab key.  Setting the tab is usually used in conjuntion with the &lt;span style="color:teal"&gt;&lt;b&gt;USETABS&lt;/b&gt;&lt;/span&gt; (true) configuration property to manage the indentation when going from one template to another in building up code content.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;TABSTRING&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;"    "&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
sets the tab to 4 spaces.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesUseIgnoredAreasMethodaragraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;USEIGNOREDAREAS&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;true/false&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;true/false&lt;/i&gt; is either true or false.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;USEIGNOREDAREAS&lt;/i&gt; configuration property is used to turn the ignored area feature on or off.  An ignored area is usually used in conjunction with the &lt;span style="color:teal"&gt;&lt;b&gt;FilterIgnored&lt;/b&gt;&lt;/span&gt; function to help in output decision making.  &lt;b&gt;Mo+&lt;/b&gt; supports one recognized ignored area at a time.  From template to template, this property can be changed as needed.
&lt;br&gt;&lt;br&gt;
For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;USEIGNOREDAREAS&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
turns on the ignored areas feature.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesUseProtectedAreasMethodaragraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;USEPROTECTEDAREAS&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;true/false&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;true/false&lt;/i&gt; is either true or false.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;USEPROTECTEDAREAS&lt;/i&gt; configuration property is used to turn the protected area feature on or off.  A protected area is an area that will be maintained when a file is (re)generated.  A protected area is usually used in conjunction with the &lt;span style="color:teal"&gt;&lt;b&gt;FilterProtected&lt;/b&gt;&lt;/span&gt; function to help in output decision making.  &lt;b&gt;Mo+&lt;/b&gt; supports one recognized protected area at a time.  From template to template, this property can be changed as needed.
&lt;br&gt;&lt;br&gt;
For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;USEPROTECTEDAREAS&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
turns on the protected area feature.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesUserMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;USER&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;USER&lt;/i&gt; configuration property is used to get the current logged in user.  This is most often used to mark who initiated the generation of a file.
&lt;br&gt;&lt;br&gt;
For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;USER&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
gets the current user such as "MyComputer\UserName".</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceConfigurationPropertiesUseTabsMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;USETABS&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;true/false&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;true/false&lt;/i&gt; is either true or false.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;USETABS&lt;/i&gt; configuration property is used to turn the tab management feature on or off.  Tab management is used to manage the indentation when going from one template to another in building up code content.  When this feature is used, leading whitespace in code template content is ignored, and replaced with the current number of tabs.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:chocolate"&gt;&lt;b&gt;USETABS&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
turns on the tab management feature.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesExtendingEntitiesCollectionParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;i&gt;&lt;b&gt;entityContext&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;&lt;span style="color:teal"&gt;&lt;b&gt;ExtendingEntities&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;entityContext&lt;/i&gt;, if provided, refers (by any form of model context) to an instance of an entity in the solution model.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas, used in a &lt;span style="color:blue"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt; statement &lt;span style="color:blue"&gt;&lt;b&gt;in&lt;/b&gt;&lt;/span&gt; clause.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;ExtendingEntities&lt;/i&gt; property returns a collection of all of the entities in the solution model that extend the current entity in the model context (or &lt;i&gt;entityContext&lt;/i&gt;).  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;in&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;ExtendingEntities&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
gets all entities in the solution model that extend the current entity.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesGetBaseAndEntitiesCollectionParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;i&gt;&lt;b&gt;entityContext&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;&lt;span style="color:teal"&gt;&lt;b&gt;BaseAndEntityEntities&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;entityContext&lt;/i&gt;, if provided, refers (by any form of model context) to an instance of an entity in the solution model.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas, used in a &lt;span style="color:blue"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt; statement &lt;span style="color:blue"&gt;&lt;b&gt;in&lt;/b&gt;&lt;/span&gt; clause.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;BaseAndEntityEntities&lt;/i&gt; property returns a collection of entities that the current entity in the model context (or &lt;i&gt;entityContext&lt;/i&gt;) extends.  The collection begins with the entity in the chain of base entities that does not extend another entity, then the chain of extending entities goes up to the current entity.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;in&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;BaseAndEntityEntities&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
gets the chain of base entities (base most first) of the current entity, including the current entity.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesGetEntityAndBasesCollectionParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;i&gt;&lt;b&gt;entityContext&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityAndBaseEntities&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;entityContext&lt;/i&gt;, if provided, refers (by any form of model context) to an instance of an entity in the solution model.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas, used in a &lt;span style="color:blue"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt; statement &lt;span style="color:blue"&gt;&lt;b&gt;in&lt;/b&gt;&lt;/span&gt; clause.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;EntityAndBaseEntities&lt;/i&gt; property returns a collection of entities that the current entity in the model context (or &lt;i&gt;entityContext&lt;/i&gt;) extends.  The collection begins with the current entity and continues for the base entity of the current entity (if it has one), and the base entity of that entity, and so on.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;in&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityAndBaseEntities&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
gets the chain of base entities (current entity first) of the current entity.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsFileExistsMethodParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;FileExists&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;path&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;path&lt;/i&gt; is any expression (property, template call, literal, etc.) that specifies the full path to get file existence from.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In the &lt;i&gt;Output&lt;/i&gt; areas of code templates only.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;FileExists&lt;/i&gt; function is used to test the existence of a file (usually in the output solution directory), and returns &lt;i&gt;true&lt;/i&gt; if the file exists, &lt;i&gt;false&lt;/i&gt; otherwise.  This function is often used in output decision making, to determine if the file should be updated.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;FileExists&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"c:\\tmp\\test.txt"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt; would be &lt;i&gt;true&lt;/i&gt; if the indicated file exists.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesItemFilePropertyParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;ItemFile&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;ItemFile&lt;/i&gt; property is used to get the contents of a file being iterated through in a &lt;span style="color:teal"&gt;&lt;b&gt;forfiles&lt;/b&gt;&lt;/span&gt; statement.  This property is used only inside a &lt;span style="color:teal"&gt;&lt;b&gt;forfiles&lt;/b&gt;&lt;/span&gt; statement.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;forfiles (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;ProjectDirectory&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;".cs"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;var&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;text&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;ItemFile&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This will get the contents of each .cs file in the project directory and assign it to a variable.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesItemIndexPropertyParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;ItemIndex&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;ItemIndex&lt;/i&gt; property is used to get the (0 based) index of an item in a collection being iterated through in a &lt;span style="color:teal"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt; statement.  This property is used only inside a &lt;span style="color:teal"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt; statement.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%-&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;ItemIndex&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;+&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%-&lt;/b&gt;&lt;/span&gt;&lt;span style="color:darkorange"&gt;&lt;b&gt;.&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;EntityName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This will add to the content a numbered list of entities, using &lt;i&gt;ItemIndex&lt;/i&gt; + 1 to make the list 1 based.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesItemPathPropertyParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;ItemPath&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;ItemPath&lt;/i&gt; property is used to get the full file path of a file being iterated through in a &lt;span style="color:teal"&gt;&lt;b&gt;forfiles&lt;/b&gt;&lt;/span&gt; statement.  This property is used only inside a &lt;span style="color:teal"&gt;&lt;b&gt;forfiles&lt;/b&gt;&lt;/span&gt; statement.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;forfiles (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;ProjectDirectory&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;".cs"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;var&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;path&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;ItemPath&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This will get the full file path of each .cs file in the project directory and assign it to a variable.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesLibraryDirectoryPropertyParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;LibraryDirectory&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;LibraryDirectory&lt;/i&gt; property is used to get the full path to the directory where general library content may be stored.  The location of this directory comes from an application setting.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;forfiles (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;LibraryDirectory&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;,&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;".java"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;var&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;text&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;ItemFile&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This will scan the contents of all .java files in the library directory.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesPathPropertyParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;Path&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In code template output areas only.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Path&lt;/i&gt; property is a special property that is used to get (or set) a template's path for updating content to.  A template can only access its own path in this manner.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;var&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;&amp;nbsp;path&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Path&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;Path&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"c:\\tmp\\test.txt"&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This will get the template's path and set it to a variable, then set the path to "c:\\tmp\\test.txt".  The &lt;i&gt;Path&lt;/i&gt; property can used to set the template's path, or it can be done by building up the path via text and property tags.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesPathRelationshipsParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;i&gt;&lt;b&gt;entityContext&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;&lt;span style="color:teal"&gt;&lt;b&gt;PathRelationships&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;entityContext&lt;/i&gt;, if provided, refers (by any form of model context) to an instance of an entity in the solution model.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas, used in a &lt;span style="color:blue"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt; statement &lt;span style="color:blue"&gt;&lt;b&gt;in&lt;/b&gt;&lt;/span&gt; clause.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;PathRelationships&lt;/i&gt; property returns a collection of relationships that the current entity in the model context (or &lt;i&gt;entityContext&lt;/i&gt;) has via each if its property references (including base entities).  This collection is useful for constructing join clauses in sql queries.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Relationship&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;in&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;PathRelationships&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkgreen"&gt;&lt;b&gt;// put any number of statements here...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
gets the chain of relationships for the current entity, based on property references.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesRecordItemParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;Record&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Record&lt;/i&gt; property is a special model element that holds the contents of a database record.  To be used in conjunction with the &lt;span style="color:teal"&gt;&lt;b&gt;Column&lt;/b&gt;&lt;/span&gt; function in a &lt;span style="color:teal"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt; statement.  For example, in an &lt;i&gt;Entity&lt;/i&gt; template:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Record&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%-&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:darkorange"&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%=&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Column&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;(&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"Description"&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This will retrieve database records for the &lt;i&gt;Entity&lt;/i&gt;.  For this to work, the &lt;i&gt;Entity&lt;/i&gt; instance must be created in the solution model from a &lt;i&gt;DatabaseSource&lt;/i&gt; database table.  This table data is then read during the &lt;i&gt;foreach&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesTemplatePropertyParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;Template&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Template&lt;/i&gt; property is a special property that is used to get the content or induce the output of a &lt;i&gt;Project&lt;/i&gt;'s template, which is selected when the project is edited.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Project&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;&amp;lt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:magenta"&gt;&lt;b&gt;Template&lt;/b&gt;&lt;/span&gt;&lt;span style="color:gray;background-color:yellow"&gt;&lt;b&gt;%%&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This will induce the output for each &lt;i&gt;Project&lt;/i&gt; template, utilizing the actual template that is assigned to each &lt;i&gt;Project&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesTextPropertyParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;Text&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;Text&lt;/i&gt; property is a special property that is used to get (or set) a template's content.  A template can only access its own content in this manner.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;var&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;&amp;nbsp;text&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Text&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:teal"&gt;&lt;b&gt;Text&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;&amp;nbsp;=&amp;nbsp;&lt;/b&gt;&lt;/span&gt;&lt;span style="color:slateblue"&gt;&lt;b&gt;"hello world"&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
This will get the template's content and set it to a variable, then set the content to "hello world".  Usually, the &lt;i&gt;Text&lt;/i&gt; property is not used to set the template's content (this is usually done by building up content via text and property tags), but under some circumstances it may be desirable to reset the content as it's being built.</value>
    <comment>For help.</comment>
  </data>
  <data name="Menu_CancelJobs" xml:space="preserve">
    <value>_Quit Jobs</value>
    <comment>For menus.</comment>
  </data>
  <data name="Menu_Exit" xml:space="preserve">
    <value>_Exit</value>
    <comment>For menus.</comment>
  </data>
  <data name="Menu_File" xml:space="preserve">
    <value>_File</value>
    <comment>For menus.</comment>
  </data>
  <data name="Menu_Help" xml:space="preserve">
    <value>_Help</value>
    <comment>For menus.</comment>
  </data>
  <data name="Menu_HelpAbout" xml:space="preserve">
    <value>_About Mo+Solution Builder</value>
    <comment>For menus.</comment>
  </data>
  <data name="Menu_HelpGettingStarted" xml:space="preserve">
    <value>_Getting Started</value>
    <comment>For menus.</comment>
  </data>
  <data name="Menu_NewSolution" xml:space="preserve">
    <value>_New Solution</value>
    <comment>For menus.</comment>
  </data>
  <data name="Menu_OpenSolution" xml:space="preserve">
    <value>_Open Solution</value>
    <comment>For menus.</comment>
  </data>
  <data name="Menu_RecentSolutions" xml:space="preserve">
    <value>_Recent Solutions</value>
    <comment>For menus.</comment>
  </data>
  <data name="Menu_SaveAll" xml:space="preserve">
    <value>_Save All</value>
    <comment>For menus.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementsParagraph2" xml:space="preserve">
    <value>In addition to understanding the model structure that appears in the tree view and the documents being edited in the designer, it is essential to know the formal names for each type of element and corresponding properties, as these are used in the &lt;b&gt;Mo+&lt;/b&gt; programming language.
&lt;br&gt;&lt;br&gt;
The sections below are organized by the name of each type of element or node in the model structure, and contains details about that node and the properties within.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementsParagraph2" xml:space="preserve">
    <value>&lt;b&gt;Mo+ Solution Builder&lt;/b&gt; will load actual database or xml specification source data into these elements.  Then, &lt;b&gt;Mo+&lt;/b&gt; spec templates will be able to utilize the data in this structure to create and update solution models.
&lt;br&gt;&lt;br&gt;
The sections below are organized by the name of each type of element or node in the specification structure, and contains details about that node and the properties within.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceDragDropHeader" xml:space="preserve">
    <value>Drag/Drop, Copy/Paste</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_UIReferenceDragDropParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Solution Builder Window&lt;/b&gt;
&lt;br&gt;
Within the Solution Builder window, you can use drag and drop, or copy (Ctrl+c) and paste (Ctrl+V) to accelerate the creation of most of the elements within the solution model.
&lt;br&gt;&lt;br&gt;
There are several ways you can do this:
&lt;ul&gt;
&lt;li&gt;Drag an element from one solution, and drop it in another solution.  You must perform the drop over an element that can be traced to an appropriate parent element for the element you are dropping.  For example, if you are dragging a Property, that property must be dropped onto an Entity or any element under that entity.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Copy an element from one solution, and paste it in another solution.  To do the paste, you must select an element that can be traced to an appropriate parent element for the element you are copying.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Drag an element, and drop it in the same solution, but under a different parent.  You must perform the drop over an element that can be traced to an appropriate (and different) parent element for the element you are dropping.  For example, if you are dragging a Property, that property must be dropped onto an Entity or any element under that entity, and that entity cannot be the same entity you are dragging from.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Copy an element, and paste it in the same solution, but under a different parent.  To do the paste, you must select an element that can be traced to an appropriate (and different) parent element for the element you are copying.&lt;/li&gt;
&lt;/ul&gt;
The elements that you drop or paste within a solution model become entirely customized, that is fully detached from any specification source.  If you are using specification sources to load your solution model, it is usually a better idea to load the elements you want to drop or paste from a specification source, if possible.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Diagrams&lt;/b&gt;
&lt;br&gt;
You can add entities to the diagram by:
&lt;ul&gt;
&lt;li&gt;Dragging an Entity from the solution builder window and dropping it onto the diagram canvas.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Dragging a Feature from the solution builder window and dropping it onto the diagram canvas to drop all entities of that feature.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Dragging an Entity from the Entities tab in the diagram and dropping it onto the diagram canvas.&lt;/li&gt;

&lt;/ul&gt;
You can accelerate creating new elements in the diagram by:
&lt;ul&gt;
&lt;li&gt;Dragging from anywhere in the Properties area of one entity, and dropping onto another entity to create a relationship with that entity.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Dragging from anywhere in the Collections area of one entity, and dropping onto another entity to create a Collection of that entity in your source entity.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Dragging from anywhere in the Property References area of one entity, and dropping onto another entity to create a PropertyReference to that entity in your source entity.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;Dragging from anywhere in the Entity References area of one entity, and dropping onto another entity to create an EntityReference to that entity in your source entity.&lt;/li&gt;

&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="ModelElements" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>ModelElements.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="SpecificationElements" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>SpecificationElements.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Edit_TestNameProperty" xml:space="preserve">
    <value>Test Name</value>
  </data>
  <data name="Help_LanguageReferenceSpecialPropertiesThisKeywordParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:teal"&gt;&lt;b&gt;this&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;this&lt;/i&gt; property is used to get the model element instance that is at the top of the stack in the template.  In other words, &lt;i&gt;this&lt;/i&gt; is the model element instance that the template is initially called with.  From this keyword, you can get access to other properties or model elements from the referred to model element instance.
&lt;br&gt;&lt;br&gt;
For example, &lt;span style="color:teal"&gt;&lt;b&gt;this.EntityName&lt;/b&gt;&lt;/span&gt; will get the name of the entity at the top of the stack, assuming that the element at the top of the stack is an Entity or child of Entity.</value>
    <comment>For help.</comment>
  </data>
  <data name="Button_New" xml:space="preserve">
    <value>_New</value>
    <comment>For the new button.</comment>
  </data>
  <data name="Edit_GroupNameProperty" xml:space="preserve">
    <value>Group Name</value>
    <comment>For the group name.</comment>
  </data>
  <data name="Help_LanguageReferenceFunctionsStringCapitalWordCaseParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: string&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;CapitalWordCase&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;Where&lt;/b&gt;: &lt;i&gt;string&lt;/i&gt; is any model property (or specification property for spec templates) or template call that has a string value.
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all spec and code template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;CapitalWordCase&lt;/i&gt; function is used to convert a string value to a set of capitalized words, essentially breaking intercap strings into separate capitalized words.  Underscores are converted into spaces and leading/trailing/extra underscores and spaces are removed.  For example, the result of &lt;span style="color:teal"&gt;&lt;b&gt;PropertyName&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;.&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;CapitalCase&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;()&lt;/b&gt;&lt;/span&gt; if the property name was &lt;i&gt;"customerName"&lt;/i&gt; would be &lt;i&gt;"Customer Name"&lt;/i&gt;.</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_StartupWorkingWithTemplatesHeader" xml:space="preserve">
    <value>Working with Templates</value>
    <comment>For help</comment>
  </data>
  <data name="Help_StartupWorkingWithTemplatesParagraph1" xml:space="preserve">
    <value>Templates are powerful model oriented bits of code that can be used to create and maintain your models or code.  The easiest way to get started in working with templates is to download and use existing template libraries as a starting point for your own work (see the &lt;i&gt;Template Libraries and Other Resources&lt;/i&gt; section).
&lt;br&gt;&lt;br&gt;
To generate code, you choose which code template to use in your solution (and optionally for each project as well).  If your solution is not tied to a code template, when you generate code, a default text file will be created.
&lt;br&gt;&lt;br&gt;
To update your model from outside (database and xml) sources, you choose which spec template to use in your specification source.  If your database source is not tied to a spec template, your model will be loaded with some default information from your database.
&lt;br&gt;&lt;br&gt;
When you are creating new templates or modifying exising ones, you will want to know:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;How to edit templates: &lt;/b&gt;You will want to look at the &lt;i&gt;User Interface Reference/Templates&lt;/i&gt; section in the help to grasp the basics of templates and template editing.  You will want to know about the syntax recognition, editing hot keys, and find/replace features (see &lt;i&gt;User Interface Reference/Templates/Editing Templates&lt;/i&gt; section in the help).&lt;/li&gt;

&lt;li&gt;&lt;b&gt;How to debug templates: &lt;/b&gt;You will want to know about the rich facility to help you debug your templates (see &lt;i&gt;User Interface Reference/Templates/Debugging Templates&lt;/i&gt; section in the help).&lt;/li&gt;

&lt;li&gt;&lt;b&gt;How templates work: &lt;/b&gt;To get a better grasp on how templates work, you will want to look at the &lt;i&gt;Mo+ Language Reference/Templates&lt;/i&gt; section in the help, in particular the workflow subsections that describe the overall process.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;How to call other templates: &lt;/b&gt;You will want to the many different ways you can call other templates and utilize other templates as reusable building blocks (see &lt;i&gt;Mo+ Language Reference/Templates/Calling Templates&lt;/i&gt; section in the help).&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help</comment>
  </data>
  <data name="Help_LanguageReferenceStatementsContinueTermParagraph1" xml:space="preserve">
    <value>&lt;b&gt;Syntax&lt;/b&gt;: &lt;span style="color:blue"&gt;&lt;b&gt;continue&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Availability&lt;/b&gt;: In all code and spec template areas.
&lt;br&gt;&lt;br&gt;
The &lt;i&gt;continue&lt;/i&gt; statement is used to skip past the remaining set of statements within iterations such as &lt;span style="color:blue"&gt;&lt;b&gt;foreach&lt;/b&gt;&lt;/span&gt;, &lt;span style="color:blue"&gt;&lt;b&gt;while&lt;/b&gt;&lt;/span&gt;, and &lt;span style="color:blue"&gt;&lt;b&gt;forfiles&lt;/b&gt;&lt;/span&gt;.  The &lt;i&gt;continue&lt;/i&gt; statement can appear within a &lt;span style="color:blue"&gt;&lt;b&gt;with&lt;/b&gt;&lt;/span&gt; or &lt;span style="color:blue"&gt;&lt;b&gt;if&lt;/b&gt;&lt;/span&gt; statement block, where its primary function is to skip past statements in the parent iteration.  For example:
&lt;br&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;foreach (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:teal"&gt;&lt;b&gt;Entity&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;if (&lt;/b&gt;&lt;/span&gt;&lt;span style="color:brown"&gt;&lt;b&gt;SomeCondition&lt;/b&gt;&lt;/span&gt;&lt;span style="color:blue"&gt;&lt;b&gt; == true)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;{&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;continue&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color:blue"&gt;&lt;b&gt;SomeStatements&lt;/b&gt;&lt;/span&gt;&lt;br&gt;
&lt;span style="color:blue"&gt;&lt;b&gt;}&lt;/b&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;
will skip &lt;i&gt;SomeStatements&lt;/i&gt; if &lt;i&gt;SomeCondition&lt;/i&gt; is met.</value>
    <comment>For help.</comment>
  </data>
  <data name="Edit_UseRelativePathsProperty" xml:space="preserve">
    <value>Use Relative Paths (useful only after solution is saved to a location)</value>
    <comment>For indicating if template paths for solution should be relative.</comment>
  </data>
  <data name="NodeName_ModelData" xml:space="preserve">
    <value>Model Data</value>
    <comment>For model data.</comment>
  </data>
  <data name="NodeName_Instances" xml:space="preserve">
    <value>Instances</value>
    <comment>For instances.</comment>
  </data>
  <data name="NodeName_PropertyCollection" xml:space="preserve">
    <value>Collection</value>
  </data>
  <data name="ContextMenu_NewView" xml:space="preserve">
    <value>New View</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewViewProperty" xml:space="preserve">
    <value>New View Property</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewViewPropertyToolTip" xml:space="preserve">
    <value>For creating properties for a view.</value>
    <comment>For context menus</comment>
  </data>
  <data name="ContextMenu_NewViewToolTip" xml:space="preserve">
    <value>For creating views for a feature.</value>
    <comment>For context menus</comment>
  </data>
  <data name="Edit_FilterProperty" xml:space="preserve">
    <value>Filter</value>
    <comment>For the filter property.</comment>
  </data>
  <data name="Edit_IsAscendingSortProperty" xml:space="preserve">
    <value>Is Ascending Sort</value>
    <comment>For the is ascending sort property.</comment>
  </data>
  <data name="Edit_SortOrderProperty" xml:space="preserve">
    <value>Sort Order</value>
    <comment>For the sort order property.</comment>
  </data>
  <data name="Edit_ViewHeader" xml:space="preserve">
    <value>View</value>
    <comment>For the feature view.</comment>
  </data>
  <data name="Edit_ViewIDProperty" xml:space="preserve">
    <value>View ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="Edit_ViewNameProperty" xml:space="preserve">
    <value>View Name</value>
    <comment>For the name property.</comment>
  </data>
  <data name="Edit_ViewPropertyHeader" xml:space="preserve">
    <value>View Property</value>
    <comment>For the view property.</comment>
  </data>
  <data name="Edit_ViewPropertyIDProperty" xml:space="preserve">
    <value>View Property ID</value>
    <comment>For the id property.</comment>
  </data>
  <data name="NodeName_Views" xml:space="preserve">
    <value>Views</value>
    <comment>For the views node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlView" xml:space="preserve">
    <value>Sql View</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_SqlViewProperty" xml:space="preserve">
    <value>Sql View Property</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_View" xml:space="preserve">
    <value>View</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="NodeName_Templates_ViewProperty" xml:space="preserve">
    <value>View Property</value>
    <comment>For the templates node name in the tree view.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementViewParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;View&lt;/b&gt; represents a collection of properties for a larger purpose in the domain.  A &lt;b&gt;View&lt;/b&gt; is found in a collection as a child of &lt;b&gt;Solution&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;View&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ViewID (Guid)&lt;/b&gt;: The identifier to uniquely identify the view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ViewName (string)&lt;/b&gt;: The name of the view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SolutionID (Guid)&lt;/b&gt;: (or Solution) The identifier of the parent solution.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;View&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ViewProperty&lt;/b&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceModelElementViewPropertyParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;ViewProperty&lt;/b&gt; represents a property within a view.  A &lt;b&gt;ViewProperty&lt;/b&gt; is found in a collection as a child of &lt;b&gt;View&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;ViewProperty&lt;/b&gt; consists of the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ViewPropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the view property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Order (int)&lt;/b&gt;: The order of the property within the view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the view property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ViewID (Guid)&lt;/b&gt;: (or View) The identifier of the parent view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;PropertyID (Guid)&lt;/b&gt;: (or Property) The identifier of the parent solution.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlViewParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlView&lt;/b&gt; represents information found in a database view.  A &lt;b&gt;SqlView&lt;/b&gt; is found in a collection as a child of &lt;b&gt;SqlDatabase&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlView&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlViewID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlViewName (string)&lt;/b&gt;: The name of the sql view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DbID (int)&lt;/b&gt;: The external identifier of the sql view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;CreateDate (DateTime)&lt;/b&gt;: The created date of the sql view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DateLastModified (DateTime)&lt;/b&gt;: The last modified date of the sql view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Urn (string)&lt;/b&gt;: The urn of the sql view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State (string)&lt;/b&gt;: The state of the sql view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the sql view.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlDatabaseID (Guid)&lt;/b&gt;: (or SqlDatabase) The identifier of the parent sql database.&lt;/li&gt;
&lt;/ul&gt;
A &lt;b&gt;SqlView&lt;/b&gt; can contain collections of the following:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlViewProperty&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Help_ModelReferenceSpecElementSqlViewPropertyParagraph1" xml:space="preserve">
    <value>A &lt;b&gt;SqlViewProperty&lt;/b&gt; represents information found in a database view property.  A &lt;b&gt;SqlViewProperty&lt;/b&gt; is found in a collection as a child of &lt;b&gt;SqlView&lt;/b&gt;.
&lt;br&gt;&lt;br&gt;
A &lt;b&gt;SqlViewProperty&lt;/b&gt; consists of the following properties (values other than internal IDs are as found in the database):
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SqlViewPropertyID (Guid)&lt;/b&gt;: The identifier to uniquely identify the sql view property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedTable (string)&lt;/b&gt;: The name of the table corresponding to the property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReferencedColumn (string)&lt;/b&gt;: The name of the corresponding column.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;DbID (int)&lt;/b&gt;: The external identifier of the sql view property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Urn (string)&lt;/b&gt;: The urn of the sql view property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;State (string)&lt;/b&gt;: The state of the sql view property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Description (string)&lt;/b&gt;: The description of the sql view property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SqlViewID (Guid)&lt;/b&gt;: (or SqlView) The identifier of the parent sql view.&lt;/li&gt;
&lt;/ul&gt;</value>
    <comment>For help.</comment>
  </data>
  <data name="Edit_MinLengthProperty" xml:space="preserve">
    <value>Minimum Length</value>
    <comment>For min length property.</comment>
  </data>
  <data name="Edit_ValueConstraintProperty" xml:space="preserve">
    <value>Value Constraint</value>
    <comment>For value constraint property.</comment>
  </data>
</root>